digraph {
  1000 [label=FIELD_IDENTIFIER ORDER=2 ARGUMENT_INDEX=2 CODE="netdev" COLUMN_NUMBER=2 LINE_NUMBER=83 CANONICAL_NAME="netdev"]
  1003 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="ctx" COLUMN_NUMBER=22 LINE_NUMBER=84 TYPE_FULL_NAME="tls_context*" NAME="ctx"]
  21283 [label=METHOD_PARAMETER_OUT ORDER=1 CODE="struct work_struct *work" IS_VARIADIC=false COLUMN_NUMBER=36 LINE_NUMBER=68 TYPE_FULL_NAME="work_struct*" EVALUATION_STRATEGY="BY_VALUE" INDEX=1 NAME="work"]
  964 [label=METHOD COLUMN_NUMBER=1 LINE_NUMBER=68 COLUMN_NUMBER_END=1 IS_EXTERNAL=false SIGNATURE="void tls_device_tx_del_task (work_struct*)" NAME="tls_device_tx_del_task" AST_PARENT_TYPE="TYPE_DECL" AST_PARENT_FULL_NAME="tls_device.c:<global>" ORDER=8 CODE="static void tls_device_tx_del_task(struct work_struct *work)
{
	struct tls_offload_context_tx *offload_ctx =
		container_of(work, struct tls_offload_context_tx, destruct_work);
	struct tls_context *ctx = offload_ctx->ctx;
	struct net_device *netdev;

	/* Safe, because this is the destroy flow, refcount is 0, so
	 * tls_device_down can't store this field in parallel.
	 */
	netdev = rcu_dereference_protected(ctx->netdev,
					   !refcount_read(&ctx->refcount));

	netdev->tlsdev_ops->tls_dev_del(netdev, ctx, TLS_OFFLOAD_CTX_DIR_TX);
	dev_put(netdev);
	ctx->netdev = NULL;
	tls_device_free_ctx(ctx);
}" FULL_NAME="tls_device_tx_del_task" LINE_NUMBER_END=85 FILENAME="tls_device.c"]
  987 [label=CALL ORDER=1 ARGUMENT_INDEX=0 CODE="netdev->tlsdev_ops->tls_dev_del" COLUMN_NUMBER=2 METHOD_FULL_NAME="<operator>.indirectFieldAccess" LINE_NUMBER=81 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.indirectFieldAccess"]
  982 [label=CALL ORDER=1 ARGUMENT_INDEX=1 CODE="&ctx->refcount" COLUMN_NUMBER=24 METHOD_FULL_NAME="<operator>.addressOf" LINE_NUMBER=79 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.addressOf"]
  975 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="netdev" COLUMN_NUMBER=2 LINE_NUMBER=78 TYPE_FULL_NAME="net_device*" NAME="netdev"]
  985 [label=FIELD_IDENTIFIER ORDER=2 ARGUMENT_INDEX=2 CODE="refcount" COLUMN_NUMBER=25 LINE_NUMBER=79 CANONICAL_NAME="refcount"]
  966 [label=BLOCK ORDER=2 ARGUMENT_INDEX=-1 CODE="{
	struct tls_offload_context_tx *offload_ctx =
		container_of(work, struct tls_offload_context_tx, destruct_work);
	struct tls_context *ctx = offload_ctx->ctx;
	struct net_device *netdev;

	/* Safe, because this is the destroy flow, refcount is 0, so
	 * tls_device_down can't store this field in parallel.
	 */
	netdev = rcu_dereference_protected(ctx->netdev,
					   !refcount_read(&ctx->refcount));

	netdev->tlsdev_ops->tls_dev_del(netdev, ctx, TLS_OFFLOAD_CTX_DIR_TX);
	dev_put(netdev);
	ctx->netdev = NULL;
	tls_device_free_ctx(ctx);
}" COLUMN_NUMBER=1 LINE_NUMBER=69 TYPE_FULL_NAME="void"]
  979 [label=FIELD_IDENTIFIER ORDER=2 ARGUMENT_INDEX=2 CODE="netdev" COLUMN_NUMBER=37 LINE_NUMBER=78 CANONICAL_NAME="netdev"]
  978 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="ctx" COLUMN_NUMBER=37 LINE_NUMBER=78 TYPE_FULL_NAME="tls_context*" NAME="ctx"]
  991 [label=FIELD_IDENTIFIER ORDER=2 ARGUMENT_INDEX=2 CODE="tls_dev_del" COLUMN_NUMBER=2 LINE_NUMBER=81 CANONICAL_NAME="tls_dev_del"]
  1001 [label=IDENTIFIER ORDER=2 ARGUMENT_INDEX=2 CODE="NULL" COLUMN_NUMBER=16 LINE_NUMBER=83 TYPE_FULL_NAME="ANY" NAME="NULL"]
  969 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="ctx" COLUMN_NUMBER=22 LINE_NUMBER=72 TYPE_FULL_NAME="tls_context*" NAME="ctx"]
  990 [label=FIELD_IDENTIFIER ORDER=2 ARGUMENT_INDEX=2 CODE="tlsdev_ops" COLUMN_NUMBER=2 LINE_NUMBER=81 CANONICAL_NAME="tlsdev_ops"]
  977 [label=CALL ORDER=1 ARGUMENT_INDEX=1 CODE="ctx->netdev" COLUMN_NUMBER=37 METHOD_FULL_NAME="<operator>.indirectFieldAccess" LINE_NUMBER=78 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.indirectFieldAccess"]
  976 [label=CALL ORDER=2 ARGUMENT_INDEX=2 CODE="rcu_dereference_protected(ctx->netdev,
					   !refcount_read(&ctx->refcount))" COLUMN_NUMBER=11 METHOD_FULL_NAME="rcu_dereference_protected" LINE_NUMBER=78 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="rcu_dereference_protected"]
  986 [label=CALL ORDER=5 ARGUMENT_INDEX=-1 CODE="netdev->tlsdev_ops->tls_dev_del(netdev, ctx, TLS_OFFLOAD_CTX_DIR_TX)" COLUMN_NUMBER=2 METHOD_FULL_NAME="tls_dev_del" LINE_NUMBER=81 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="tls_dev_del"]
  997 [label=CALL ORDER=7 ARGUMENT_INDEX=-1 CODE="ctx->netdev = NULL" COLUMN_NUMBER=2 METHOD_FULL_NAME="<operator>.assignment" LINE_NUMBER=83 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.assignment"]
  965 [label=METHOD_PARAMETER_IN ORDER=1 CODE="struct work_struct *work" IS_VARIADIC=false COLUMN_NUMBER=36 LINE_NUMBER=68 TYPE_FULL_NAME="work_struct*" EVALUATION_STRATEGY="BY_VALUE" INDEX=1 NAME="work"]
  984 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="ctx" COLUMN_NUMBER=25 LINE_NUMBER=79 TYPE_FULL_NAME="tls_context*" NAME="ctx"]
  983 [label=CALL ORDER=1 ARGUMENT_INDEX=1 CODE="ctx->refcount" COLUMN_NUMBER=25 METHOD_FULL_NAME="<operator>.indirectFieldAccess" LINE_NUMBER=79 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.indirectFieldAccess"]
  981 [label=CALL ORDER=1 ARGUMENT_INDEX=1 CODE="refcount_read(&ctx->refcount)" COLUMN_NUMBER=10 METHOD_FULL_NAME="refcount_read" LINE_NUMBER=79 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="refcount_read"]
  980 [label=CALL ORDER=2 ARGUMENT_INDEX=2 CODE="!refcount_read(&ctx->refcount)" COLUMN_NUMBER=9 METHOD_FULL_NAME="<operator>.logicalNot" LINE_NUMBER=79 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.logicalNot"]
  974 [label=CALL ORDER=4 ARGUMENT_INDEX=-1 CODE="netdev = rcu_dereference_protected(ctx->netdev,
					   !refcount_read(&ctx->refcount))" COLUMN_NUMBER=2 METHOD_FULL_NAME="<operator>.assignment" LINE_NUMBER=78 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.assignment"]
  992 [label=IDENTIFIER ORDER=2 ARGUMENT_INDEX=1 CODE="netdev" COLUMN_NUMBER=34 LINE_NUMBER=81 TYPE_FULL_NAME="net_device*" NAME="netdev"]
  993 [label=IDENTIFIER ORDER=3 ARGUMENT_INDEX=2 CODE="ctx" COLUMN_NUMBER=42 LINE_NUMBER=81 TYPE_FULL_NAME="tls_context*" NAME="ctx"]
  971 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="offload_ctx" COLUMN_NUMBER=28 LINE_NUMBER=72 TYPE_FULL_NAME="ANY" NAME="offload_ctx"]
  996 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="netdev" COLUMN_NUMBER=10 LINE_NUMBER=82 TYPE_FULL_NAME="net_device*" NAME="netdev"]
  972 [label=FIELD_IDENTIFIER ORDER=2 ARGUMENT_INDEX=2 CODE="ctx" COLUMN_NUMBER=28 LINE_NUMBER=72 CANONICAL_NAME="ctx"]
  1004 [label=METHOD_RETURN ORDER=3 CODE="RET" COLUMN_NUMBER=1 LINE_NUMBER=68 TYPE_FULL_NAME="void" EVALUATION_STRATEGY="BY_VALUE"]
  989 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="netdev" COLUMN_NUMBER=2 LINE_NUMBER=81 TYPE_FULL_NAME="net_device*" NAME="netdev"]
  967 [label=LOCAL ORDER=1 CODE="struct tls_context* ctx" COLUMN_NUMBER=21 LINE_NUMBER=72 TYPE_FULL_NAME="tls_context*" NAME="ctx"]
  968 [label=CALL ORDER=2 ARGUMENT_INDEX=-1 CODE="*ctx = offload_ctx->ctx" COLUMN_NUMBER=21 METHOD_FULL_NAME="<operator>.assignment" LINE_NUMBER=72 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.assignment"]
  970 [label=CALL ORDER=2 ARGUMENT_INDEX=2 CODE="offload_ctx->ctx" COLUMN_NUMBER=28 METHOD_FULL_NAME="<operator>.indirectFieldAccess" LINE_NUMBER=72 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.indirectFieldAccess"]
  994 [label=IDENTIFIER ORDER=4 ARGUMENT_INDEX=3 CODE="TLS_OFFLOAD_CTX_DIR_TX" COLUMN_NUMBER=47 LINE_NUMBER=81 TYPE_FULL_NAME="ANY" NAME="TLS_OFFLOAD_CTX_DIR_TX"]
  999 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="ctx" COLUMN_NUMBER=2 LINE_NUMBER=83 TYPE_FULL_NAME="tls_context*" NAME="ctx"]
  1002 [label=CALL ORDER=8 ARGUMENT_INDEX=-1 CODE="tls_device_free_ctx(ctx)" COLUMN_NUMBER=2 METHOD_FULL_NAME="tls_device_free_ctx" LINE_NUMBER=84 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="tls_device_free_ctx"]
  988 [label=CALL ORDER=1 ARGUMENT_INDEX=1 CODE="netdev->tlsdev_ops" COLUMN_NUMBER=2 METHOD_FULL_NAME="<operator>.indirectFieldAccess" LINE_NUMBER=81 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.indirectFieldAccess"]
  973 [label=LOCAL ORDER=3 CODE="struct net_device* netdev" COLUMN_NUMBER=20 LINE_NUMBER=73 TYPE_FULL_NAME="net_device*" NAME="netdev"]
  998 [label=CALL ORDER=1 ARGUMENT_INDEX=1 CODE="ctx->netdev" COLUMN_NUMBER=2 METHOD_FULL_NAME="<operator>.indirectFieldAccess" LINE_NUMBER=83 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.indirectFieldAccess"]
  995 [label=CALL ORDER=6 ARGUMENT_INDEX=-1 CODE="dev_put(netdev)" COLUMN_NUMBER=2 METHOD_FULL_NAME="dev_put" LINE_NUMBER=82 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="dev_put"]
  980 -> 977 [label=REACHING_DEF VARIABLE="!refcount_read(&ctx->refcount)"]
  976 -> 974 [label=REACHING_DEF VARIABLE="rcu_dereference_protected(ctx->netdev,
					   !refcount_read(&ctx->refcount))"]
  993 -> 994 [label=DOMINATE ]
  994 -> 987 [label=REACHING_DEF VARIABLE="TLS_OFFLOAD_CTX_DIR_TX"]
  993 -> 987 [label=REACHING_DEF VARIABLE="ctx"]
  993 -> 992 [label=REACHING_DEF VARIABLE="ctx"]
  1000 -> 999 [label=POST_DOMINATE ]
  964 -> 1002 [label=CONTAINS ]
  966 -> 986 [label=AST ]
  987 -> 991 [label=ARGUMENT ]
  986 -> 994 [label=POST_DOMINATE ]
  976 -> 977 [label=AST ]
  964 -> 1003 [label=CONTAINS ]
  1000 -> 998 [label=CFG ]
  1001 -> 997 [label=CFG ]
  983 -> 984 [label=AST ]
  975 -> 968 [label=POST_DOMINATE ]
  977 -> 999 [label=REACHING_DEF VARIABLE="ctx->netdev"]
  964 -> 999 [label=REACHING_DEF VARIABLE=""]
  1002 -> 1004 [label=DOMINATE ]
  987 -> 992 [label=REACHING_DEF VARIABLE="netdev->tlsdev_ops->tls_dev_del"]
  970 -> 968 [label=CFG ]
  990 -> 988 [label=CFG ]
  964 -> 996 [label=CONTAINS ]
  970 -> 1004 [label=REACHING_DEF VARIABLE="offload_ctx->ctx"]
  964 -> 982 [label=CONTAINS ]
  987 -> 993 [label=REACHING_DEF VARIABLE="netdev->tlsdev_ops->tls_dev_del"]
  1002 -> 1004 [label=REACHING_DEF VARIABLE="tls_device_free_ctx(ctx)"]
  972 -> 970 [label=CFG ]
  993 -> 992 [label=POST_DOMINATE ]
  978 -> 979 [label=DOMINATE ]
  987 -> 991 [label=AST ]
  996 -> 995 [label=DOMINATE ]
  981 -> 980 [label=CFG ]
  1001 -> 998 [label=POST_DOMINATE ]
  964 -> 968 [label=CONTAINS ]
  982 -> 983 [label=ARGUMENT ]
  987 -> 992 [label=CFG ]
  998 -> 1003 [label=REACHING_DEF VARIABLE="ctx->netdev"]
  964 -> 993 [label=REACHING_DEF VARIABLE=""]
  983 -> 985 [label=POST_DOMINATE ]
  980 -> 981 [label=ARGUMENT ]
  980 -> 981 [label=AST ]
  971 -> 969 [label=POST_DOMINATE ]
  997 -> 1004 [label=REACHING_DEF VARIABLE="ctx->netdev = NULL"]
  972 -> 970 [label=DOMINATE ]
  981 -> 980 [label=DOMINATE ]
  964 -> 990 [label=CONTAINS ]
  975 -> 978 [label=DOMINATE ]
  989 -> 973 [label=REF ]
  975 -> 978 [label=CFG ]
  977 -> 984 [label=DOMINATE ]
  983 -> 982 [label=REACHING_DEF VARIABLE="ctx->refcount"]
  983 -> 982 [label=REACHING_DEF VARIABLE="ctx->refcount"]
  986 -> 992 [label=ARGUMENT ]
  964 -> 1003 [label=REACHING_DEF VARIABLE=""]
  981 -> 1004 [label=REACHING_DEF VARIABLE="refcount_read(&ctx->refcount)"]
  981 -> 982 [label=AST ]
  983 -> 984 [label=ARGUMENT ]
  974 -> 976 [label=ARGUMENT ]
  998 -> 997 [label=REACHING_DEF VARIABLE="ctx->netdev"]
  994 -> 992 [label=REACHING_DEF VARIABLE="TLS_OFFLOAD_CTX_DIR_TX"]
  975 -> 973 [label=REF ]
  964 -> 969 [label=DOMINATE ]
  964 -> 1004 [label=AST ]
  1001 -> 997 [label=REACHING_DEF VARIABLE="NULL"]
  964 -> 998 [label=CONTAINS ]
  964 -> 992 [label=CONTAINS ]
  976 -> 980 [label=AST ]
  974 -> 975 [label=AST ]
  976 -> 974 [label=CFG ]
  970 -> 972 [label=ARGUMENT ]
  992 -> 993 [label=REACHING_DEF VARIABLE="netdev"]
  990 -> 988 [label=DOMINATE ]
  964 -> 992 [label=REACHING_DEF VARIABLE=""]
  964 -> 1001 [label=CONTAINS ]
  964 -> 978 [label=REACHING_DEF VARIABLE=""]
  971 -> 972 [label=CFG ]
  965 -> 21283 [label=REACHING_DEF VARIABLE="work"]
  965 -> 21283 [label=REACHING_DEF VARIABLE="work"]
  983 -> 993 [label=REACHING_DEF VARIABLE="ctx->refcount"]
  988 -> 990 [label=ARGUMENT ]
  991 -> 987 [label=DOMINATE ]
  997 -> 998 [label=AST ]
  974 -> 989 [label=DOMINATE ]
  1003 -> 1002 [label=DOMINATE ]
  995 -> 996 [label=POST_DOMINATE ]
  998 -> 1001 [label=CFG ]
  966 -> 997 [label=AST ]
  976 -> 1004 [label=REACHING_DEF VARIABLE="rcu_dereference_protected(ctx->netdev,
					   !refcount_read(&ctx->refcount))"]
  984 -> 977 [label=POST_DOMINATE ]
  986 -> 994 [label=AST ]
  992 -> 986 [label=REACHING_DEF VARIABLE="netdev"]
  999 -> 1000 [label=CFG ]
  992 -> 973 [label=REF ]
  964 -> 995 [label=CONTAINS ]
  986 -> 993 [label=AST ]
  964 -> 985 [label=CONTAINS ]
  987 -> 988 [label=AST ]
  995 -> 999 [label=CFG ]
  964 -> 979 [label=CONTAINS ]
  998 -> 1001 [label=DOMINATE ]
  977 -> 976 [label=REACHING_DEF VARIABLE="ctx->netdev"]
  996 -> 1004 [label=REACHING_DEF VARIABLE="netdev"]
  983 -> 982 [label=DOMINATE ]
  968 -> 975 [label=DOMINATE ]
  966 -> 973 [label=AST ]
  982 -> 981 [label=CFG ]
  994 -> 1004 [label=REACHING_DEF VARIABLE="TLS_OFFLOAD_CTX_DIR_TX"]
  972 -> 971 [label=POST_DOMINATE ]
  964 -> 978 [label=CONTAINS ]
  992 -> 996 [label=REACHING_DEF VARIABLE="netdev"]
  993 -> 999 [label=REACHING_DEF VARIABLE="ctx"]
  964 -> 988 [label=CONTAINS ]
  999 -> 1000 [label=DOMINATE ]
  990 -> 989 [label=POST_DOMINATE ]
  994 -> 986 [label=DOMINATE ]
  977 -> 978 [label=ARGUMENT ]
  980 -> 976 [label=CFG ]
  981 -> 982 [label=POST_DOMINATE ]
  980 -> 1004 [label=REACHING_DEF VARIABLE="!refcount_read(&ctx->refcount)"]
  975 -> 988 [label=REACHING_DEF VARIABLE="netdev"]
  998 -> 1000 [label=POST_DOMINATE ]
  969 -> 977 [label=REACHING_DEF VARIABLE="ctx"]
  964 -> 1001 [label=REACHING_DEF VARIABLE=""]
  994 -> 993 [label=POST_DOMINATE ]
  964 -> 969 [label=CFG ]
  985 -> 983 [label=DOMINATE ]
  988 -> 990 [label=AST ]
  986 -> 996 [label=DOMINATE ]
  964 -> 999 [label=CONTAINS ]
  988 -> 989 [label=ARGUMENT ]
  977 -> 979 [label=AST ]
  987 -> 988 [label=ARGUMENT ]
  964 -> 972 [label=CONTAINS ]
  968 -> 975 [label=CFG ]
  964 -> 986 [label=CONTAINS ]
  979 -> 978 [label=POST_DOMINATE ]
  1003 -> 1002 [label=REACHING_DEF VARIABLE="ctx"]
  964 -> 965 [label=REACHING_DEF VARIABLE=""]
  977 -> 980 [label=REACHING_DEF VARIABLE="ctx->netdev"]
  977 -> 979 [label=ARGUMENT ]
  982 -> 981 [label=REACHING_DEF VARIABLE="&ctx->refcount"]
  993 -> 967 [label=REF ]
  1003 -> 997 [label=POST_DOMINATE ]
  986 -> 994 [label=ARGUMENT ]
  964 -> 981 [label=CONTAINS ]
  981 -> 982 [label=ARGUMENT ]
  969 -> 978 [label=REACHING_DEF VARIABLE="ctx"]
  976 -> 980 [label=POST_DOMINATE ]
  969 -> 968 [label=REACHING_DEF VARIABLE="ctx"]
  1002 -> 1003 [label=POST_DOMINATE ]
  971 -> 1004 [label=REACHING_DEF VARIABLE="offload_ctx"]
  976 -> 975 [label=REACHING_DEF VARIABLE="rcu_dereference_protected(ctx->netdev,
					   !refcount_read(&ctx->refcount))"]
  964 -> 969 [label=CONTAINS ]
  984 -> 985 [label=CFG ]
  999 -> 967 [label=REF ]
  985 -> 984 [label=POST_DOMINATE ]
  987 -> 1004 [label=REACHING_DEF VARIABLE="netdev->tlsdev_ops->tls_dev_del"]
  992 -> 993 [label=CFG ]
  986 -> 992 [label=AST ]
  969 -> 983 [label=REACHING_DEF VARIABLE="ctx"]
  984 -> 985 [label=DOMINATE ]
  992 -> 993 [label=DOMINATE ]
  1000 -> 998 [label=DOMINATE ]
  977 -> 979 [label=POST_DOMINATE ]
  970 -> 971 [label=ARGUMENT ]
  968 -> 969 [label=AST ]
  996 -> 995 [label=CFG ]
  964 -> 984 [label=CONTAINS ]
  987 -> 986 [label=REACHING_DEF VARIABLE="netdev->tlsdev_ops->tls_dev_del"]
  964 -> 976 [label=CONTAINS ]
  964 -> 993 [label=CONTAINS ]
  979 -> 977 [label=CFG ]
  964 -> 987 [label=CONTAINS ]
  1002 -> 1003 [label=ARGUMENT ]
  964 -> 21283 [label=AST ]
  984 -> 967 [label=REF ]
  964 -> 977 [label=CONTAINS ]
  1002 -> 1004 [label=CFG ]
  977 -> 984 [label=CFG ]
  964 -> 971 [label=CONTAINS ]
  998 -> 999 [label=ARGUMENT ]
  993 -> 986 [label=REACHING_DEF VARIABLE="ctx"]
  974 -> 1004 [label=REACHING_DEF VARIABLE="netdev = rcu_dereference_protected(ctx->netdev,
					   !refcount_read(&ctx->refcount))"]
  975 -> 989 [label=REACHING_DEF VARIABLE="netdev"]
  998 -> 999 [label=AST ]
  970 -> 968 [label=REACHING_DEF VARIABLE="offload_ctx->ctx"]
  974 -> 975 [label=ARGUMENT ]
  964 -> 970 [label=CONTAINS ]
  964 -> 974 [label=CONTAINS ]
  976 -> 980 [label=ARGUMENT ]
  986 -> 1004 [label=REACHING_DEF VARIABLE="netdev->tlsdev_ops->tls_dev_del(netdev, ctx, TLS_OFFLOAD_CTX_DIR_TX)"]
  965 -> 1004 [label=REACHING_DEF VARIABLE="work"]
  997 -> 1001 [label=POST_DOMINATE ]
  964 -> 971 [label=REACHING_DEF VARIABLE=""]
  983 -> 1004 [label=REACHING_DEF VARIABLE="ctx->refcount"]
  966 -> 974 [label=AST ]
  964 -> 996 [label=REACHING_DEF VARIABLE=""]
  1001 -> 997 [label=DOMINATE ]
  966 -> 1002 [label=AST ]
  997 -> 1001 [label=AST ]
  968 -> 969 [label=ARGUMENT ]
  979 -> 977 [label=DOMINATE ]
  982 -> 983 [label=AST ]
  1003 -> 1004 [label=REACHING_DEF VARIABLE="ctx"]
  964 -> 980 [label=CONTAINS ]
  974 -> 989 [label=CFG ]
  964 -> 994 [label=REACHING_DEF VARIABLE=""]
  986 -> 987 [label=AST ]
  980 -> 976 [label=REACHING_DEF VARIABLE="!refcount_read(&ctx->refcount)"]
  964 -> 994 [label=CONTAINS ]
  996 -> 973 [label=REF ]
  989 -> 990 [label=DOMINATE ]
  964 -> 1000 [label=CONTAINS ]
  987 -> 992 [label=DOMINATE ]
  995 -> 996 [label=ARGUMENT ]
  993 -> 1003 [label=REACHING_DEF VARIABLE="ctx"]
  964 -> 965 [label=AST ]
  970 -> 972 [label=AST ]
  996 -> 986 [label=POST_DOMINATE ]
  999 -> 995 [label=POST_DOMINATE ]
  988 -> 991 [label=DOMINATE ]
  1004 -> 1002 [label=POST_DOMINATE ]
  1003 -> 967 [label=REF ]
  983 -> 1003 [label=REACHING_DEF VARIABLE="ctx->refcount"]
  978 -> 975 [label=POST_DOMINATE ]
  977 -> 978 [label=AST ]
  969 -> 984 [label=REACHING_DEF VARIABLE="ctx"]
  964 -> 966 [label=CONTAINS ]
  995 -> 999 [label=DOMINATE ]
  982 -> 981 [label=DOMINATE ]
  971 -> 972 [label=DOMINATE ]
  983 -> 999 [label=REACHING_DEF VARIABLE="ctx->refcount"]
  975 -> 992 [label=REACHING_DEF VARIABLE="netdev"]
  970 -> 971 [label=AST ]
  987 -> 991 [label=POST_DOMINATE ]
  997 -> 1003 [label=DOMINATE ]
  968 -> 1004 [label=REACHING_DEF VARIABLE="*ctx = offload_ctx->ctx"]
  986 -> 987 [label=RECEIVER ]
  989 -> 974 [label=POST_DOMINATE ]
  966 -> 967 [label=AST ]
  968 -> 970 [label=ARGUMENT ]
  969 -> 993 [label=REACHING_DEF VARIABLE="ctx"]
  994 -> 986 [label=REACHING_DEF VARIABLE="TLS_OFFLOAD_CTX_DIR_TX"]
  986 -> 996 [label=CFG ]
  978 -> 967 [label=REF ]
  964 -> 989 [label=CONTAINS ]
  995 -> 996 [label=AST ]
  970 -> 972 [label=POST_DOMINATE ]
  974 -> 976 [label=AST ]
  982 -> 1004 [label=REACHING_DEF VARIABLE="&ctx->refcount"]
  964 -> 997 [label=CONTAINS ]
  980 -> 976 [label=DOMINATE ]
  969 -> 967 [label=REF ]
  1001 -> 1004 [label=REACHING_DEF VARIABLE="NULL"]
  998 -> 1000 [label=AST ]
  998 -> 1004 [label=REACHING_DEF VARIABLE="ctx->netdev"]
  966 -> 968 [label=AST ]
  992 -> 987 [label=REACHING_DEF VARIABLE="netdev"]
  983 -> 982 [label=CFG ]
  1002 -> 1003 [label=AST ]
  994 -> 993 [label=REACHING_DEF VARIABLE="TLS_OFFLOAD_CTX_DIR_TX"]
  998 -> 1000 [label=ARGUMENT ]
  969 -> 971 [label=CFG ]
  977 -> 993 [label=REACHING_DEF VARIABLE="ctx->netdev"]
  1001 -> 998 [label=REACHING_DEF VARIABLE="NULL"]
  969 -> 971 [label=DOMINATE ]
  968 -> 970 [label=POST_DOMINATE ]
  964 -> 991 [label=CONTAINS ]
  981 -> 980 [label=REACHING_DEF VARIABLE="refcount_read(&ctx->refcount)"]
  978 -> 979 [label=CFG ]
  1003 -> 1002 [label=CFG ]
  991 -> 988 [label=POST_DOMINATE ]
  970 -> 968 [label=DOMINATE ]
  994 -> 986 [label=CFG ]
  997 -> 1001 [label=ARGUMENT ]
  988 -> 990 [label=POST_DOMINATE ]
  964 -> 983 [label=CONTAINS ]
  980 -> 981 [label=POST_DOMINATE ]
  976 -> 974 [label=DOMINATE ]
  995 -> 1004 [label=REACHING_DEF VARIABLE="dev_put(netdev)"]
  993 -> 994 [label=CFG ]
  974 -> 976 [label=POST_DOMINATE ]
  965 -> 21283 [label=PARAMETER_LINK ]
  989 -> 990 [label=CFG ]
  986 -> 993 [label=ARGUMENT ]
  970 -> 969 [label=REACHING_DEF VARIABLE="offload_ctx->ctx"]
  996 -> 995 [label=REACHING_DEF VARIABLE="netdev"]
  964 -> 975 [label=CONTAINS ]
  983 -> 985 [label=ARGUMENT ]
  964 -> 966 [label=AST ]
  968 -> 970 [label=AST ]
  982 -> 983 [label=POST_DOMINATE ]
  986 -> 987 [label=ARGUMENT ]
  983 -> 985 [label=AST ]
  964 -> 984 [label=REACHING_DEF VARIABLE=""]
  975 -> 974 [label=REACHING_DEF VARIABLE="netdev"]
  985 -> 983 [label=CFG ]
  988 -> 989 [label=AST ]
  991 -> 987 [label=CFG ]
  976 -> 977 [label=ARGUMENT ]
  997 -> 1003 [label=CFG ]
  997 -> 998 [label=ARGUMENT ]
  966 -> 995 [label=AST ]
  964 -> 989 [label=REACHING_DEF VARIABLE=""]
  992 -> 987 [label=POST_DOMINATE ]
  969 -> 964 [label=POST_DOMINATE ]
  988 -> 991 [label=CFG ]
}
