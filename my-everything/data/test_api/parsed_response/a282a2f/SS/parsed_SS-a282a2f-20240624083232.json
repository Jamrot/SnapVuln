{
  "statements_slicing_strategy": [
    {
      "statement_info": "net/ceph/messenger_v2.c | net/ceph/messenger_v2.c | decode_preamble | 529 | ADD",
      "statement": "\tif (desc->fd_lens[0] < 0 ||",
      "slicing_direction": "backward",
      "code_representation_graph": "Data Dependency Graph",
      "justification": "This statement checks the value of `desc->fd_lens[0]`. To understand the origin and propagation of this value, a backward slice is necessary. The Data Dependency Graph will help trace the data flow and identify where `desc->fd_lens[0]` is set or modified."
    },
    {
      "statement_info": "net/ceph/messenger_v2.c | net/ceph/messenger_v2.c | decode_preamble | 530 | ADD",
      "statement": "\t    desc->fd_lens[0] > CEPH_MSG_MAX_CONTROL_LEN) {",
      "slicing_direction": "backward",
      "code_representation_graph": "Data Dependency Graph",
      "justification": "Similar to the previous statement, this checks the upper bound of `desc->fd_lens[0]`. A backward slice using the Data Dependency Graph will help trace the data flow and understand how `desc->fd_lens[0]` is derived."
    },
    {
      "statement_info": "net/ceph/messenger_v2.c | net/ceph/messenger_v2.c | decode_preamble | 531 | ADD",
      "statement": "\t\tpr_err(\"bad control segment length %d\\n\", desc->fd_lens[0]);",
      "slicing_direction": "backward",
      "code_representation_graph": "Control Flow Graph",
      "justification": "This statement logs an error if the previous condition is met. A backward slice using the Control Flow Graph will help understand the control flow leading to this error message."
    },
    {
      "statement_info": "net/ceph/messenger_v2.c | net/ceph/messenger_v2.c | decode_preamble | 534 | ADD",
      "statement": "\tif (desc->fd_lens[1] < 0 ||",
      "slicing_direction": "backward",
      "code_representation_graph": "Data Dependency Graph",
      "justification": "This statement checks the value of `desc->fd_lens[1]`. A backward slice using the Data Dependency Graph will help trace the data flow and identify where `desc->fd_lens[1]` is set or modified."
    },
    {
      "statement_info": "net/ceph/messenger_v2.c | net/ceph/messenger_v2.c | decode_preamble | 535 | ADD",
      "statement": "\t    desc->fd_lens[1] > CEPH_MSG_MAX_FRONT_LEN) {",
      "slicing_direction": "backward",
      "code_representation_graph": "Data Dependency Graph",
      "justification": "Similar to the previous statement, this checks the upper bound of `desc->fd_lens[1]`. A backward slice using the Data Dependency Graph will help trace the data flow and understand how `desc->fd_lens[1]` is derived."
    },
    {
      "statement_info": "net/ceph/messenger_v2.c | net/ceph/messenger_v2.c | decode_preamble | 536 | ADD",
      "statement": "\t\tpr_err(\"bad front segment length %d\\n\", desc->fd_lens[1]);",
      "slicing_direction": "backward",
      "code_representation_graph": "Control Flow Graph",
      "justification": "This statement logs an error if the previous condition is met. A backward slice using the Control Flow Graph will help understand the control flow leading to this error message."
    },
    {
      "statement_info": "net/ceph/messenger_v2.c | net/ceph/messenger_v2.c | decode_preamble | 539 | ADD",
      "statement": "\tif (desc->fd_lens[2] < 0 ||",
      "slicing_direction": "backward",
      "code_representation_graph": "Data Dependency Graph",
      "justification": "This statement checks the value of `desc->fd_lens[2]`. A backward slice using the Data Dependency Graph will help trace the data flow and identify where `desc->fd_lens[2]` is set or modified."
    },
    {
      "statement_info": "net/ceph/messenger_v2.c | net/ceph/messenger_v2.c | decode_preamble | 540 | ADD",
      "statement": "\t    desc->fd_lens[2] > CEPH_MSG_MAX_MIDDLE_LEN) {",
      "slicing_direction": "backward",
      "code_representation_graph": "Data Dependency Graph",
      "justification": "Similar to the previous statement, this checks the upper bound of `desc->fd_lens[2]`. A backward slice using the Data Dependency Graph will help trace the data flow and understand how `desc->fd_lens[2]` is derived."
    },
    {
      "statement_info": "net/ceph/messenger_v2.c | net/ceph/messenger_v2.c | decode_preamble | 541 | ADD",
      "statement": "\t\tpr_err(\"bad middle segment length %d\\n\", desc->fd_lens[2]);",
      "slicing_direction": "backward",
      "code_representation_graph": "Control Flow Graph",
      "justification": "This statement logs an error if the previous condition is met. A backward slice using the Control Flow Graph will help understand the control flow leading to this error message."
    },
    {
      "statement_info": "net/ceph/messenger_v2.c | net/ceph/messenger_v2.c | decode_preamble | 544 | ADD",
      "statement": "\tif (desc->fd_lens[3] < 0 ||",
      "slicing_direction": "backward",
      "code_representation_graph": "Data Dependency Graph",
      "justification": "This statement checks the value of `desc->fd_lens[3]`. A backward slice using the Data Dependency Graph will help trace the data flow and identify where `desc->fd_lens[3]` is set or modified."
    },
    {
      "statement_info": "net/ceph/messenger_v2.c | net/ceph/messenger_v2.c | decode_preamble | 545 | ADD",
      "statement": "\t    desc->fd_lens[3] > CEPH_MSG_MAX_DATA_LEN) {",
      "slicing_direction": "backward",
      "code_representation_graph": "Data Dependency Graph",
      "justification": "Similar to the previous statement, this checks the upper bound of `desc->fd_lens[3]`. A backward slice using the Data Dependency Graph will help trace the data flow and understand how `desc->fd_lens[3]` is derived."
    },
    {
      "statement_info": "net/ceph/messenger_v2.c | net/ceph/messenger_v2.c | decode_preamble | 546 | ADD",
      "statement": "\t\tpr_err(\"bad data segment length %d\\n\", desc->fd_lens[3]);",
      "slicing_direction": "backward",
      "code_representation_graph": "Control Flow Graph",
      "justification": "This statement logs an error if the previous condition is met. A backward slice using the Control Flow Graph will help understand the control flow leading to this error message."
    },
    {
      "statement_info": "net/ceph/messenger_v2.c | net/ceph/messenger_v2.c | head_onwire_len | 393 | ADD",
      "statement": "\tBUG_ON(ctrl_len < 0 || ctrl_len > CEPH_MSG_MAX_CONTROL_LEN);",
      "slicing_direction": "backward",
      "code_representation_graph": "Data Dependency Graph",
      "justification": "This statement asserts that `ctrl_len` is within a valid range. A backward slice using the Data Dependency Graph will help trace the data flow and understand how `ctrl_len` is derived."
    },
    {
      "statement_info": "net/ceph/messenger_v2.c | net/ceph/messenger_v2.c | __tail_onwire_len | 413 | ADD",
      "statement": "\tBUG_ON(front_len < 0 || front_len > CEPH_MSG_MAX_FRONT_LEN ||",
      "slicing_direction": "backward",
      "code_representation_graph": "Data Dependency Graph",
      "justification": "This statement asserts that `front_len` is within a valid range. A backward slice using the Data Dependency Graph will help trace the data flow and understand how `front_len` is derived."
    },
    {
      "statement_info": "net/ceph/messenger_v2.c | net/ceph/messenger_v2.c | __tail_onwire_len | 414 | ADD",
      "statement": "\t       middle_len < 0 || middle_len > CEPH_MSG_MAX_MIDDLE_LEN ||",
      "slicing_direction": "backward",
      "code_representation_graph": "Data Dependency Graph",
      "justification": "This statement asserts that `middle_len` is within a valid range. A backward slice using the Data Dependency Graph will help trace the data flow and understand how `middle_len` is derived."
    },
    {
      "statement_info": "net/ceph/messenger_v2.c | net/ceph/messenger_v2.c | __tail_onwire_len | 415 | ADD",
      "statement": "\t       data_len < 0 || data_len > CEPH_MSG_MAX_DATA_LEN);",
      "slicing_direction": "backward",
      "code_representation_graph": "Data Dependency Graph",
      "justification": "This statement asserts that `data_len` is within a valid range. A backward slice using the Data Dependency Graph will help trace the data flow and understand how `data_len` is derived."
    }
  ]
}