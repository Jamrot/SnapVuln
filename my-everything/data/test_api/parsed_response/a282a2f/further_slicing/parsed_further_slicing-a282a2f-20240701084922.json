{
  "statements_slicing_strategy": [
    {
      "statement_info": "code/code_old/net/ceph/messenger_v2.c | static int decode_preamble(void *p, struct ceph_frame_desc *desc) | L519",
      "statement": "desc->fd_lens[i] = ceph_decode_32(&p);",
      "slicing_direction": "forward",
      "code_representation_graph": "Data Dependency Graph",
      "justification": "This statement is responsible for decoding the segment lengths, which are later used in the buffer overflow vulnerability. A forward slice from this statement will help identify all the statements that are affected by this decoded value."
    },
    {
      "statement_info": "code/code_new/net/ceph/messenger_v2.c | static int decode_preamble(void *p, struct ceph_frame_desc *desc) | L529",
      "statement": "if (desc->fd_lens[0] < 0 || desc->fd_lens[0] > CEPH_MSG_MAX_CONTROL_LEN) {",
      "slicing_direction": "backward",
      "code_representation_graph": "Control Flow Graph",
      "justification": "This statement is part of the patch that adds additional checks for the segment lengths. A backward slice from this statement will help identify all the statements that contribute to the value of desc->fd_lens[0], which is used in the condition."
    },
    {
      "statement_info": "code/code_new/net/ceph/messenger_v2.c | static int __tail_onwire_len(int front_len, int middle_len, int data_len, | L413",
      "statement": "BUG_ON(front_len < 0 || front_len > CEPH_MSG_MAX_FRONT_LEN || middle_len < 0 || middle_len > CEPH_MSG_MAX_MIDDLE_LEN || data_len < 0 || data_len > CEPH_MSG_MAX_DATA_LEN);",
      "slicing_direction": "backward",
      "code_representation_graph": "Control Flow Graph",
      "justification": "This statement is part of the patch that adds additional checks for the segment lengths. A backward slice from this statement will help identify all the statements that contribute to the values of front_len, middle_len, and data_len, which are used in the condition."
    }
  ]
}