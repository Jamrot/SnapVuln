{
  "statements_slicing_strategy": [
    {
      "statement_info": "net/ceph/messenger_v2.c | static int decode_preamble(void *p, struct ceph_frame_desc *desc) | L495",
      "statement": "static int decode_preamble(void *p, struct ceph_frame_desc *desc)",
      "slicing_direction": "forward",
      "code_representation_graph": "Control Flow Graph",
      "justification": "This is the function declaration where the vulnerability resides. A forward slice from this point will help us understand how data flows from this point and how the vulnerability is triggered."
    },
    {
      "statement_info": "net/ceph/messenger_v2.c | static int decode_preamble(void *p, struct ceph_frame_desc *desc) | L519",
      "statement": "desc->fd_lens[i] = ceph_decode_32(&p);",
      "slicing_direction": "bidirectional",
      "code_representation_graph": "Data Dependency Graph",
      "justification": "This statement is where the segment lengths are decoded. A bidirectional slice will help us understand both the source of the data and where it is used, which is crucial for understanding the buffer overflow vulnerability."
    },
    {
      "statement_info": "net/ceph/messenger_v2.c | static int decode_preamble(void *p, struct ceph_frame_desc *desc) | L532",
      "statement": "if (desc->fd_lens[0] > CEPH_MSG_MAX_CONTROL_LEN) {",
      "slicing_direction": "backward",
      "code_representation_graph": "Control Dependency Graph",
      "justification": "This statement is part of the input validation logic. A backward slice from this point will help us understand the conditions that lead to this check, which is important for understanding the vulnerability."
    }
  ]
}