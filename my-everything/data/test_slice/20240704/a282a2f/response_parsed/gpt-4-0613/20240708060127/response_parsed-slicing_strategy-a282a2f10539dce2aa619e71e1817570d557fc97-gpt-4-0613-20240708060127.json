{
  "statements_slicing_strategy": [
    {
      "statement_info": "net/ceph/messenger_v2.c | decode_preamble | 527 | DELETE",
      "statement": "\tif (!desc->fd_lens[desc->fd_seg_cnt - 1]) {",
      "slicing_direction": "backward",
      "code_representation_graph": "Control Flow Graph",
      "justification": "This statement checks if the last segment is empty. A backward slice from this point will help identify the code that leads to this condition, which is crucial in understanding the vulnerability."
    },
    {
      "statement_info": "net/ceph/messenger_v2.c | decode_preamble | 532 | DELETE",
      "statement": "\tif (desc->fd_lens[0] > CEPH_MSG_MAX_CONTROL_LEN) {",
      "slicing_direction": "backward",
      "code_representation_graph": "Control Flow Graph",
      "justification": "This statement checks if the control segment length exceeds the maximum limit. A backward slice from this point will help identify the code that leads to this condition, which is crucial in understanding the vulnerability."
    },
    {
      "statement_info": "net/ceph/messenger_v2.c | decode_preamble | 536 | DELETE",
      "statement": "\tif (desc->fd_lens[1] > CEPH_MSG_MAX_FRONT_LEN) {",
      "slicing_direction": "backward",
      "code_representation_graph": "Control Flow Graph",
      "justification": "This statement checks if the front segment length exceeds the maximum limit. A backward slice from this point will help identify the code that leads to this condition, which is crucial in understanding the vulnerability."
    },
    {
      "statement_info": "net/ceph/messenger_v2.c | decode_preamble | 540 | DELETE",
      "statement": "\tif (desc->fd_lens[2] > CEPH_MSG_MAX_MIDDLE_LEN) {",
      "slicing_direction": "backward",
      "code_representation_graph": "Control Flow Graph",
      "justification": "This statement checks if the middle segment length exceeds the maximum limit. A backward slice from this point will help identify the code that leads to this condition, which is crucial in understanding the vulnerability."
    },
    {
      "statement_info": "net/ceph/messenger_v2.c | decode_preamble | 544 | DELETE",
      "statement": "\tif (desc->fd_lens[3] > CEPH_MSG_MAX_DATA_LEN) {",
      "slicing_direction": "backward",
      "code_representation_graph": "Control Flow Graph",
      "justification": "This statement checks if the data segment length exceeds the maximum limit. A backward slice from this point will help identify the code that leads to this condition, which is crucial in understanding the vulnerability."
    },
    {
      "statement_info": "net/ceph/messenger_v2.c | decode_preamble | 529 | ADD",
      "statement": "\tif (desc->fd_lens[0] < 0 ||",
      "slicing_direction": "backward",
      "code_representation_graph": "Control Flow Graph",
      "justification": "This statement checks if the control segment length is negative. A backward slice from this point will help identify the code that leads to this condition, which is crucial in understanding the vulnerability."
    },
    {
      "statement_info": "net/ceph/messenger_v2.c | decode_preamble | 534 | ADD",
      "statement": "\tif (desc->fd_lens[1] < 0 ||",
      "slicing_direction": "backward",
      "code_representation_graph": "Control Flow Graph",
      "justification": "This statement checks if the front segment length is negative. A backward slice from this point will help identify the code that leads to this condition, which is crucial in understanding the vulnerability."
    },
    {
      "statement_info": "net/ceph/messenger_v2.c | decode_preamble | 539 | ADD",
      "statement": "\tif (desc->fd_lens[2] < 0 ||",
      "slicing_direction": "backward",
      "code_representation_graph": "Control Flow Graph",
      "justification": "This statement checks if the middle segment length is negative. A backward slice from this point will help identify the code that leads to this condition, which is crucial in understanding the vulnerability."
    },
    {
      "statement_info": "net/ceph/messenger_v2.c | decode_preamble | 544 | ADD",
      "statement": "\tif (desc->fd_lens[3] < 0 ||",
      "slicing_direction": "backward",
      "code_representation_graph": "Control Flow Graph",
      "justification": "This statement checks if the data segment length is negative. A backward slice from this point will help identify the code that leads to this condition, which is crucial in understanding the vulnerability."
    },
    {
      "statement_info": "net/ceph/messenger_v2.c | head_onwire_len | 393 | ADD",
      "statement": "\tBUG_ON(ctrl_len < 0 || ctrl_len > CEPH_MSG_MAX_CONTROL_LEN);",
      "slicing_direction": "backward",
      "code_representation_graph": "Control Flow Graph",
      "justification": "This statement checks if the control length is negative or exceeds the maximum limit. A backward slice from this point will help identify the code that leads to this condition, which is crucial in understanding the vulnerability."
    },
    {
      "statement_info": "net/ceph/messenger_v2.c | __tail_onwire_len | 413 | ADD",
      "statement": "\tBUG_ON(front_len < 0 || front_len > CEPH_MSG_MAX_FRONT_LEN ||",
      "slicing_direction": "backward",
      "code_representation_graph": "Control Flow Graph",
      "justification": "This statement checks if the front length is negative or exceeds the maximum limit. A backward slice from this point will help identify the code that leads to this condition, which is crucial in understanding the vulnerability."
    }
  ]
}