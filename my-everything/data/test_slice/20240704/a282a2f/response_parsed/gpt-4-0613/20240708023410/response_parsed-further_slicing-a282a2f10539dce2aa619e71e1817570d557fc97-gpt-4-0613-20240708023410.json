{
  "statements_slicing_strategy": [
    {
      "statement_info": "code/code_new/net/ceph/messenger_v2.c | static int head_onwire_len(int ctrl_len, bool secure) | L393",
      "statement": "BUG_ON(ctrl_len < 0 || ctrl_len > CEPH_MSG_MAX_CONTROL_LEN);",
      "slicing_direction": "backward",
      "code_representation_graph": "Control Flow Graph",
      "justification": "This statement is where the control length is checked. A backward slice from this point will help identify where the control length is set and manipulated, which is crucial for understanding the buffer overflow vulnerability."
    },
    {
      "statement_info": "code/code_new/net/ceph/messenger_v2.c | static int __tail_onwire_len(int front_len, int middle_len, int data_len, | L413",
      "statement": "BUG_ON(front_len < 0 || front_len > CEPH_MSG_MAX_FRONT_LEN || middle_len < 0 || middle_len > CEPH_MSG_MAX_MIDDLE_LEN || data_len < 0 || data_len > CEPH_MSG_MAX_DATA_LEN);",
      "slicing_direction": "backward",
      "code_representation_graph": "Control Flow Graph",
      "justification": "This statement checks the lengths of the front, middle, and data segments. A backward slice from this point will help identify where these lengths are set and manipulated, which is crucial for understanding the buffer overflow vulnerability."
    },
    {
      "statement_info": "code/code_new/net/ceph/messenger_v2.c | static int decode_preamble(void *p, struct ceph_frame_desc *desc) | L529",
      "statement": "if (desc->fd_lens[0] < 0 || desc->fd_lens[0] > CEPH_MSG_MAX_CONTROL_LEN) {",
      "slicing_direction": "backward",
      "code_representation_graph": "Control Flow Graph",
      "justification": "This statement checks the control length during the decoding of the preamble. A backward slice from this point will help identify where the control length is set and manipulated during the decoding process, which is crucial for understanding the buffer overflow vulnerability."
    }
  ]
}