{
  "statements_slicing_strategy": [
    {
      "statement_info": "code/code_new/net/ceph/messenger_v2.c | static int head_onwire_len(int ctrl_len, bool secure) | L393",
      "statement": "BUG_ON(ctrl_len < 0 || ctrl_len > CEPH_MSG_MAX_CONTROL_LEN);",
      "slicing_direction": "backward",
      "code_representation_graph": "Control Flow Graph",
      "justification": "This statement is a boundary check for the control length. A backward slice from this statement will help identify the data sources and control conditions that influence the value of 'ctrl_len'."
    },
    {
      "statement_info": "code/code_new/net/ceph/messenger_v2.c | static int __tail_onwire_len(int front_len, int middle_len, int data_len, | L413-L415",
      "statement": "BUG_ON(front_len < 0 || front_len > CEPH_MSG_MAX_FRONT_LEN || middle_len < 0 || middle_len > CEPH_MSG_MAX_MIDDLE_LEN || data_len < 0 || data_len > CEPH_MSG_MAX_DATA_LEN);",
      "slicing_direction": "backward",
      "code_representation_graph": "Control Flow Graph",
      "justification": "This statement is a boundary check for the front, middle, and data lengths. A backward slice from this statement will help identify the data sources and control conditions that influence the values of 'front_len', 'middle_len', and 'data_len'."
    },
    {
      "statement_info": "code/code_old/net/ceph/messenger_v2.c | static int decode_preamble(void *p, struct ceph_frame_desc *desc) | L513-L514",
      "statement": "if (desc->fd_seg_cnt < 1 || desc->fd_seg_cnt > CEPH_FRAME_MAX_SEGMENT_COUNT) {",
      "slicing_direction": "backward",
      "code_representation_graph": "Control Flow Graph",
      "justification": "This statement is a boundary check for the segment count. A backward slice from this statement will help identify the data sources and control conditions that influence the value of 'desc->fd_seg_cnt'."
    },
    {
      "statement_info": "code/code_old/net/ceph/messenger_v2.c | static int decode_preamble(void *p, struct ceph_frame_desc *desc) | L519",
      "statement": "desc->fd_lens[i] = ceph_decode_32(&p);",
      "slicing_direction": "forward",
      "code_representation_graph": "Data Dependency Graph",
      "justification": "This statement is where the segment lengths are decoded. A forward slice from this statement will help identify the data sinks and control conditions that are influenced by the value of 'desc->fd_lens[i]'."
    }
  ]
}