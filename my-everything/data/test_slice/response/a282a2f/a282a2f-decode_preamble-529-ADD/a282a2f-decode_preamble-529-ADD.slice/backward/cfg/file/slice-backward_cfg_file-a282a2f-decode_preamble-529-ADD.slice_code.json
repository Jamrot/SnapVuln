{
  "files": [
    {
      "file_name": "code/code_new/net/ceph/messenger_v2.c",
      "functions": [
        {
          "function_name": "static int handle_preamble(struct ceph_connection *con)",
          "lines": [
            "L2738: static int handle_preamble(struct ceph_connection *con)\n",
            "L2740: \tstruct ceph_frame_desc *desc = &con->v2.in_desc;\n",
            "L2743: \tif (con_secure(con)) {\n",
            "L2744: \t\tret = decrypt_preamble(con);\n",
            "L2745: \t\tif (ret) {\n",
            "L2752: \tret = decode_preamble(con->v2.in_buf, desc);\n"
          ]
        },
        {
          "function_name": "static int populate_in_iter(struct ceph_connection *con)",
          "lines": [
            "L2865: static int populate_in_iter(struct ceph_connection *con)\n",
            "L2869: \tdout(\"%s con %p state %d in_state %d\\n\", __func__, con, con->state,\n",
            "L2870: \t     con->v2.in_state);\n",
            "L2871: \tWARN_ON(iov_iter_count(&con->v2.in_iter));\n",
            "L2873: \tif (con->state == CEPH_CON_S_V2_BANNER_PREFIX) {\n",
            "L2875: \t} else if (con->state == CEPH_CON_S_V2_BANNER_PAYLOAD) {\n",
            "L2877: \t} else if ((con->state >= CEPH_CON_S_V2_HELLO &&\n",
            "L2878: \t\t    con->state <= CEPH_CON_S_V2_SESSION_RECONNECT) ||\n",
            "L2879: \t\t   con->state == CEPH_CON_S_OPEN) {\n",
            "L2880: \t\tswitch (con->v2.in_state) {\n",
            "L2881: \t\tcase IN_S_HANDLE_PREAMBLE:\n",
            "L2882: \t\t\tret = handle_preamble(con);\n"
          ]
        },
        {
          "function_name": "int ceph_con_v2_try_read(struct ceph_connection *con)",
          "lines": [
            "L2928: int ceph_con_v2_try_read(struct ceph_connection *con)\n",
            "L2932: \tdout(\"%s con %p state %d need %zu\\n\", __func__, con, con->state,\n",
            "L2933: \t     iov_iter_count(&con->v2.in_iter));\n",
            "L2935: \tif (con->state == CEPH_CON_S_PREOPEN)\n",
            "L2943: \tif (WARN_ON(!iov_iter_count(&con->v2.in_iter)))\n",
            "L2947: \t\tret = ceph_tcp_recv(con);\n",
            "L2948: \t\tif (ret <= 0)\n",
            "L2951: \t\tret = populate_in_iter(con);\n",
            "L2952: \t\tif (ret <= 0) {\n"
          ]
        },
        {
          "function_name": "static int decode_preamble(void *p, struct ceph_frame_desc *desc)",
          "lines": [
            "L501: static int decode_preamble(void *p, struct ceph_frame_desc *desc)\n",
            "L503: \tvoid *crcp = p + CEPH_PREAMBLE_LEN - CEPH_CRC_LEN;\n",
            "L507: \tcrc = crc32c(0, p, crcp - p);\n",
            "L508: \texpected_crc = get_unaligned_le32(crcp);\n",
            "L509: \tif (crc != expected_crc) {\n",
            "L515: \tmemset(desc, 0, sizeof(*desc));\n",
            "L517: \tdesc->fd_tag = ceph_decode_8(&p);\n",
            "L518: \tdesc->fd_seg_cnt = ceph_decode_8(&p);\n",
            "L519: \tif (desc->fd_seg_cnt < 1 ||\n",
            "L520: \t    desc->fd_seg_cnt > CEPH_FRAME_MAX_SEGMENT_COUNT) {\n",
            "L524: \tfor (i = 0; i < desc->fd_seg_cnt; i++) {\n",
            "L525: \t\tdesc->fd_lens[i] = ceph_decode_32(&p);\n",
            "L526: \t\tdesc->fd_aligns[i] = ceph_decode_16(&p);\n",
            "L529: \tif (desc->fd_lens[0] < 0 ||\n",
            "L530: \t    desc->fd_lens[0] > CEPH_MSG_MAX_CONTROL_LEN) {\n"
          ]
        }
      ]
    }
  ]
}