digraph {
  6439 [label=IDENTIFIER ORDER=2 ARGUMENT_INDEX=1 CODE="sk" COLUMN_NUMBER=23 LINE_NUMBER=306 TYPE_FULL_NAME="sock*" NAME="sk"]
  6445 [label=CALL ORDER=1 ARGUMENT_INDEX=0 CODE="ctx->sk_write_space" COLUMN_NUMBER=2 METHOD_FULL_NAME="<operator>.indirectFieldAccess" LINE_NUMBER=317 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.indirectFieldAccess"]
  6442 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="sk" COLUMN_NUMBER=22 LINE_NUMBER=315 TYPE_FULL_NAME="sock*" NAME="sk"]
  6440 [label=RETURN ORDER=2 ARGUMENT_INDEX=-1 CODE="return;" COLUMN_NUMBER=3 LINE_NUMBER=307]
  6447 [label=FIELD_IDENTIFIER ORDER=2 ARGUMENT_INDEX=2 CODE="sk_write_space" COLUMN_NUMBER=2 LINE_NUMBER=317 CANONICAL_NAME="sk_write_space"]
  6443 [label=IDENTIFIER ORDER=2 ARGUMENT_INDEX=2 CODE="ctx" COLUMN_NUMBER=26 LINE_NUMBER=315 TYPE_FULL_NAME="tls_context*" NAME="ctx"]
  6436 [label=CALL ORDER=1 ARGUMENT_INDEX=0 CODE="ctx->sk_write_space" COLUMN_NUMBER=3 METHOD_FULL_NAME="<operator>.indirectFieldAccess" LINE_NUMBER=306 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.indirectFieldAccess"]
  6448 [label=IDENTIFIER ORDER=2 ARGUMENT_INDEX=1 CODE="sk" COLUMN_NUMBER=22 LINE_NUMBER=317 TYPE_FULL_NAME="sock*" NAME="sk"]
  6430 [label=CONTROL_STRUCTURE CONTROL_STRUCTURE_TYPE="IF" ORDER=3 PARSER_TYPE_NAME="CASTIfStatement" ARGUMENT_INDEX=-1 CODE="if (ctx->splicing_pages)" COLUMN_NUMBER=2 LINE_NUMBER=305]
  6425 [label=LOCAL ORDER=1 CODE="struct tls_context* ctx" COLUMN_NUMBER=21 LINE_NUMBER=299 TYPE_FULL_NAME="tls_context*" NAME="ctx"]
  6446 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="ctx" COLUMN_NUMBER=2 LINE_NUMBER=317 TYPE_FULL_NAME="tls_context*" NAME="ctx"]
  6438 [label=FIELD_IDENTIFIER ORDER=2 ARGUMENT_INDEX=2 CODE="sk_write_space" COLUMN_NUMBER=3 LINE_NUMBER=306 CANONICAL_NAME="sk_write_space"]
  6441 [label=CALL ORDER=4 ARGUMENT_INDEX=-1 CODE="tls_sw_write_space(sk, ctx)" COLUMN_NUMBER=3 METHOD_FULL_NAME="tls_sw_write_space" LINE_NUMBER=315 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="tls_sw_write_space"]
  6423 [label=METHOD_PARAMETER_IN ORDER=1 CODE="struct sock *sk" IS_VARIADIC=false COLUMN_NUMBER=29 LINE_NUMBER=297 TYPE_FULL_NAME="sock*" EVALUATION_STRATEGY="BY_VALUE" INDEX=1 NAME="sk"]
  6449 [label=METHOD_RETURN ORDER=3 CODE="RET" COLUMN_NUMBER=1 LINE_NUMBER=297 TYPE_FULL_NAME="void" EVALUATION_STRATEGY="BY_VALUE"]
  6432 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="ctx" COLUMN_NUMBER=6 LINE_NUMBER=305 TYPE_FULL_NAME="tls_context*" NAME="ctx"]
  6437 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="ctx" COLUMN_NUMBER=3 LINE_NUMBER=306 TYPE_FULL_NAME="tls_context*" NAME="ctx"]
  6444 [label=CALL ORDER=5 ARGUMENT_INDEX=-1 CODE="ctx->sk_write_space(sk)" COLUMN_NUMBER=2 METHOD_FULL_NAME="tls_context.sk_write_space" LINE_NUMBER=317 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="sk_write_space"]
  6426 [label=CALL ORDER=2 ARGUMENT_INDEX=-1 CODE="*ctx = tls_get_ctx(sk)" COLUMN_NUMBER=21 METHOD_FULL_NAME="<operator>.assignment" LINE_NUMBER=299 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.assignment"]
  6434 [label=BLOCK ORDER=2 ARGUMENT_INDEX=-1 CODE="{
		ctx->sk_write_space(sk);
		return;
	}" COLUMN_NUMBER=27 LINE_NUMBER=305 TYPE_FULL_NAME="void"]
  6422 [label=METHOD COLUMN_NUMBER=1 LINE_NUMBER=297 COLUMN_NUMBER_END=1 IS_EXTERNAL=false SIGNATURE="void tls_write_space (sock*)" NAME="tls_write_space" AST_PARENT_TYPE="TYPE_DECL" AST_PARENT_FULL_NAME="tls_main.c:<global>" ORDER=100 CODE="static void tls_write_space(struct sock *sk)
{
	struct tls_context *ctx = tls_get_ctx(sk);

	/* If splicing_pages call lower protocol write space handler
	 * to ensure we wake up any waiting operations there. For example
	 * if splicing pages where to call sk_wait_event.
	 */
	if (ctx->splicing_pages) {
		ctx->sk_write_space(sk);
		return;
	}

#ifdef CONFIG_TLS_DEVICE
	if (ctx->tx_conf == TLS_HW)
		tls_device_write_space(sk, ctx);
	else
#endif
		tls_sw_write_space(sk, ctx);

	ctx->sk_write_space(sk);
}" FULL_NAME="tls_write_space" LINE_NUMBER_END=318 FILENAME="tls_main.c"]
  6435 [label=CALL ORDER=1 ARGUMENT_INDEX=-1 CODE="ctx->sk_write_space(sk)" COLUMN_NUMBER=3 METHOD_FULL_NAME="tls_context.sk_write_space" LINE_NUMBER=306 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="sk_write_space"]
  6427 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="ctx" COLUMN_NUMBER=22 LINE_NUMBER=299 TYPE_FULL_NAME="tls_context*" NAME="ctx"]
  6429 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="sk" COLUMN_NUMBER=40 LINE_NUMBER=299 TYPE_FULL_NAME="sock*" NAME="sk"]
  6424 [label=BLOCK ORDER=2 ARGUMENT_INDEX=-1 CODE="{
	struct tls_context *ctx = tls_get_ctx(sk);

	/* If splicing_pages call lower protocol write space handler
	 * to ensure we wake up any waiting operations there. For example
	 * if splicing pages where to call sk_wait_event.
	 */
	if (ctx->splicing_pages) {
		ctx->sk_write_space(sk);
		return;
	}

#ifdef CONFIG_TLS_DEVICE
	if (ctx->tx_conf == TLS_HW)
		tls_device_write_space(sk, ctx);
	else
#endif
		tls_sw_write_space(sk, ctx);

	ctx->sk_write_space(sk);
}" COLUMN_NUMBER=1 LINE_NUMBER=298 TYPE_FULL_NAME="void"]
  6431 [label=CALL ORDER=1 ARGUMENT_INDEX=-1 CODE="ctx->splicing_pages" COLUMN_NUMBER=6 METHOD_FULL_NAME="<operator>.indirectFieldAccess" LINE_NUMBER=305 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.indirectFieldAccess"]
  6433 [label=FIELD_IDENTIFIER ORDER=2 ARGUMENT_INDEX=2 CODE="splicing_pages" COLUMN_NUMBER=6 LINE_NUMBER=305 CANONICAL_NAME="splicing_pages"]
  6428 [label=CALL ORDER=2 ARGUMENT_INDEX=2 CODE="tls_get_ctx(sk)" COLUMN_NUMBER=28 METHOD_FULL_NAME="tls_get_ctx" LINE_NUMBER=299 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="tls_get_ctx"]
  21453 [label=METHOD_PARAMETER_OUT ORDER=1 CODE="struct sock *sk" IS_VARIADIC=false COLUMN_NUMBER=29 LINE_NUMBER=297 TYPE_FULL_NAME="sock*" EVALUATION_STRATEGY="BY_VALUE" INDEX=1 NAME="sk"]
  6441 -> 6443 [label=POST_DOMINATE ]
  6422 -> 6427 [label=CONTAINS ]
  6422 -> 6443 [label=CONTAINS ]
  6440 -> 6449 [label=REACHING_DEF VARIABLE="<RET>"]
  6444 -> 6445 [label=RECEIVER ]
  6431 -> 6439 [label=CDG ]
  6431 -> 6442 [label=DOMINATE ]
  6443 -> 6442 [label=POST_DOMINATE ]
  6424 -> 6444 [label=AST ]
  6441 -> 6443 [label=AST ]
  6432 -> 6433 [label=DOMINATE ]
  6449 -> 6431 [label=POST_DOMINATE ]
  6426 -> 6432 [label=CFG ]
  6427 -> 6426 [label=REACHING_DEF VARIABLE="ctx"]
  6441 -> 6446 [label=DOMINATE ]
  6436 -> 6438 [label=ARGUMENT ]
  6440 -> 6435 [label=POST_DOMINATE ]
  6422 -> 6431 [label=CONTAINS ]
  6449 -> 6440 [label=POST_DOMINATE ]
  6422 -> 6446 [label=REACHING_DEF VARIABLE=""]
  6422 -> 6437 [label=CONTAINS ]
  6435 -> 6440 [label=DOMINATE ]
  6427 -> 6449 [label=REACHING_DEF VARIABLE="ctx"]
  6431 -> 6448 [label=CDG ]
  6437 -> 6438 [label=CFG ]
  6429 -> 6428 [label=DOMINATE ]
  6436 -> 6437 [label=AST ]
  6431 -> 6437 [label=CFG ]
  6444 -> 6445 [label=ARGUMENT ]
  6435 -> 6436 [label=RECEIVER ]
  6428 -> 6429 [label=AST ]
  6423 -> 6429 [label=REACHING_DEF VARIABLE="sk"]
  6422 -> 6424 [label=CONTAINS ]
  6426 -> 6432 [label=DOMINATE ]
  6431 -> 6432 [label=ARGUMENT ]
  6431 -> 6436 [label=CDG ]
  6444 -> 6448 [label=ARGUMENT ]
  6444 -> 6448 [label=AST ]
  6422 -> 6434 [label=CONTAINS ]
  6433 -> 6432 [label=POST_DOMINATE ]
  6431 -> 6445 [label=CDG ]
  6429 -> 6428 [label=REACHING_DEF VARIABLE="sk"]
  6422 -> 6430 [label=CONTAINS ]
  6445 -> 6444 [label=REACHING_DEF VARIABLE="ctx->sk_write_space"]
  6448 -> 6445 [label=REACHING_DEF VARIABLE="sk"]
  6427 -> 6429 [label=DOMINATE ]
  6445 -> 6447 [label=POST_DOMINATE ]
  6422 -> 6426 [label=CONTAINS ]
  6438 -> 6437 [label=POST_DOMINATE ]
  6422 -> 6441 [label=CONTAINS ]
  6428 -> 6426 [label=CFG ]
  6449 -> 6444 [label=POST_DOMINATE ]
  6422 -> 6439 [label=CONTAINS ]
  6439 -> 6435 [label=DOMINATE ]
  6444 -> 6448 [label=POST_DOMINATE ]
  6435 -> 6436 [label=ARGUMENT ]
  6427 -> 6443 [label=REACHING_DEF VARIABLE="ctx"]
  6437 -> 6425 [label=REF ]
  6439 -> 6435 [label=REACHING_DEF VARIABLE="sk"]
  6426 -> 6427 [label=ARGUMENT ]
  6422 -> 6427 [label=DOMINATE ]
  6441 -> 6442 [label=AST ]
  6439 -> 6435 [label=CFG ]
  6445 -> 6447 [label=ARGUMENT ]
  6433 -> 6431 [label=CFG ]
  6435 -> 6439 [label=ARGUMENT ]
  6431 -> 6449 [label=DOMINATE ]
  6426 -> 6427 [label=AST ]
  6430 -> 6434 [label=AST ]
  6423 -> 21453 [label=REACHING_DEF VARIABLE="sk"]
  6443 -> 6441 [label=CFG ]
  6431 -> 6443 [label=CDG ]
  6422 -> 6438 [label=CONTAINS ]
  6427 -> 6429 [label=CFG ]
  6429 -> 6427 [label=POST_DOMINATE ]
  6422 -> 6432 [label=REACHING_DEF VARIABLE=""]
  6441 -> 6442 [label=ARGUMENT ]
  6422 -> 6424 [label=AST ]
  6436 -> 6435 [label=REACHING_DEF VARIABLE="ctx->sk_write_space"]
  6443 -> 6445 [label=REACHING_DEF VARIABLE="ctx"]
  6448 -> 6423 [label=REF ]
  6431 -> 6438 [label=CDG ]
  6436 -> 6438 [label=AST ]
  6441 -> 6446 [label=CFG ]
  6422 -> 6436 [label=CONTAINS ]
  6441 -> 6443 [label=ARGUMENT ]
  6422 -> 6428 [label=CONTAINS ]
  6428 -> 6426 [label=REACHING_DEF VARIABLE="tls_get_ctx(sk)"]
  6431 -> 6433 [label=ARGUMENT ]
  6422 -> 6443 [label=REACHING_DEF VARIABLE=""]
  6438 -> 6436 [label=DOMINATE ]
  6429 -> 6423 [label=REF ]
  6422 -> 21453 [label=AST ]
  6422 -> 6448 [label=CONTAINS ]
  6439 -> 6436 [label=REACHING_DEF VARIABLE="sk"]
  6432 -> 6425 [label=REF ]
  6426 -> 6428 [label=AST ]
  6431 -> 6433 [label=AST ]
  6427 -> 6432 [label=REACHING_DEF VARIABLE="ctx"]
  6443 -> 6441 [label=REACHING_DEF VARIABLE="ctx"]
  6428 -> 6449 [label=REACHING_DEF VARIABLE="tls_get_ctx(sk)"]
  6422 -> 6423 [label=REACHING_DEF VARIABLE=""]
  6422 -> 6437 [label=REACHING_DEF VARIABLE=""]
  6445 -> 6447 [label=AST ]
  6428 -> 6429 [label=POST_DOMINATE ]
  6424 -> 6441 [label=AST ]
  6431 -> 6444 [label=CDG ]
  6448 -> 6444 [label=REACHING_DEF VARIABLE="sk"]
  6440 -> 6449 [label=CFG ]
  6446 -> 6425 [label=REF ]
  6422 -> 6440 [label=CONTAINS ]
  6422 -> 6427 [label=CFG ]
  6432 -> 6426 [label=POST_DOMINATE ]
  6431 -> 6447 [label=CDG ]
  6432 -> 6433 [label=CFG ]
  6431 -> 6435 [label=CDG ]
  6424 -> 6426 [label=AST ]
  6448 -> 6444 [label=DOMINATE ]
  6436 -> 6438 [label=POST_DOMINATE ]
  6445 -> 6446 [label=ARGUMENT ]
  6429 -> 6428 [label=CFG ]
  6445 -> 6448 [label=REACHING_DEF VARIABLE="ctx->sk_write_space"]
  6422 -> 6435 [label=CONTAINS ]
  6422 -> 6442 [label=CONTAINS ]
  6442 -> 6443 [label=CFG ]
  6422 -> 6440 [label=REACHING_DEF VARIABLE=""]
  6445 -> 6446 [label=AST ]
  6430 -> 6431 [label=CONDITION ]
  6435 -> 6436 [label=AST ]
  6428 -> 6427 [label=REACHING_DEF VARIABLE="tls_get_ctx(sk)"]
  6435 -> 6449 [label=REACHING_DEF VARIABLE="ctx->sk_write_space(sk)"]
  6422 -> 6445 [label=CONTAINS ]
  6442 -> 6441 [label=REACHING_DEF VARIABLE="sk"]
  6434 -> 6440 [label=AST ]
  6446 -> 6447 [label=DOMINATE ]
  6444 -> 6445 [label=AST ]
  6431 -> 6437 [label=CDG ]
  6423 -> 21453 [label=PARAMETER_LINK ]
  6442 -> 6448 [label=REACHING_DEF VARIABLE="sk"]
  6428 -> 6426 [label=DOMINATE ]
  6435 -> 6439 [label=AST ]
  6431 -> 6441 [label=CDG ]
  6428 -> 6429 [label=ARGUMENT ]
  6429 -> 6442 [label=REACHING_DEF VARIABLE="sk"]
  6439 -> 21453 [label=REACHING_DEF VARIABLE="sk"]
  6426 -> 6428 [label=POST_DOMINATE ]
  6442 -> 6423 [label=REF ]
  6445 -> 6448 [label=DOMINATE ]
  6439 -> 6423 [label=REF ]
  6427 -> 6436 [label=REACHING_DEF VARIABLE="ctx"]
  6430 -> 6431 [label=AST ]
  6443 -> 6446 [label=REACHING_DEF VARIABLE="ctx"]
  6422 -> 6447 [label=CONTAINS ]
  6427 -> 6422 [label=POST_DOMINATE ]
  6435 -> 6439 [label=POST_DOMINATE ]
  6422 -> 6429 [label=CONTAINS ]
  6437 -> 6438 [label=DOMINATE ]
  6436 -> 6439 [label=REACHING_DEF VARIABLE="ctx->sk_write_space"]
  6439 -> 6449 [label=REACHING_DEF VARIABLE="sk"]
  6431 -> 6432 [label=AST ]
  6422 -> 6432 [label=CONTAINS ]
  6439 -> 6436 [label=POST_DOMINATE ]
  6447 -> 6446 [label=POST_DOMINATE ]
  6447 -> 6445 [label=CFG ]
  6445 -> 6448 [label=CFG ]
  6431 -> 6440 [label=CDG ]
  6435 -> 6440 [label=CFG ]
  6438 -> 6436 [label=CFG ]
  6422 -> 6442 [label=REACHING_DEF VARIABLE=""]
  6422 -> 6444 [label=CONTAINS ]
  6431 -> 6442 [label=CFG ]
  6436 -> 6437 [label=ARGUMENT ]
  6426 -> 6428 [label=ARGUMENT ]
  6444 -> 6449 [label=CFG ]
  6433 -> 6431 [label=DOMINATE ]
  6422 -> 6449 [label=AST ]
  6434 -> 6435 [label=AST ]
  6422 -> 6448 [label=REACHING_DEF VARIABLE=""]
  6442 -> 6443 [label=DOMINATE ]
  6443 -> 6441 [label=DOMINATE ]
  6446 -> 6441 [label=POST_DOMINATE ]
  6443 -> 6425 [label=REF ]
  6422 -> 6446 [label=CONTAINS ]
  6436 -> 6439 [label=CFG ]
  6424 -> 6425 [label=AST ]
  6429 -> 6439 [label=REACHING_DEF VARIABLE="sk"]
  6448 -> 6445 [label=POST_DOMINATE ]
  6422 -> 6429 [label=REACHING_DEF VARIABLE=""]
  6427 -> 6437 [label=REACHING_DEF VARIABLE="ctx"]
  6427 -> 6425 [label=REF ]
  6431 -> 6446 [label=CDG ]
  6446 -> 6447 [label=CFG ]
  6422 -> 6439 [label=REACHING_DEF VARIABLE=""]
  6448 -> 6444 [label=CFG ]
  6431 -> 6433 [label=POST_DOMINATE ]
  6436 -> 6439 [label=DOMINATE ]
  6422 -> 6423 [label=AST ]
  6431 -> 6437 [label=DOMINATE ]
  6431 -> 6442 [label=CDG ]
  6447 -> 6445 [label=DOMINATE ]
  6424 -> 6430 [label=AST ]
  6436 -> 6449 [label=REACHING_DEF VARIABLE="ctx->sk_write_space"]
  6426 -> 6449 [label=REACHING_DEF VARIABLE="*ctx = tls_get_ctx(sk)"]
  6422 -> 6433 [label=CONTAINS ]
}
