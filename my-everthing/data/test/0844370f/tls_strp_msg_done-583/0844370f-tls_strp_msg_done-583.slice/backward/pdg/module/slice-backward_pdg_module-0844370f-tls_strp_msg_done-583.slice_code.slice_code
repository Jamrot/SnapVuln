/* tls_strp.c */
void tls_strp_msg_done(struct tls_strparser *strp)
	WARN_ON(!strp->stm.full_len);
	if (likely(!strp->copy_mode))
		tcp_read_done(strp->sk, strp->stm.full_len);
		tls_strp_flush_anchor_copy(strp);
	strp->msg_ready = 0;
/* tls.h */
	struct sk_msg msg_plaintext;
	struct sk_msg msg_encrypted;
	struct scatterlist sg_aead_in[2];
	struct scatterlist sg_aead_out[2];
	u8 iv_data[TLS_MAX_IV_SIZE];
	struct aead_request aead_req;
/* tls_sw.c */
static int tls_sw_sendmsg_locked(struct sock *sk, struct msghdr *msg,
	long timeo = sock_sndtimeo(sk, msg->msg_flags & MSG_DONTWAIT);
	struct tls_context *tls_ctx = tls_get_ctx(sk);
	struct tls_prot_info *prot = &tls_ctx->prot_info;
	struct tls_sw_context_tx *ctx = tls_sw_ctx_tx(tls_ctx);
	bool async_capable = ctx->async_capable;
	unsigned char record_type = TLS_RECORD_TYPE_DATA;
	bool is_kvec = iov_iter_is_kvec(&msg->msg_iter);
	bool eor = !(msg->msg_flags & MSG_MORE);
	size_t try_to_copy;
	ssize_t copied = 0;
	struct sk_msg *msg_pl, *msg_en;
	struct tls_rec *rec;
	int required_size;
	bool full_record;
	int record_room;
	int orig_size;
	int ret = 0;
	if (!eor && (msg->msg_flags & MSG_EOR))
	if (unlikely(msg->msg_controllen)) {
		ret = tls_process_cmsg(sk, msg, &record_type);
		if (ret) {
			if (ret == -EINPROGRESS)
			else if (ret != -EAGAIN)
	while (msg_data_left(msg)) {
		if (sk->sk_err) {
		if (ctx->open_rec)
			rec = ctx->open_rec;
			rec = ctx->open_rec = tls_get_rec(sk);
		if (!rec) {
		msg_pl = &rec->msg_plaintext;
		msg_en = &rec->msg_encrypted;
		orig_size = msg_pl->sg.size;
		full_record = false;
		try_to_copy = msg_data_left(msg);
		record_room = TLS_MAX_PAYLOAD_SIZE - msg_pl->sg.size;
		if (try_to_copy >= record_room) {
			try_to_copy = record_room;
			full_record = true;
		required_size = msg_pl->sg.size + try_to_copy +
				prot->overhead_size;
		if (!sk_stream_memory_free(sk))
		ret = tls_alloc_encrypted_msg(sk, required_size);
		if (ret) {
			if (ret != -ENOSPC)
			try_to_copy -= required_size - msg_en->sg.size;
			full_record = true;
		if (try_to_copy && (msg->msg_flags & MSG_SPLICE_PAGES)) {
			ret = tls_sw_sendmsg_splice(sk, msg, msg_pl,
						    try_to_copy, &copied);
			if (ret < 0)
			tls_ctx->pending_open_record_frags = true;
			if (sk_msg_full(msg_pl))
				full_record = true;
			if (full_record || eor)
		if (!is_kvec && (full_record || eor) && !async_capable) {
			u32 first = msg_pl->sg.end;
			ret = sk_msg_zerocopy_from_iter(sk, &msg->msg_iter,
							msg_pl, try_to_copy);
			if (ret)
			copied += try_to_copy;
			sk_msg_sg_copy_set(msg_pl, first);
			ret = bpf_exec_tx_verdict(msg_pl, sk, full_record,
						  record_type, &copied,
						  msg->msg_flags);
			if (ret) {
				if (ret == -EINPROGRESS)
				else if (ret == -ENOMEM)
				else if (ctx->open_rec && ret == -ENOSPC)
				else if (ret != -EAGAIN)
			copied -= try_to_copy;
			sk_msg_sg_copy_clear(msg_pl, first);
			iov_iter_revert(&msg->msg_iter,
					msg_pl->sg.size - orig_size);
			sk_msg_trim(sk, msg_pl, orig_size);
		required_size = msg_pl->sg.size + try_to_copy;
		ret = tls_clone_plaintext_msg(sk, required_size);
		if (ret) {
			if (ret != -ENOSPC)
			try_to_copy -= required_size - msg_pl->sg.size;
			full_record = true;
			sk_msg_trim(sk, msg_en,
				    msg_pl->sg.size + prot->overhead_size);
		if (try_to_copy) {
			ret = sk_msg_memcopy_from_iter(sk, &msg->msg_iter,
						       msg_pl, try_to_copy);
			if (ret < 0)
		tls_ctx->pending_open_record_frags = true;
		copied += try_to_copy;
		if (full_record || eor) {
			ret = bpf_exec_tx_verdict(msg_pl, sk, full_record,
						  record_type, &copied,
						  msg->msg_flags);
			if (ret) {
				if (ret == -EINPROGRESS)
				else if (ret == -ENOMEM)
				else if (ret != -EAGAIN) {
		ret = sk_stream_wait_memory(sk, &timeo);
		if (ret) {
		if (ctx->open_rec && msg_en->sg.size < required_size)
int tls_sw_sendmsg(struct sock *sk, struct msghdr *msg, size_t size)
	struct tls_context *tls_ctx = tls_get_ctx(sk);
	int ret;
	if (msg->msg_flags & ~(MSG_MORE | MSG_DONTWAIT | MSG_NOSIGNAL |
			       MSG_CMSG_COMPAT | MSG_SPLICE_PAGES | MSG_EOR |
			       MSG_SENDPAGE_NOPOLICY))
	if (ret)
	lock_sock(sk);
	ret = tls_sw_sendmsg_locked(sk, msg, size);
void tls_sw_splice_eof(struct socket *sock)
	struct sock *sk = sock->sk;
	struct tls_context *tls_ctx = tls_get_ctx(sk);
	struct tls_sw_context_tx *ctx = tls_sw_ctx_tx(tls_ctx);
	struct tls_rec *rec;
	struct sk_msg *msg_pl;
	ssize_t copied = 0;
	bool retrying = false;
	int ret = 0;
	if (!ctx->open_rec)
	lock_sock(sk);
	rec = ctx->open_rec;
	if (!rec)
	msg_pl = &rec->msg_plaintext;
	if (msg_pl->sg.size == 0)
	ret = bpf_exec_tx_verdict(msg_pl, sk, false, TLS_RECORD_TYPE_DATA,
				  &copied, 0);
	switch (ret) {
		if (retrying)
static void tls_rx_rec_done(struct tls_sw_context_rx *ctx)
	tls_strp_msg_done(&ctx->strp);
int tls_sw_recvmsg(struct sock *sk,
		   struct msghdr *msg,
		   size_t len,
		   int flags,
	struct tls_context *tls_ctx = tls_get_ctx(sk);
	struct tls_sw_context_rx *ctx = tls_sw_ctx_rx(tls_ctx);
	struct tls_prot_info *prot = &tls_ctx->prot_info;
	ssize_t decrypted = 0, async_copy_bytes = 0;
	struct sk_psock *psock;
	unsigned char control = 0;
	size_t flushed_at = 0;
	struct strp_msg *rxm;
	struct tls_msg *tlm;
	ssize_t copied = 0;
	bool async = false;
	int target, err;
	bool is_kvec = iov_iter_is_kvec(&msg->msg_iter);
	bool is_peek = flags & MSG_PEEK;
	bool rx_more = false;
	bool released = true;
	bool bpf_strp_enabled;
	bool zc_capable;
	if (unlikely(flags & MSG_ERRQUEUE))
	err = tls_rx_reader_lock(sk, ctx, flags & MSG_DONTWAIT);
	if (err < 0)
	psock = sk_psock_get(sk);
	bpf_strp_enabled = sk_psock_strp_enabled(psock);
	if (err)
	err = process_rx_list(ctx, msg, &control, 0, len, is_peek, &rx_more);
	if (err < 0)
	copied = err;
	if (len <= copied || (copied && control != TLS_RECORD_TYPE_DATA) || rx_more)
	target = sock_rcvlowat(sk, flags & MSG_WAITALL, len);
	len = len - copied;
	zc_capable = !bpf_strp_enabled && !is_kvec && !is_peek &&
		ctx->zc_capable;
	decrypted = 0;
	while (len && (decrypted + copied < target || tls_strp_msg_ready(ctx))) {
		struct tls_decrypt_arg darg;
		int to_decrypt, chunk;
		err = tls_rx_rec_wait(sk, psock, flags & MSG_DONTWAIT,
				      released);
		if (err <= 0) {
			if (psock) {
				chunk = sk_msg_recvmsg(sk, psock, msg, len,
						       flags);
				if (chunk > 0) {
					decrypted += chunk;
					len -= chunk;
		memset(&darg.inargs, 0, sizeof(darg.inargs));
		rxm = strp_msg(tls_strp_msg(ctx));
		tlm = tls_msg(tls_strp_msg(ctx));
		to_decrypt = rxm->full_len - prot->overhead_size;
		if (zc_capable && to_decrypt <= len &&
		    tlm->control == TLS_RECORD_TYPE_DATA)
			darg.zc = true;
		if (tlm->control == TLS_RECORD_TYPE_DATA && !bpf_strp_enabled)
			darg.async = ctx->async_capable;
			darg.async = false;
		err = tls_rx_one_record(sk, msg, &darg);
		if (err < 0) {
		err = tls_record_content_type(msg, tls_msg(darg.skb), &control);
		if (err <= 0) {
			tls_rx_rec_done(ctx);
		released = tls_read_flush_backlog(sk, prot, len, to_decrypt,
						  decrypted + copied,
						  &flushed_at);
		rxm = strp_msg(darg.skb);
		chunk = rxm->full_len;
		tls_rx_rec_done(ctx);
		if (!darg.zc) {
			bool partially_consumed = chunk > len;
			struct sk_buff *skb = darg.skb;
			DEBUG_NET_WARN_ON_ONCE(darg.skb == ctx->strp.anchor);
			if (async) {
				async_copy_bytes += chunk;
				decrypted += chunk;
				len -= chunk;
				__skb_queue_tail(&ctx->rx_list, skb);
				if (unlikely(control != TLS_RECORD_TYPE_DATA))
			if (bpf_strp_enabled) {
				released = true;
				err = sk_psock_tls_strp_read(psock, skb);
				if (err != __SK_PASS) {
					rxm->offset = rxm->offset + rxm->full_len;
					rxm->full_len = 0;
			if (partially_consumed)
				chunk = len;
			err = skb_copy_datagram_msg(skb, rxm->offset,
						    msg, chunk);
			if (err < 0)
			if (is_peek) {
				peeked += chunk;
			if (partially_consumed) {
				rxm->offset += chunk;
				rxm->full_len -= chunk;
		decrypted += chunk;
		len -= chunk;
		msg->msg_flags |= MSG_EOR;
		if (control != TLS_RECORD_TYPE_DATA)
ssize_t tls_sw_splice_read(struct socket *sock,  loff_t *ppos,
			   size_t len, unsigned int flags)
	struct tls_context *tls_ctx = tls_get_ctx(sock->sk);
	struct tls_sw_context_rx *ctx = tls_sw_ctx_rx(tls_ctx);
	struct sock *sk = sock->sk;
	int err;
	err = tls_rx_reader_lock(sk, ctx, flags & SPLICE_F_NONBLOCK);
	if (err < 0)
	if (!skb_queue_empty(&ctx->rx_list)) {
		struct tls_decrypt_arg darg;
		err = tls_rx_rec_wait(sk, NULL, flags & SPLICE_F_NONBLOCK,
				      true);
		if (err <= 0)
		memset(&darg.inargs, 0, sizeof(darg.inargs));
		err = tls_rx_one_record(sk, NULL, &darg);
		if (err < 0) {
		tls_rx_rec_done(ctx);
int tls_sw_read_sock(struct sock *sk, read_descriptor_t *desc,
	struct tls_context *tls_ctx = tls_get_ctx(sk);
	struct tls_sw_context_rx *ctx = tls_sw_ctx_rx(tls_ctx);
	struct tls_prot_info *prot = &tls_ctx->prot_info;
	struct strp_msg *rxm = NULL;
	struct sk_buff *skb = NULL;
	struct sk_psock *psock;
	size_t flushed_at = 0;
	bool released = true;
	struct tls_msg *tlm;
	ssize_t decrypted;
	int err, used;
	psock = sk_psock_get(sk);
	if (psock) {
	err = tls_rx_reader_acquire(sk, ctx, true);
	if (err < 0)
	if (err)
	decrypted = 0;
		if (!skb_queue_empty(&ctx->rx_list)) {
			skb = __skb_dequeue(&ctx->rx_list);
			rxm = strp_msg(skb);
			tlm = tls_msg(skb);
			struct tls_decrypt_arg darg;
			err = tls_rx_rec_wait(sk, NULL, true, released);
			if (err <= 0)
			memset(&darg.inargs, 0, sizeof(darg.inargs));
			err = tls_rx_one_record(sk, NULL, &darg);
			if (err < 0) {
			released = tls_read_flush_backlog(sk, prot, INT_MAX,
							  0, decrypted,
							  &flushed_at);
			skb = darg.skb;
			rxm = strp_msg(skb);
			tlm = tls_msg(skb);
			decrypted += rxm->full_len;
			tls_rx_rec_done(ctx);
		if (tlm->control != TLS_RECORD_TYPE_DATA) {
		used = read_actor(desc, skb, rxm->offset, rxm->full_len);
		if (used <= 0) {
		copied += used;
		if (used < rxm->full_len) {
			rxm->offset += used;
			rxm->full_len -= used;
			if (!desc->count)
			if (!desc->count)
	} while (skb);
static void tls_encrypt_done(void *data, int err)
static int tls_do_encryption(struct sock *sk,
			     struct tls_context *tls_ctx,
			     struct tls_sw_context_tx *ctx,
			     struct aead_request *aead_req,
			     size_t data_len, u32 start)
	struct tls_prot_info *prot = &tls_ctx->prot_info;
	bool async;
	struct tls_rec *rec = ctx->open_rec;
	struct sk_msg *msg_en = &rec->msg_encrypted;
	int rc, iv_offset = 0;
	switch (prot->cipher_type) {
		rec->iv_data[0] = TLS_AES_CCM_IV_B0_BYTE;
		rec->iv_data[0] = TLS_SM4_CCM_IV_B0_BYTE;
	memcpy(&rec->iv_data[iv_offset], tls_ctx->tx.iv,
	       prot->iv_size + prot->salt_size);
	tls_xor_iv_with_seq(prot, rec->iv_data + iv_offset,
	aead_request_set_tfm(aead_req, ctx->aead_send);
	aead_request_set_ad(aead_req, prot->aad_size);
	aead_request_set_crypt(aead_req, rec->sg_aead_in,
			       rec->sg_aead_out,
			       data_len, rec->iv_data);
	aead_request_set_callback(aead_req, CRYPTO_TFM_REQ_MAY_BACKLOG,
				  tls_encrypt_done, rec);
	rc = crypto_aead_encrypt(aead_req);
	if (rc == -EBUSY) {
	struct sk_buff *skb;
static int tls_push_record(struct sock *sk, int flags,
	struct tls_context *tls_ctx = tls_get_ctx(sk);
	struct tls_prot_info *prot = &tls_ctx->prot_info;
	struct tls_sw_context_tx *ctx = tls_sw_ctx_tx(tls_ctx);
	struct tls_rec *rec = ctx->open_rec, *tmp = NULL;
	u32 i, split_point, orig_end;
	struct sk_msg *msg_pl, *msg_en;
	struct aead_request *req;
	bool split;
	int rc;
	if (!rec)
	msg_pl = &rec->msg_plaintext;
	msg_en = &rec->msg_encrypted;
	split_point = msg_pl->apply_bytes;
	split = split_point && split_point < msg_pl->sg.size;
	if (unlikely((!split &&
		      msg_pl->sg.size +
		      prot->overhead_size > msg_en->sg.size) ||
		     (split &&
		      split_point +
		      prot->overhead_size > msg_en->sg.size))) {
		split_point = msg_en->sg.size;
	if (split) {
		rc = tls_split_open_record(sk, rec, &tmp, msg_pl, msg_en,
					   split_point, prot->overhead_size,
					   &orig_end);
		if (rc < 0)
		if (!msg_pl->sg.size) {
			tls_merge_open_record(sk, rec, tmp, orig_end);
			msg_en = &rec->msg_encrypted;
			split = false;
		sk_msg_trim(sk, msg_en, msg_pl->sg.size +
			    prot->overhead_size);
	req = &rec->aead_req;
	if (prot->version == TLS_1_3_VERSION) {
	i = msg_en->sg.start;
	tls_make_aad(rec->aad_space, msg_pl->sg.size + prot->tail_size,
		     tls_ctx->tx.rec_seq, record_type, prot);
	tls_fill_prepend(tls_ctx,
			 msg_pl->sg.size + prot->tail_size,
	tls_ctx->pending_open_record_frags = false;
	rc = tls_do_encryption(sk, tls_ctx, ctx, req,
			       msg_pl->sg.size + prot->tail_size, i);
static int bpf_exec_tx_verdict(struct sk_msg *msg, struct sock *sk,
			       bool full_record, u8 record_type,
			       ssize_t *copied, int flags)
	struct tls_context *tls_ctx = tls_get_ctx(sk);
	struct tls_sw_context_tx *ctx = tls_sw_ctx_tx(tls_ctx);
	struct sk_msg msg_redir = { };
	struct sk_psock *psock;
	struct sock *sk_redir;
	struct tls_rec *rec;
	bool enospc, policy, redir_ingress;
	int err = 0, send;
	policy = !(flags & MSG_SENDPAGE_NOPOLICY);
	psock = sk_psock_get(sk);
	if (!psock || !policy) {
		err = tls_push_record(sk, flags, record_type);
	enospc = sk_msg_full(msg);
	if (psock->eval == __SK_NONE) {
		psock->eval = sk_psock_msg_verdict(sk, psock, msg);
		delta -= msg->sg.size;
	if (msg->cork_bytes && msg->cork_bytes > msg->sg.size &&
	    !enospc && !full_record) {
	msg->cork_bytes = 0;
	send = msg->sg.size;
	if (msg->apply_bytes && msg->apply_bytes < send)
		send = msg->apply_bytes;
	switch (psock->eval) {
		err = tls_push_record(sk, flags, record_type);
		if (err && err != -EINPROGRESS && sk->sk_err == EBADMSG) {
		redir_ingress = psock->redir_ingress;
		sk_redir = psock->sk_redir;
		memcpy(&msg_redir, msg, sizeof(*msg));
		if (msg->apply_bytes < send)
			msg->apply_bytes = 0;
			msg->apply_bytes -= send;
		sk_msg_return_zero(sk, msg, send);
		msg->sg.size -= send;
		release_sock(sk);
		err = tcp_bpf_sendmsg_redir(sk_redir, redir_ingress,
					    &msg_redir, send, flags);
		lock_sock(sk);
		if (err < 0) {
			*copied -= sk_msg_free_nocharge(sk, &msg_redir);
			msg->sg.size = 0;
		if (msg->sg.size == 0)
			tls_free_open_rec(sk);
		sk_msg_free_partial(sk, msg, send);
		if (msg->apply_bytes < send)
			msg->apply_bytes = 0;
			msg->apply_bytes -= send;
		if (msg->sg.size == 0)
			tls_free_open_rec(sk);
		err = -EACCES;
	if (likely(!err)) {
		bool reset_eval = !ctx->open_rec;
		rec = ctx->open_rec;
		if (rec) {
			msg = &rec->msg_plaintext;
			if (!msg->apply_bytes)
		if (reset_eval) {
			psock->eval = __SK_NONE;
			if (psock->sk_redir) {
				psock->sk_redir = NULL;
		if (rec)
static int tls_sw_push_pending_record(struct sock *sk, int flags)
	struct tls_context *tls_ctx = tls_get_ctx(sk);
	struct tls_sw_context_tx *ctx = tls_sw_ctx_tx(tls_ctx);
	struct tls_rec *rec = ctx->open_rec;
	struct sk_msg *msg_pl;
	size_t copied;
	if (!rec)
	msg_pl = &rec->msg_plaintext;
	copied = msg_pl->sg.size;
	if (!copied)
	return bpf_exec_tx_verdict(msg_pl, sk, true, TLS_RECORD_TYPE_DATA,
				   &copied, flags);
/* tls_device.c */
static int tls_push_data(struct sock *sk,
			 struct iov_iter *iter,
			 size_t size, int flags,
			 unsigned char record_type)
	struct tls_context *tls_ctx = tls_get_ctx(sk);
	struct tls_prot_info *prot = &tls_ctx->prot_info;
	struct tls_offload_context_tx *ctx = tls_offload_ctx_tx(tls_ctx);
	struct tls_record_info *record;
	int tls_push_record_flags;
	struct page_frag *pfrag;
	size_t orig_size = size;
	u32 max_open_record_len;
	bool more = false;
	bool done = false;
	int copy, rc = 0;
	long timeo;
	if (flags &
	    ~(MSG_MORE | MSG_DONTWAIT | MSG_NOSIGNAL |
	      MSG_SPLICE_PAGES | MSG_EOR))
	if ((flags & (MSG_MORE | MSG_EOR)) == (MSG_MORE | MSG_EOR))
	if (unlikely(sk->sk_err))
	flags |= MSG_SENDPAGE_DECRYPTED;
	tls_push_record_flags = flags | MSG_MORE;
	timeo = sock_sndtimeo(sk, flags & MSG_DONTWAIT);
	if (tls_is_partially_sent_record(tls_ctx)) {
		rc = tls_push_partial_record(sk, tls_ctx, flags);
		if (rc < 0)
	pfrag = sk_page_frag(sk);
	max_open_record_len = TLS_MAX_PAYLOAD_SIZE +
			      prot->prepend_size;
		rc = tls_do_allocation(sk, ctx, pfrag, prot->prepend_size);
		if (unlikely(rc)) {
			rc = sk_stream_wait_memory(sk, &timeo);
			if (!rc)
			record = ctx->open_record;
			if (!record)
			if (record_type != TLS_RECORD_TYPE_DATA) {
			} else if (record->len > prot->prepend_size) {
		record = ctx->open_record;
		copy = min_t(size_t, size, max_open_record_len - record->len);
		if (copy && (flags & MSG_SPLICE_PAGES)) {
			struct page_frag zc_pfrag;
			struct page **pages = &zc_pfrag.page;
			size_t off;
			rc = iov_iter_extract_pages(iter, &pages,
						    copy, 1, 0, &off);
			if (rc <= 0) {
			copy = rc;
			if (WARN_ON_ONCE(!sendpage_ok(zc_pfrag.page))) {
				iov_iter_revert(iter, copy);
			zc_pfrag.offset = off;
			zc_pfrag.size = copy;
			tls_append_frag(record, &zc_pfrag, copy);
		} else if (copy) {
			copy = min_t(size_t, copy, pfrag->size - pfrag->offset);
			rc = tls_device_copy_data(page_address(pfrag->page) +
						  pfrag->offset, copy,
						  iter);
			if (rc)
			tls_append_frag(record, pfrag, copy);
		size -= copy;
		if (!size) {
			tls_push_record_flags = flags;
			if (flags & MSG_MORE) {
			done = true;
		if (done || record->len >= max_open_record_len ||
		    (record->num_frags >= MAX_SKB_FRAGS - 1)) {
			tls_device_record_close(sk, tls_ctx, record,
						pfrag, record_type);
			rc = tls_push_record(sk,
					     tls_ctx,
					     ctx,
					     record,
					     tls_push_record_flags);
			if (rc < 0)
	} while (!done);
int tls_device_sendmsg(struct sock *sk, struct msghdr *msg, size_t size)
	unsigned char record_type = TLS_RECORD_TYPE_DATA;
	struct tls_context *tls_ctx = tls_get_ctx(sk);
	int rc;
	if (!tls_ctx->zerocopy_sendfile)
		msg->msg_flags &= ~MSG_SPLICE_PAGES;
	lock_sock(sk);
	if (unlikely(msg->msg_controllen)) {
		rc = tls_process_cmsg(sk, msg, &record_type);
		if (rc)
	rc = tls_push_data(sk, &msg->msg_iter, size, msg->msg_flags,
			   record_type);
void tls_device_splice_eof(struct socket *sock)
	struct sock *sk = sock->sk;
	struct tls_context *tls_ctx = tls_get_ctx(sk);
	struct iov_iter iter = {};
	if (!tls_is_partially_sent_record(tls_ctx))
	mutex_lock(&tls_ctx->tx_lock);
	lock_sock(sk);
	if (tls_is_partially_sent_record(tls_ctx)) {
		iov_iter_bvec(&iter, ITER_SOURCE, NULL, 0, 0);
		tls_push_data(sk, &iter, 0, 0, TLS_RECORD_TYPE_DATA);
static int tls_device_push_pending_record(struct sock *sk, int flags)
	struct iov_iter iter;
	iov_iter_kvec(&iter, ITER_SOURCE, NULL, 0, 0);
	return tls_push_data(sk, &iter, 0, flags, TLS_RECORD_TYPE_DATA);
