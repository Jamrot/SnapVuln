digraph {
  9954 [label=FIELD_IDENTIFIER ORDER=2 ARGUMENT_INDEX=2 CODE="work" COLUMN_NUMBER=28 LINE_NUMBER=557 CANONICAL_NAME="work"]
  9955 [label=RETURN ORDER=2 ARGUMENT_INDEX=-1 CODE="return;" COLUMN_NUMBER=3 LINE_NUMBER=558]
  9944 [label=CALL ORDER=1 ARGUMENT_INDEX=-1 CODE="sock_owned_by_user_nocheck(strp->sk)" COLUMN_NUMBER=6 METHOD_FULL_NAME="sock_owned_by_user_nocheck" LINE_NUMBER=556 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="sock_owned_by_user_nocheck"]
  9940 [label=METHOD COLUMN_NUMBER=1 LINE_NUMBER=547 COLUMN_NUMBER_END=1 IS_EXTERNAL=false SIGNATURE="void tls_strp_data_ready (tls_strparser*)" NAME="tls_strp_data_ready" AST_PARENT_TYPE="TYPE_DECL" AST_PARENT_FULL_NAME="tls_strp.c:<global>" ORDER=21 CODE="void tls_strp_data_ready(struct tls_strparser *strp)
{
	/* This check is needed to synchronize with do_tls_strp_work.
	 * do_tls_strp_work acquires a process lock (lock_sock) whereas
	 * the lock held here is bh_lock_sock. The two locks can be
	 * held by different threads at the same time, but bh_lock_sock
	 * allows a thread in BH context to safely check if the process
	 * lock is held. In this case, if the lock is held, queue work.
	 */
	if (sock_owned_by_user_nocheck(strp->sk)) {
		queue_work(tls_strp_wq, &strp->work);
		return;
	}

	tls_strp_check_rcv(strp);
}" FULL_NAME="tls_strp_data_ready" LINE_NUMBER_END=562 FILENAME="tls_strp.c"]
  9956 [label=CALL ORDER=2 ARGUMENT_INDEX=-1 CODE="tls_strp_check_rcv(strp)" COLUMN_NUMBER=2 METHOD_FULL_NAME="tls_strp_check_rcv" LINE_NUMBER=561 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="tls_strp_check_rcv"]
  9946 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="strp" COLUMN_NUMBER=33 LINE_NUMBER=556 TYPE_FULL_NAME="tls_strparser*" NAME="strp"]
  9952 [label=CALL ORDER=1 ARGUMENT_INDEX=1 CODE="strp->work" COLUMN_NUMBER=28 METHOD_FULL_NAME="<operator>.indirectFieldAccess" LINE_NUMBER=557 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.indirectFieldAccess"]
  9957 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="strp" COLUMN_NUMBER=21 LINE_NUMBER=561 TYPE_FULL_NAME="tls_strparser*" NAME="strp"]
  9945 [label=CALL ORDER=1 ARGUMENT_INDEX=1 CODE="strp->sk" COLUMN_NUMBER=33 METHOD_FULL_NAME="<operator>.indirectFieldAccess" LINE_NUMBER=556 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.indirectFieldAccess"]
  9943 [label=CONTROL_STRUCTURE CONTROL_STRUCTURE_TYPE="IF" ORDER=1 PARSER_TYPE_NAME="CASTIfStatement" ARGUMENT_INDEX=-1 CODE="if (sock_owned_by_user_nocheck(strp->sk))" COLUMN_NUMBER=2 LINE_NUMBER=556]
  9953 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="strp" COLUMN_NUMBER=28 LINE_NUMBER=557 TYPE_FULL_NAME="tls_strparser*" NAME="strp"]
  9941 [label=METHOD_PARAMETER_IN ORDER=1 CODE="struct tls_strparser *strp" IS_VARIADIC=false COLUMN_NUMBER=26 LINE_NUMBER=547 TYPE_FULL_NAME="tls_strparser*" EVALUATION_STRATEGY="BY_VALUE" INDEX=1 NAME="strp"]
  9958 [label=METHOD_RETURN ORDER=3 CODE="RET" COLUMN_NUMBER=1 LINE_NUMBER=547 TYPE_FULL_NAME="void" EVALUATION_STRATEGY="BY_VALUE"]
  9947 [label=FIELD_IDENTIFIER ORDER=2 ARGUMENT_INDEX=2 CODE="sk" COLUMN_NUMBER=33 LINE_NUMBER=556 CANONICAL_NAME="sk"]
  9950 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="tls_strp_wq" COLUMN_NUMBER=14 LINE_NUMBER=557 TYPE_FULL_NAME="workqueue_struct*" NAME="tls_strp_wq"]
  9942 [label=BLOCK ORDER=2 ARGUMENT_INDEX=-1 CODE="{
	/* This check is needed to synchronize with do_tls_strp_work.
	 * do_tls_strp_work acquires a process lock (lock_sock) whereas
	 * the lock held here is bh_lock_sock. The two locks can be
	 * held by different threads at the same time, but bh_lock_sock
	 * allows a thread in BH context to safely check if the process
	 * lock is held. In this case, if the lock is held, queue work.
	 */
	if (sock_owned_by_user_nocheck(strp->sk)) {
		queue_work(tls_strp_wq, &strp->work);
		return;
	}

	tls_strp_check_rcv(strp);
}" COLUMN_NUMBER=1 LINE_NUMBER=548 TYPE_FULL_NAME="void"]
  9948 [label=BLOCK ORDER=2 ARGUMENT_INDEX=-1 CODE="{
		queue_work(tls_strp_wq, &strp->work);
		return;
	}" COLUMN_NUMBER=44 LINE_NUMBER=556 TYPE_FULL_NAME="void"]
  21540 [label=METHOD_PARAMETER_OUT ORDER=1 CODE="struct tls_strparser *strp" IS_VARIADIC=false COLUMN_NUMBER=26 LINE_NUMBER=547 TYPE_FULL_NAME="tls_strparser*" EVALUATION_STRATEGY="BY_VALUE" INDEX=1 NAME="strp"]
  9951 [label=CALL ORDER=2 ARGUMENT_INDEX=2 CODE="&strp->work" COLUMN_NUMBER=27 METHOD_FULL_NAME="<operator>.addressOf" LINE_NUMBER=557 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.addressOf"]
  9949 [label=CALL ORDER=1 ARGUMENT_INDEX=-1 CODE="queue_work(tls_strp_wq, &strp->work)" COLUMN_NUMBER=3 METHOD_FULL_NAME="queue_work" LINE_NUMBER=557 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="queue_work"]
  9944 -> 9951 [label=CDG ]
  9952 -> 21540 [label=REACHING_DEF VARIABLE="strp->work"]
  9951 -> 9952 [label=ARGUMENT ]
  9950 -> 9949 [label=REACHING_DEF VARIABLE="tls_strp_wq"]
  9953 -> 9954 [label=CFG ]
  9953 -> 9950 [label=POST_DOMINATE ]
  9950 -> 9951 [label=REACHING_DEF VARIABLE="tls_strp_wq"]
  9940 -> 9953 [label=REACHING_DEF VARIABLE=""]
  9949 -> 9951 [label=AST ]
  9952 -> 9954 [label=POST_DOMINATE ]
  9950 -> 9953 [label=CFG ]
  9949 -> 9955 [label=DOMINATE ]
  9940 -> 9946 [label=REACHING_DEF VARIABLE=""]
  9945 -> 9944 [label=REACHING_DEF VARIABLE="strp->sk"]
  9944 -> 9945 [label=ARGUMENT ]
  9942 -> 9956 [label=AST ]
  9940 -> 9943 [label=CONTAINS ]
  9943 -> 9944 [label=CONDITION ]
  9952 -> 9951 [label=CFG ]
  9944 -> 9953 [label=CDG ]
  9940 -> 21540 [label=AST ]
  9944 -> 9945 [label=AST ]
  9947 -> 9945 [label=CFG ]
  9944 -> 9957 [label=DOMINATE ]
  9940 -> 9942 [label=AST ]
  9953 -> 9941 [label=REF ]
  9940 -> 9950 [label=REACHING_DEF VARIABLE=""]
  9944 -> 9950 [label=CDG ]
  9944 -> 9956 [label=CDG ]
  9940 -> 9944 [label=CONTAINS ]
  9949 -> 9950 [label=ARGUMENT ]
  9945 -> 9957 [label=REACHING_DEF VARIABLE="strp->sk"]
  9949 -> 9950 [label=AST ]
  9950 -> 9958 [label=REACHING_DEF VARIABLE="tls_strp_wq"]
  9944 -> 9950 [label=DOMINATE ]
  9955 -> 9958 [label=CFG ]
  9957 -> 9956 [label=REACHING_DEF VARIABLE="strp"]
  9944 -> 9950 [label=CFG ]
  9947 -> 9945 [label=DOMINATE ]
  9940 -> 9941 [label=AST ]
  9941 -> 9958 [label=REACHING_DEF VARIABLE="strp"]
  9940 -> 9945 [label=CONTAINS ]
  9940 -> 9950 [label=CONTAINS ]
  9949 -> 9958 [label=REACHING_DEF VARIABLE="queue_work(tls_strp_wq, &strp->work)"]
  9940 -> 9953 [label=CONTAINS ]
  9952 -> 9951 [label=REACHING_DEF VARIABLE="strp->work"]
  9952 -> 9951 [label=REACHING_DEF VARIABLE="strp->work"]
  9949 -> 9951 [label=ARGUMENT ]
  9956 -> 9957 [label=POST_DOMINATE ]
  9940 -> 9949 [label=CONTAINS ]
  9945 -> 9947 [label=ARGUMENT ]
  9941 -> 21540 [label=REACHING_DEF VARIABLE="strp"]
  9941 -> 21540 [label=REACHING_DEF VARIABLE="strp"]
  9949 -> 9955 [label=CFG ]
  9940 -> 9947 [label=CONTAINS ]
  9940 -> 9946 [label=CFG ]
  9952 -> 9953 [label=AST ]
  9945 -> 9944 [label=CFG ]
  9951 -> 9949 [label=REACHING_DEF VARIABLE="&strp->work"]
  9940 -> 9952 [label=CONTAINS ]
  9957 -> 9956 [label=DOMINATE ]
  9955 -> 9958 [label=REACHING_DEF VARIABLE="<RET>"]
  9940 -> 9956 [label=CONTAINS ]
  9944 -> 9954 [label=CDG ]
  9940 -> 9946 [label=DOMINATE ]
  9941 -> 9952 [label=REACHING_DEF VARIABLE="strp"]
  9954 -> 9953 [label=POST_DOMINATE ]
  9944 -> 9949 [label=CDG ]
  9944 -> 9957 [label=CDG ]
  9958 -> 9944 [label=POST_DOMINATE ]
  9954 -> 9952 [label=DOMINATE ]
  9945 -> 9947 [label=POST_DOMINATE ]
  9945 -> 9958 [label=REACHING_DEF VARIABLE="strp->sk"]
  9945 -> 9944 [label=DOMINATE ]
  9940 -> 9942 [label=CONTAINS ]
  9949 -> 9951 [label=POST_DOMINATE ]
  9944 -> 9958 [label=REACHING_DEF VARIABLE="sock_owned_by_user_nocheck(strp->sk)"]
  9945 -> 9946 [label=ARGUMENT ]
  9946 -> 9940 [label=POST_DOMINATE ]
  9957 -> 9956 [label=CFG ]
  9947 -> 9946 [label=POST_DOMINATE ]
  9952 -> 9953 [label=ARGUMENT ]
  9945 -> 21540 [label=REACHING_DEF VARIABLE="strp->sk"]
  9940 -> 9957 [label=CONTAINS ]
  9956 -> 9957 [label=ARGUMENT ]
  9957 -> 9941 [label=REF ]
  9943 -> 9944 [label=AST ]
  9948 -> 9955 [label=AST ]
  9940 -> 9958 [label=AST ]
  9940 -> 9955 [label=REACHING_DEF VARIABLE=""]
  9940 -> 9946 [label=CONTAINS ]
  9946 -> 9947 [label=DOMINATE ]
  9958 -> 9956 [label=POST_DOMINATE ]
  9941 -> 9953 [label=REACHING_DEF VARIABLE="strp"]
  9944 -> 9958 [label=DOMINATE ]
  9950 -> 9953 [label=DOMINATE ]
  9952 -> 9954 [label=AST ]
  9952 -> 9951 [label=DOMINATE ]
  9945 -> 9946 [label=AST ]
  9956 -> 9957 [label=AST ]
  9956 -> 9958 [label=CFG ]
  9941 -> 9945 [label=REACHING_DEF VARIABLE="strp"]
  9945 -> 9947 [label=AST ]
  9946 -> 9947 [label=CFG ]
  9940 -> 9954 [label=CONTAINS ]
  9951 -> 9952 [label=POST_DOMINATE ]
  9951 -> 9952 [label=AST ]
  9941 -> 9946 [label=REACHING_DEF VARIABLE="strp"]
  9944 -> 9952 [label=CDG ]
  9940 -> 9941 [label=REACHING_DEF VARIABLE=""]
  9940 -> 9951 [label=CONTAINS ]
  9941 -> 9957 [label=REACHING_DEF VARIABLE="strp"]
  9951 -> 9949 [label=CFG ]
  9940 -> 9955 [label=CONTAINS ]
  9944 -> 9955 [label=CDG ]
  9948 -> 9949 [label=AST ]
  9952 -> 9958 [label=REACHING_DEF VARIABLE="strp->work"]
  9944 -> 9945 [label=POST_DOMINATE ]
  9945 -> 9953 [label=REACHING_DEF VARIABLE="strp->sk"]
  9940 -> 9948 [label=CONTAINS ]
  9954 -> 9952 [label=CFG ]
  9941 -> 21540 [label=PARAMETER_LINK ]
  9958 -> 9955 [label=POST_DOMINATE ]
  9951 -> 9949 [label=DOMINATE ]
  9951 -> 9958 [label=REACHING_DEF VARIABLE="&strp->work"]
  9953 -> 9954 [label=DOMINATE ]
  9940 -> 9957 [label=REACHING_DEF VARIABLE=""]
  9955 -> 9949 [label=POST_DOMINATE ]
  9946 -> 9941 [label=REF ]
  9942 -> 9943 [label=AST ]
  9944 -> 9957 [label=CFG ]
  9952 -> 9954 [label=ARGUMENT ]
  9943 -> 9948 [label=AST ]
}
