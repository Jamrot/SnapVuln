digraph {
  1057 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=-1 CODE="async_cleanup" COLUMN_NUMBER=6 LINE_NUMBER=108 TYPE_FULL_NAME="bool" NAME="async_cleanup"]
  1046 [label=FIELD_IDENTIFIER ORDER=2 ARGUMENT_INDEX=2 CODE="refcount" COLUMN_NUMBER=25 LINE_NUMBER=105 CANONICAL_NAME="refcount"]
  1077 [label=BLOCK ORDER=2 ARGUMENT_INDEX=-1 CODE="<empty>" COLUMN_NUMBER=3 LINE_NUMBER=119 TYPE_FULL_NAME="void"]
  1023 [label=FIELD_IDENTIFIER ORDER=2 ARGUMENT_INDEX=2 CODE="refcount" COLUMN_NUMBER=39 LINE_NUMBER=94 CANONICAL_NAME="refcount"]
  1042 [label=CALL ORDER=1 ARGUMENT_INDEX=1 CODE="refcount_read(&ctx->refcount)" COLUMN_NUMBER=10 METHOD_FULL_NAME="refcount_read" LINE_NUMBER=105 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="refcount_read"]
  1009 [label=LOCAL ORDER=1 CODE="struct net_device* netdev" COLUMN_NUMBER=20 LINE_NUMBER=89 TYPE_FULL_NAME="net_device*" NAME="netdev"]
  1080 [label=METHOD_RETURN ORDER=3 CODE="RET" COLUMN_NUMBER=1 LINE_NUMBER=87 TYPE_FULL_NAME="void" EVALUATION_STRATEGY="BY_VALUE"]
  1053 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="ctx" COLUMN_NUMBER=28 LINE_NUMBER=107 TYPE_FULL_NAME="tls_context*" NAME="ctx"]
  1051 [label=CALL ORDER=2 ARGUMENT_INDEX=2 CODE="ctx->tx_conf == TLS_HW" COLUMN_NUMBER=28 METHOD_FULL_NAME="<operator>.equals" LINE_NUMBER=107 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.equals"]
  1019 [label=CALL ORDER=1 ARGUMENT_INDEX=1 CODE="refcount_dec_and_test(&ctx->refcount)" COLUMN_NUMBER=16 METHOD_FULL_NAME="refcount_dec_and_test" LINE_NUMBER=94 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="refcount_dec_and_test"]
  1050 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="netdev" COLUMN_NUMBER=18 LINE_NUMBER=107 TYPE_FULL_NAME="net_device*" NAME="netdev"]
  1033 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="ctx" COLUMN_NUMBER=12 LINE_NUMBER=99 TYPE_FULL_NAME="tls_context*" NAME="ctx"]
  1071 [label=CALL ORDER=1 ARGUMENT_INDEX=1 CODE="&tls_device_lock" COLUMN_NUMBER=25 METHOD_FULL_NAME="<operator>.addressOf" LINE_NUMBER=116 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.addressOf"]
  1030 [label=CALL ORDER=6 ARGUMENT_INDEX=-1 CODE="list_del(&ctx->list)" COLUMN_NUMBER=2 METHOD_FULL_NAME="list_del" LINE_NUMBER=99 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="list_del"]
  1043 [label=CALL ORDER=1 ARGUMENT_INDEX=1 CODE="&ctx->refcount" COLUMN_NUMBER=24 METHOD_FULL_NAME="<operator>.addressOf" LINE_NUMBER=105 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.addressOf"]
  1055 [label=IDENTIFIER ORDER=2 ARGUMENT_INDEX=2 CODE="TLS_HW" COLUMN_NUMBER=44 LINE_NUMBER=107 TYPE_FULL_NAME="ANY" NAME="TLS_HW"]
  1074 [label=CONTROL_STRUCTURE CONTROL_STRUCTURE_TYPE="IF" ORDER=11 PARSER_TYPE_NAME="CASTIfStatement" ARGUMENT_INDEX=-1 CODE="if (!async_cleanup)" COLUMN_NUMBER=2 LINE_NUMBER=118]
  1021 [label=CALL ORDER=1 ARGUMENT_INDEX=1 CODE="ctx->refcount" COLUMN_NUMBER=39 METHOD_FULL_NAME="<operator>.indirectFieldAccess" LINE_NUMBER=94 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.indirectFieldAccess"]
  1032 [label=CALL ORDER=1 ARGUMENT_INDEX=1 CODE="ctx->list" COLUMN_NUMBER=12 METHOD_FULL_NAME="<operator>.indirectFieldAccess" LINE_NUMBER=99 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.indirectFieldAccess"]
  1016 [label=CONTROL_STRUCTURE CONTROL_STRUCTURE_TYPE="IF" ORDER=5 PARSER_TYPE_NAME="CASTIfStatement" ARGUMENT_INDEX=-1 CODE="if (unlikely(!refcount_dec_and_test(&ctx->refcount)))" COLUMN_NUMBER=2 LINE_NUMBER=94]
  1073 [label=IDENTIFIER ORDER=2 ARGUMENT_INDEX=2 CODE="flags" COLUMN_NUMBER=43 LINE_NUMBER=116 TYPE_FULL_NAME="long unsigned" NAME="flags"]
  1069 [label=FIELD_IDENTIFIER ORDER=2 ARGUMENT_INDEX=2 CODE="destruct_work" COLUMN_NUMBER=28 LINE_NUMBER=114 CANONICAL_NAME="destruct_work"]
  1013 [label=CALL ORDER=1 ARGUMENT_INDEX=1 CODE="&tls_device_lock" COLUMN_NUMBER=20 METHOD_FULL_NAME="<operator>.addressOf" LINE_NUMBER=93 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.addressOf"]
  1008 [label=BLOCK ORDER=2 ARGUMENT_INDEX=-1 CODE="{
	struct net_device *netdev;
	unsigned long flags;
	bool async_cleanup;

	spin_lock_irqsave(&tls_device_lock, flags);
	if (unlikely(!refcount_dec_and_test(&ctx->refcount))) {
		spin_unlock_irqrestore(&tls_device_lock, flags);
		return;
	}

	list_del(&ctx->list); /* Remove from tls_device_list / tls_device_down_list */

	/* Safe, because this is the destroy flow, refcount is 0, so
	 * tls_device_down can't store this field in parallel.
	 */
	netdev = rcu_dereference_protected(ctx->netdev,
					   !refcount_read(&ctx->refcount));

	async_cleanup = netdev && ctx->tx_conf == TLS_HW;
	if (async_cleanup) {
		struct tls_offload_context_tx *offload_ctx = tls_offload_ctx_tx(ctx);

		/* queue_work inside the spinlock
		 * to make sure tls_device_down waits for that work.
		 */
		queue_work(destruct_wq, &offload_ctx->destruct_work);
	}
	spin_unlock_irqrestore(&tls_device_lock, flags);

	if (!async_cleanup)
		tls_device_free_ctx(ctx);
}" COLUMN_NUMBER=1 LINE_NUMBER=88 TYPE_FULL_NAME="void"]
  1028 [label=IDENTIFIER ORDER=2 ARGUMENT_INDEX=2 CODE="flags" COLUMN_NUMBER=44 LINE_NUMBER=95 TYPE_FULL_NAME="long unsigned" NAME="flags"]
  1020 [label=CALL ORDER=1 ARGUMENT_INDEX=1 CODE="&ctx->refcount" COLUMN_NUMBER=38 METHOD_FULL_NAME="<operator>.addressOf" LINE_NUMBER=94 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.addressOf"]
  1041 [label=CALL ORDER=2 ARGUMENT_INDEX=2 CODE="!refcount_read(&ctx->refcount)" COLUMN_NUMBER=9 METHOD_FULL_NAME="<operator>.logicalNot" LINE_NUMBER=105 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.logicalNot"]
  1052 [label=CALL ORDER=1 ARGUMENT_INDEX=1 CODE="ctx->tx_conf" COLUMN_NUMBER=28 METHOD_FULL_NAME="<operator>.indirectFieldAccess" LINE_NUMBER=107 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.indirectFieldAccess"]
  1036 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="netdev" COLUMN_NUMBER=2 LINE_NUMBER=104 TYPE_FULL_NAME="net_device*" NAME="netdev"]
  1037 [label=CALL ORDER=2 ARGUMENT_INDEX=2 CODE="rcu_dereference_protected(ctx->netdev,
					   !refcount_read(&ctx->refcount))" COLUMN_NUMBER=11 METHOD_FULL_NAME="rcu_dereference_protected" LINE_NUMBER=104 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="rcu_dereference_protected"]
  1067 [label=CALL ORDER=1 ARGUMENT_INDEX=1 CODE="offload_ctx->destruct_work" COLUMN_NUMBER=28 METHOD_FULL_NAME="<operator>.indirectFieldAccess" LINE_NUMBER=114 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.indirectFieldAccess"]
  1039 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="ctx" COLUMN_NUMBER=37 LINE_NUMBER=104 TYPE_FULL_NAME="tls_context*" NAME="ctx"]
  1054 [label=FIELD_IDENTIFIER ORDER=2 ARGUMENT_INDEX=2 CODE="tx_conf" COLUMN_NUMBER=28 LINE_NUMBER=107 CANONICAL_NAME="tx_conf"]
  1076 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="async_cleanup" COLUMN_NUMBER=7 LINE_NUMBER=118 TYPE_FULL_NAME="bool" NAME="async_cleanup"]
  1059 [label=LOCAL ORDER=1 CODE="struct tls_offload_context_tx* offload_ctx" COLUMN_NUMBER=33 LINE_NUMBER=109 TYPE_FULL_NAME="tls_offload_context_tx*" NAME="offload_ctx"]
  1072 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="tls_device_lock" COLUMN_NUMBER=26 LINE_NUMBER=116 TYPE_FULL_NAME="ANY" NAME="tls_device_lock"]
  1048 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="async_cleanup" COLUMN_NUMBER=2 LINE_NUMBER=107 TYPE_FULL_NAME="bool" NAME="async_cleanup"]
  1056 [label=CONTROL_STRUCTURE CONTROL_STRUCTURE_TYPE="IF" ORDER=9 PARSER_TYPE_NAME="CASTIfStatement" ARGUMENT_INDEX=-1 CODE="if (async_cleanup)" COLUMN_NUMBER=2 LINE_NUMBER=108]
  1035 [label=CALL ORDER=7 ARGUMENT_INDEX=-1 CODE="netdev = rcu_dereference_protected(ctx->netdev,
					   !refcount_read(&ctx->refcount))" COLUMN_NUMBER=2 METHOD_FULL_NAME="<operator>.assignment" LINE_NUMBER=104 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.assignment"]
  1017 [label=CALL ORDER=1 ARGUMENT_INDEX=-1 CODE="unlikely(!refcount_dec_and_test(&ctx->refcount))" COLUMN_NUMBER=6 METHOD_FULL_NAME="unlikely" LINE_NUMBER=94 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="unlikely"]
  1034 [label=FIELD_IDENTIFIER ORDER=2 ARGUMENT_INDEX=2 CODE="list" COLUMN_NUMBER=12 LINE_NUMBER=99 CANONICAL_NAME="list"]
  1078 [label=CALL ORDER=1 ARGUMENT_INDEX=1 CODE="tls_device_free_ctx(ctx)" COLUMN_NUMBER=3 METHOD_FULL_NAME="tls_device_free_ctx" LINE_NUMBER=119 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="tls_device_free_ctx"]
  1031 [label=CALL ORDER=1 ARGUMENT_INDEX=1 CODE="&ctx->list" COLUMN_NUMBER=11 METHOD_FULL_NAME="<operator>.addressOf" LINE_NUMBER=99 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.addressOf"]
  1079 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="ctx" COLUMN_NUMBER=23 LINE_NUMBER=119 TYPE_FULL_NAME="tls_context*" NAME="ctx"]
  1062 [label=CALL ORDER=2 ARGUMENT_INDEX=2 CODE="tls_offload_ctx_tx(ctx)" COLUMN_NUMBER=48 METHOD_FULL_NAME="tls_offload_ctx_tx" LINE_NUMBER=109 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="tls_offload_ctx_tx"]
  1029 [label=RETURN ORDER=2 ARGUMENT_INDEX=-1 CODE="return;" COLUMN_NUMBER=3 LINE_NUMBER=96]
  1018 [label=CALL ORDER=1 ARGUMENT_INDEX=1 CODE="!refcount_dec_and_test(&ctx->refcount)" COLUMN_NUMBER=15 METHOD_FULL_NAME="<operator>.logicalNot" LINE_NUMBER=94 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.logicalNot"]
  1027 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="tls_device_lock" COLUMN_NUMBER=27 LINE_NUMBER=95 TYPE_FULL_NAME="ANY" NAME="tls_device_lock"]
  1006 [label=METHOD COLUMN_NUMBER=1 LINE_NUMBER=87 COLUMN_NUMBER_END=1 IS_EXTERNAL=false SIGNATURE="void tls_device_queue_ctx_destruction (tls_context*)" NAME="tls_device_queue_ctx_destruction" AST_PARENT_TYPE="TYPE_DECL" AST_PARENT_FULL_NAME="tls_device.c:<global>" ORDER=9 CODE="static void tls_device_queue_ctx_destruction(struct tls_context *ctx)
{
	struct net_device *netdev;
	unsigned long flags;
	bool async_cleanup;

	spin_lock_irqsave(&tls_device_lock, flags);
	if (unlikely(!refcount_dec_and_test(&ctx->refcount))) {
		spin_unlock_irqrestore(&tls_device_lock, flags);
		return;
	}

	list_del(&ctx->list); /* Remove from tls_device_list / tls_device_down_list */

	/* Safe, because this is the destroy flow, refcount is 0, so
	 * tls_device_down can't store this field in parallel.
	 */
	netdev = rcu_dereference_protected(ctx->netdev,
					   !refcount_read(&ctx->refcount));

	async_cleanup = netdev && ctx->tx_conf == TLS_HW;
	if (async_cleanup) {
		struct tls_offload_context_tx *offload_ctx = tls_offload_ctx_tx(ctx);

		/* queue_work inside the spinlock
		 * to make sure tls_device_down waits for that work.
		 */
		queue_work(destruct_wq, &offload_ctx->destruct_work);
	}
	spin_unlock_irqrestore(&tls_device_lock, flags);

	if (!async_cleanup)
		tls_device_free..." FULL_NAME="tls_device_queue_ctx_destruction" LINE_NUMBER_END=120 FILENAME="tls_device.c"]
  21284 [label=METHOD_PARAMETER_OUT ORDER=1 CODE="struct tls_context *ctx" IS_VARIADIC=false COLUMN_NUMBER=46 LINE_NUMBER=87 TYPE_FULL_NAME="tls_context*" EVALUATION_STRATEGY="BY_VALUE" INDEX=1 NAME="ctx"]
  1068 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="offload_ctx" COLUMN_NUMBER=28 LINE_NUMBER=114 TYPE_FULL_NAME="tls_offload_context_tx*" NAME="offload_ctx"]
  1012 [label=CALL ORDER=4 ARGUMENT_INDEX=-1 CODE="spin_lock_irqsave(&tls_device_lock, flags)" COLUMN_NUMBER=2 METHOD_FULL_NAME="spin_lock_irqsave" LINE_NUMBER=93 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="spin_lock_irqsave"]
  1026 [label=CALL ORDER=1 ARGUMENT_INDEX=1 CODE="&tls_device_lock" COLUMN_NUMBER=26 METHOD_FULL_NAME="<operator>.addressOf" LINE_NUMBER=95 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.addressOf"]
  1060 [label=CALL ORDER=2 ARGUMENT_INDEX=-1 CODE="*offload_ctx = tls_offload_ctx_tx(ctx)" COLUMN_NUMBER=33 METHOD_FULL_NAME="<operator>.assignment" LINE_NUMBER=109 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.assignment"]
  1010 [label=LOCAL ORDER=2 CODE="long unsigned flags" COLUMN_NUMBER=16 LINE_NUMBER=90 TYPE_FULL_NAME="long unsigned" NAME="flags"]
  1044 [label=CALL ORDER=1 ARGUMENT_INDEX=1 CODE="ctx->refcount" COLUMN_NUMBER=25 METHOD_FULL_NAME="<operator>.indirectFieldAccess" LINE_NUMBER=105 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.indirectFieldAccess"]
  1040 [label=FIELD_IDENTIFIER ORDER=2 ARGUMENT_INDEX=2 CODE="netdev" COLUMN_NUMBER=37 LINE_NUMBER=104 CANONICAL_NAME="netdev"]
  1065 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="destruct_wq" COLUMN_NUMBER=14 LINE_NUMBER=114 TYPE_FULL_NAME="ANY" NAME="destruct_wq"]
  1063 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="ctx" COLUMN_NUMBER=67 LINE_NUMBER=109 TYPE_FULL_NAME="tls_context*" NAME="ctx"]
  1007 [label=METHOD_PARAMETER_IN ORDER=1 CODE="struct tls_context *ctx" IS_VARIADIC=false COLUMN_NUMBER=46 LINE_NUMBER=87 TYPE_FULL_NAME="tls_context*" EVALUATION_STRATEGY="BY_VALUE" INDEX=1 NAME="ctx"]
  1070 [label=CALL ORDER=10 ARGUMENT_INDEX=-1 CODE="spin_unlock_irqrestore(&tls_device_lock, flags)" COLUMN_NUMBER=2 METHOD_FULL_NAME="spin_unlock_irqrestore" LINE_NUMBER=116 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="spin_unlock_irqrestore"]
  1022 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="ctx" COLUMN_NUMBER=39 LINE_NUMBER=94 TYPE_FULL_NAME="tls_context*" NAME="ctx"]
  1075 [label=CALL ORDER=1 ARGUMENT_INDEX=-1 CODE="!async_cleanup" COLUMN_NUMBER=6 METHOD_FULL_NAME="<operator>.logicalNot" LINE_NUMBER=118 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.logicalNot"]
  1045 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="ctx" COLUMN_NUMBER=25 LINE_NUMBER=105 TYPE_FULL_NAME="tls_context*" NAME="ctx"]
  1066 [label=CALL ORDER=2 ARGUMENT_INDEX=2 CODE="&offload_ctx->destruct_work" COLUMN_NUMBER=27 METHOD_FULL_NAME="<operator>.addressOf" LINE_NUMBER=114 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.addressOf"]
  1025 [label=CALL ORDER=1 ARGUMENT_INDEX=-1 CODE="spin_unlock_irqrestore(&tls_device_lock, flags)" COLUMN_NUMBER=3 METHOD_FULL_NAME="spin_unlock_irqrestore" LINE_NUMBER=95 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="spin_unlock_irqrestore"]
  1049 [label=CALL ORDER=2 ARGUMENT_INDEX=2 CODE="netdev && ctx->tx_conf == TLS_HW" COLUMN_NUMBER=18 METHOD_FULL_NAME="<operator>.logicalAnd" LINE_NUMBER=107 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.logicalAnd"]
  1061 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="offload_ctx" COLUMN_NUMBER=34 LINE_NUMBER=109 TYPE_FULL_NAME="tls_offload_context_tx*" NAME="offload_ctx"]
  1011 [label=LOCAL ORDER=3 CODE="bool async_cleanup" COLUMN_NUMBER=7 LINE_NUMBER=91 TYPE_FULL_NAME="bool" NAME="async_cleanup"]
  1058 [label=BLOCK ORDER=2 ARGUMENT_INDEX=-1 CODE="{
		struct tls_offload_context_tx *offload_ctx = tls_offload_ctx_tx(ctx);

		/* queue_work inside the spinlock
		 * to make sure tls_device_down waits for that work.
		 */
		queue_work(destruct_wq, &offload_ctx->destruct_work);
	}" COLUMN_NUMBER=21 LINE_NUMBER=108 TYPE_FULL_NAME="void"]
  1038 [label=CALL ORDER=1 ARGUMENT_INDEX=1 CODE="ctx->netdev" COLUMN_NUMBER=37 METHOD_FULL_NAME="<operator>.indirectFieldAccess" LINE_NUMBER=104 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.indirectFieldAccess"]
  1024 [label=BLOCK ORDER=2 ARGUMENT_INDEX=-1 CODE="{
		spin_unlock_irqrestore(&tls_device_lock, flags);
		return;
	}" COLUMN_NUMBER=56 LINE_NUMBER=94 TYPE_FULL_NAME="void"]
  1014 [label=IDENTIFIER ORDER=1 ARGUMENT_INDEX=1 CODE="tls_device_lock" COLUMN_NUMBER=21 LINE_NUMBER=93 TYPE_FULL_NAME="ANY" NAME="tls_device_lock"]
  1047 [label=CALL ORDER=8 ARGUMENT_INDEX=-1 CODE="async_cleanup = netdev && ctx->tx_conf == TLS_HW" COLUMN_NUMBER=2 METHOD_FULL_NAME="<operator>.assignment" LINE_NUMBER=107 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="<operator>.assignment"]
  1064 [label=CALL ORDER=3 ARGUMENT_INDEX=-1 CODE="queue_work(destruct_wq, &offload_ctx->destruct_work)" COLUMN_NUMBER=3 METHOD_FULL_NAME="queue_work" LINE_NUMBER=114 TYPE_FULL_NAME="<empty>" DISPATCH_TYPE="STATIC_DISPATCH" SIGNATURE="" NAME="queue_work"]
  1015 [label=IDENTIFIER ORDER=2 ARGUMENT_INDEX=2 CODE="flags" COLUMN_NUMBER=38 LINE_NUMBER=93 TYPE_FULL_NAME="long unsigned" NAME="flags"]
  1061 -> 1060 [label=REACHING_DEF VARIABLE="offload_ctx"]
  1080 -> 1029 [label=POST_DOMINATE ]
  1031 -> 1032 [label=AST ]
  1075 -> 1079 [label=DOMINATE ]
  1047 -> 1048 [label=AST ]
  1006 -> 1039 [label=CONTAINS ]
  1007 -> 1063 [label=REACHING_DEF VARIABLE="ctx"]
  1050 -> 1052 [label=CDG ]
  1047 -> 1048 [label=ARGUMENT ]
  1007 -> 21284 [label=PARAMETER_LINK ]
  1041 -> 1037 [label=REACHING_DEF VARIABLE="!refcount_read(&ctx->refcount)"]
  1051 -> 1052 [label=ARGUMENT ]
  1043 -> 1044 [label=POST_DOMINATE ]
  1008 -> 1009 [label=AST ]
  1049 -> 1051 [label=POST_DOMINATE ]
  1044 -> 1053 [label=REACHING_DEF VARIABLE="ctx->refcount"]
  1037 -> 1038 [label=ARGUMENT ]
  1017 -> 1071 [label=CDG ]
  1006 -> 1007 [label=REACHING_DEF VARIABLE=""]
  1018 -> 1017 [label=REACHING_DEF VARIABLE="!refcount_dec_and_test(&ctx->refcount)"]
  1038 -> 1040 [label=ARGUMENT ]
  1031 -> 1032 [label=ARGUMENT ]
  1008 -> 1012 [label=AST ]
  1035 -> 1036 [label=ARGUMENT ]
  1006 -> 1048 [label=CONTAINS ]
  1017 -> 1028 [label=CDG ]
  1078 -> 1080 [label=CFG ]
  1052 -> 1054 [label=AST ]
  1022 -> 1007 [label=REF ]
  1051 -> 1049 [label=REACHING_DEF VARIABLE="ctx->tx_conf == TLS_HW"]
  1006 -> 1049 [label=CONTAINS ]
  1008 -> 1010 [label=AST ]
  1017 -> 1033 [label=CFG ]
  1033 -> 1034 [label=CFG ]
  1025 -> 1080 [label=REACHING_DEF VARIABLE="spin_unlock_irqrestore(&tls_device_lock, flags)"]
  1017 -> 1027 [label=DOMINATE ]
  1006 -> 1045 [label=CONTAINS ]
  1041 -> 1037 [label=DOMINATE ]
  1006 -> 1061 [label=CONTAINS ]
  1038 -> 1037 [label=REACHING_DEF VARIABLE="ctx->netdev"]
  1007 -> 1038 [label=REACHING_DEF VARIABLE="ctx"]
  1013 -> 1027 [label=REACHING_DEF VARIABLE="&tls_device_lock"]
  1006 -> 1053 [label=CONTAINS ]
  1052 -> 1055 [label=CFG ]
  1043 -> 1042 [label=DOMINATE ]
  1006 -> 1014 [label=DOMINATE ]
  1057 -> 1066 [label=CDG ]
  1071 -> 1073 [label=CFG ]
  1057 -> 1068 [label=CDG ]
  1070 -> 1073 [label=POST_DOMINATE ]
  1055 -> 1052 [label=POST_DOMINATE ]
  1013 -> 1014 [label=AST ]
  1044 -> 1045 [label=AST ]
  1051 -> 1055 [label=ARGUMENT ]
  1067 -> 1068 [label=ARGUMENT ]
  1006 -> 1076 [label=CONTAINS ]
  1055 -> 1051 [label=DOMINATE ]
  1026 -> 1080 [label=REACHING_DEF VARIABLE="&tls_device_lock"]
  1012 -> 1015 [label=ARGUMENT ]
  1006 -> 1069 [label=CONTAINS ]
  1006 -> 1007 [label=AST ]
  1008 -> 1030 [label=AST ]
  1017 -> 1035 [label=CDG ]
  1006 -> 1063 [label=CONTAINS ]
  1033 -> 1034 [label=DOMINATE ]
  1017 -> 1018 [label=ARGUMENT ]
  1046 -> 1045 [label=POST_DOMINATE ]
  1006 -> 1033 [label=CONTAINS ]
  1062 -> 1063 [label=POST_DOMINATE ]
  1006 -> 1076 [label=REACHING_DEF VARIABLE=""]
  1014 -> 1072 [label=REACHING_DEF VARIABLE="tls_device_lock"]
  1006 -> 1030 [label=CONTAINS ]
  1030 -> 1036 [label=DOMINATE ]
  1006 -> 1019 [label=CONTAINS ]
  1050 -> 1051 [label=REACHING_DEF VARIABLE="netdev"]
  1030 -> 1031 [label=POST_DOMINATE ]
  1006 -> 1023 [label=CONTAINS ]
  1078 -> 1079 [label=ARGUMENT ]
  1021 -> 1023 [label=POST_DOMINATE ]
  1006 -> 1027 [label=CONTAINS ]
  1017 -> 1040 [label=CDG ]
  1060 -> 1062 [label=ARGUMENT ]
  1020 -> 1021 [label=AST ]
  1024 -> 1025 [label=AST ]
  1007 -> 1053 [label=REACHING_DEF VARIABLE="ctx"]
  1045 -> 1038 [label=POST_DOMINATE ]
  1019 -> 1020 [label=POST_DOMINATE ]
  1006 -> 1050 [label=REACHING_DEF VARIABLE=""]
  1017 -> 1048 [label=CDG ]
  1006 -> 1022 [label=REACHING_DEF VARIABLE=""]
  1006 -> 1053 [label=REACHING_DEF VARIABLE=""]
  1028 -> 1026 [label=REACHING_DEF VARIABLE="flags"]
  1055 -> 1080 [label=REACHING_DEF VARIABLE="TLS_HW"]
  1012 -> 1013 [label=AST ]
  1070 -> 1071 [label=AST ]
  1042 -> 1043 [label=ARGUMENT ]
  1021 -> 1039 [label=REACHING_DEF VARIABLE="ctx->refcount"]
  1013 -> 1015 [label=REACHING_DEF VARIABLE="&tls_device_lock"]
  1017 -> 1038 [label=CDG ]
  1017 -> 1049 [label=CDG ]
  1046 -> 1044 [label=DOMINATE ]
  1006 -> 1066 [label=CONTAINS ]
  1049 -> 1047 [label=CFG ]
  1020 -> 1019 [label=DOMINATE ]
  1019 -> 1080 [label=REACHING_DEF VARIABLE="refcount_dec_and_test(&ctx->refcount)"]
  1050 -> 1053 [label=CDG ]
  1049 -> 1047 [label=REACHING_DEF VARIABLE="netdev && ctx->tx_conf == TLS_HW"]
  1008 -> 1074 [label=AST ]
  1017 -> 1073 [label=CDG ]
  1006 -> 1014 [label=REACHING_DEF VARIABLE=""]
  1047 -> 1057 [label=CFG ]
  1008 -> 1016 [label=AST ]
  1057 -> 1061 [label=CFG ]
  1021 -> 1020 [label=CFG ]
  1038 -> 1063 [label=REACHING_DEF VARIABLE="ctx->netdev"]
  1073 -> 1070 [label=REACHING_DEF VARIABLE="flags"]
  1056 -> 1057 [label=CONDITION ]
  1063 -> 1079 [label=REACHING_DEF VARIABLE="ctx"]
  1032 -> 1063 [label=REACHING_DEF VARIABLE="ctx->list"]
  1063 -> 1062 [label=REACHING_DEF VARIABLE="ctx"]
  1057 -> 1047 [label=POST_DOMINATE ]
  1055 -> 1051 [label=CFG ]
  1066 -> 1064 [label=CFG ]
  1006 -> 1072 [label=CONTAINS ]
  1006 -> 1036 [label=CONTAINS ]
  1044 -> 1045 [label=ARGUMENT ]
  1032 -> 1079 [label=REACHING_DEF VARIABLE="ctx->list"]
  1050 -> 1055 [label=CDG ]
  1006 -> 1018 [label=CONTAINS ]
  1070 -> 1076 [label=DOMINATE ]
  1017 -> 1036 [label=CDG ]
  1044 -> 1046 [label=ARGUMENT ]
  1017 -> 1043 [label=CDG ]
  1006 -> 1046 [label=CONTAINS ]
  1034 -> 1032 [label=CFG ]
  1006 -> 1072 [label=REACHING_DEF VARIABLE=""]
  1043 -> 1042 [label=CFG ]
  1006 -> 1028 [label=REACHING_DEF VARIABLE=""]
  1007 -> 1080 [label=REACHING_DEF VARIABLE="ctx"]
  1038 -> 1079 [label=REACHING_DEF VARIABLE="ctx->netdev"]
  1061 -> 1068 [label=REACHING_DEF VARIABLE="offload_ctx"]
  1006 -> 1064 [label=CONTAINS ]
  1045 -> 1046 [label=DOMINATE ]
  1073 -> 1071 [label=POST_DOMINATE ]
  1026 -> 1028 [label=CFG ]
  1036 -> 1009 [label=REF ]
  1052 -> 1051 [label=REACHING_DEF VARIABLE="ctx->tx_conf"]
  1012 -> 1022 [label=DOMINATE ]
  1067 -> 1069 [label=POST_DOMINATE ]
  1075 -> 1079 [label=CDG ]
  1044 -> 1043 [label=REACHING_DEF VARIABLE="ctx->refcount"]
  1044 -> 1043 [label=REACHING_DEF VARIABLE="ctx->refcount"]
  1006 -> 1060 [label=CONTAINS ]
  1051 -> 1052 [label=AST ]
  1049 -> 1050 [label=ARGUMENT ]
  1034 -> 1032 [label=DOMINATE ]
  1030 -> 1031 [label=ARGUMENT ]
  1072 -> 1071 [label=CFG ]
  1008 -> 1047 [label=AST ]
  1008 -> 1011 [label=AST ]
  1035 -> 1036 [label=AST ]
  1065 -> 1068 [label=DOMINATE ]
  1006 -> 1058 [label=CONTAINS ]
  1067 -> 1068 [label=AST ]
  1006 -> 1015 [label=REACHING_DEF VARIABLE=""]
  1017 -> 1046 [label=CDG ]
  1057 -> 1061 [label=DOMINATE ]
  1006 -> 1039 [label=REACHING_DEF VARIABLE=""]
  1076 -> 1011 [label=REF ]
  1044 -> 1079 [label=REACHING_DEF VARIABLE="ctx->refcount"]
  1047 -> 1049 [label=AST ]
  1073 -> 1010 [label=REF ]
  1006 -> 1080 [label=AST ]
  1066 -> 1064 [label=DOMINATE ]
  1021 -> 1045 [label=REACHING_DEF VARIABLE="ctx->refcount"]
  1028 -> 1025 [label=REACHING_DEF VARIABLE="flags"]
  1017 -> 1027 [label=CDG ]
  1006 -> 1029 [label=REACHING_DEF VARIABLE=""]
  1053 -> 1007 [label=REF ]
  1037 -> 1036 [label=REACHING_DEF VARIABLE="rcu_dereference_protected(ctx->netdev,
					   !refcount_read(&ctx->refcount))"]
  1021 -> 1080 [label=REACHING_DEF VARIABLE="ctx->refcount"]
  1052 -> 1079 [label=REACHING_DEF VARIABLE="ctx->tx_conf"]
  1015 -> 1013 [label=POST_DOMINATE ]
  1019 -> 1020 [label=AST ]
  1032 -> 1045 [label=REACHING_DEF VARIABLE="ctx->list"]
  1017 -> 1076 [label=CDG ]
  1013 -> 1014 [label=POST_DOMINATE ]
  1027 -> 1026 [label=CFG ]
  1017 -> 1032 [label=CDG ]
  1068 -> 1069 [label=DOMINATE ]
  1017 -> 1018 [label=AST ]
  1054 -> 1053 [label=POST_DOMINATE ]
  1012 -> 1013 [label=ARGUMENT ]
  1006 -> 1056 [label=CONTAINS ]
  1016 -> 1024 [label=AST ]
  1052 -> 1055 [label=DOMINATE ]
  1044 -> 1063 [label=REACHING_DEF VARIABLE="ctx->refcount"]
  1035 -> 1048 [label=DOMINATE ]
  1060 -> 1065 [label=CFG ]
  1028 -> 1025 [label=DOMINATE ]
  1008 -> 1056 [label=AST ]
  1047 -> 1057 [label=DOMINATE ]
  1038 -> 1040 [label=AST ]
  1014 -> 1027 [label=REACHING_DEF VARIABLE="tls_device_lock"]
  1025 -> 1026 [label=AST ]
  1019 -> 1018 [label=CFG ]
  1040 -> 1038 [label=DOMINATE ]
  1060 -> 1062 [label=POST_DOMINATE ]
  1027 -> 1080 [label=REACHING_DEF VARIABLE="tls_device_lock"]
  1062 -> 1063 [label=ARGUMENT ]
  1049 -> 1048 [label=REACHING_DEF VARIABLE="netdev && ctx->tx_conf == TLS_HW"]
  1007 -> 1022 [label=REACHING_DEF VARIABLE="ctx"]
  1015 -> 1012 [label=CFG ]
  1022 -> 1023 [label=CFG ]
  1068 -> 1065 [label=POST_DOMINATE ]
  1054 -> 1052 [label=DOMINATE ]
  1013 -> 1026 [label=REACHING_DEF VARIABLE="&tls_device_lock"]
  1066 -> 1067 [label=POST_DOMINATE ]
  1025 -> 1029 [label=DOMINATE ]
  1048 -> 1050 [label=DOMINATE ]
  1032 -> 1031 [label=CFG ]
  1006 -> 1038 [label=CONTAINS ]
  1006 -> 1050 [label=CONTAINS ]
  1006 -> 1029 [label=CONTAINS ]
  1048 -> 1050 [label=CFG ]
  1012 -> 1015 [label=AST ]
  1057 -> 1065 [label=CDG ]
  1021 -> 1063 [label=REACHING_DEF VARIABLE="ctx->refcount"]
  1047 -> 1049 [label=POST_DOMINATE ]
  1035 -> 1048 [label=CFG ]
  1043 -> 1042 [label=REACHING_DEF VARIABLE="&ctx->refcount"]
  1006 -> 1035 [label=CONTAINS ]
  1041 -> 1042 [label=AST ]
  1020 -> 1019 [label=REACHING_DEF VARIABLE="&ctx->refcount"]
  1064 -> 1066 [label=AST ]
  1019 -> 1020 [label=ARGUMENT ]
  1022 -> 1023 [label=DOMINATE ]
  1017 -> 1075 [label=CDG ]
  1017 -> 1037 [label=CDG ]
  1026 -> 1028 [label=DOMINATE ]
  1040 -> 1038 [label=CFG ]
  1021 -> 1053 [label=REACHING_DEF VARIABLE="ctx->refcount"]
  1050 -> 1048 [label=POST_DOMINATE ]
  1015 -> 1013 [label=REACHING_DEF VARIABLE="flags"]
  1006 -> 1074 [label=CONTAINS ]
  1063 -> 1061 [label=POST_DOMINATE ]
  1055 -> 1052 [label=REACHING_DEF VARIABLE="TLS_HW"]
  1076 -> 1075 [label=DOMINATE ]
  1021 -> 1043 [label=REACHING_DEF VARIABLE="ctx->refcount"]
  1042 -> 1041 [label=CFG ]
  1031 -> 1030 [label=DOMINATE ]
  1007 -> 1021 [label=REACHING_DEF VARIABLE="ctx"]
  1064 -> 1072 [label=CFG ]
  1006 -> 1055 [label=REACHING_DEF VARIABLE=""]
  1049 -> 1050 [label=AST ]
  1037 -> 1041 [label=AST ]
  1006 -> 1041 [label=CONTAINS ]
  1006 -> 1068 [label=CONTAINS ]
  1032 -> 1039 [label=REACHING_DEF VARIABLE="ctx->list"]
  1027 -> 1026 [label=REACHING_DEF VARIABLE="tls_device_lock"]
  1043 -> 1044 [label=AST ]
  1013 -> 1071 [label=REACHING_DEF VARIABLE="&tls_device_lock"]
  1064 -> 1066 [label=POST_DOMINATE ]
  1057 -> 1060 [label=CDG ]
  1013 -> 1014 [label=ARGUMENT ]
  1078 -> 1079 [label=POST_DOMINATE ]
  1032 -> 1031 [label=REACHING_DEF VARIABLE="ctx->list"]
  1032 -> 1031 [label=REACHING_DEF VARIABLE="ctx->list"]
  1006 -> 1040 [label=CONTAINS ]
  1075 -> 1076 [label=AST ]
  1006 -> 1014 [label=CONTAINS ]
  1006 -> 1054 [label=CONTAINS ]
  1006 -> 1014 [label=CFG ]
  1017 -> 1031 [label=CDG ]
  1006 -> 1015 [label=CONTAINS ]
  1017 -> 1039 [label=CDG ]
  1014 -> 1013 [label=CFG ]
  1063 -> 1062 [label=DOMINATE ]
  1017 -> 1018 [label=POST_DOMINATE ]
  1071 -> 1072 [label=AST ]
  1006 -> 1025 [label=CONTAINS ]
  1072 -> 1057 [label=POST_DOMINATE ]
  1021 -> 21284 [label=REACHING_DEF VARIABLE="ctx->refcount"]
  1022 -> 1012 [label=POST_DOMINATE ]
  1068 -> 1069 [label=CFG ]
  1008 -> 1070 [label=AST ]
  1032 -> 1031 [label=DOMINATE ]
  1037 -> 1038 [label=AST ]
  1057 -> 1062 [label=CDG ]
  1006 -> 1057 [label=REACHING_DEF VARIABLE=""]
  1072 -> 1064 [label=POST_DOMINATE ]
  1076 -> 1075 [label=CFG ]
  1017 -> 1070 [label=CDG ]
  1051 -> 1055 [label=POST_DOMINATE ]
  1061 -> 1067 [label=REACHING_DEF VARIABLE="offload_ctx"]
  1030 -> 1031 [label=AST ]
  1017 -> 1044 [label=CDG ]
  1007 -> 1033 [label=REACHING_DEF VARIABLE="ctx"]
  1028 -> 1025 [label=CFG ]
  1015 -> 1073 [label=REACHING_DEF VARIABLE="flags"]
  1025 -> 1028 [label=AST ]
  1006 -> 1070 [label=CONTAINS ]
  1006 -> 1079 [label=CONTAINS ]
  1038 -> 1045 [label=CFG ]
  1032 -> 1034 [label=AST ]
  1042 -> 1043 [label=POST_DOMINATE ]
  1006 -> 1016 [label=CONTAINS ]
  1012 -> 1015 [label=POST_DOMINATE ]
  1053 -> 1054 [label=DOMINATE ]
  1017 -> 1047 [label=CDG ]
  1020 -> 1019 [label=CFG ]
  1051 -> 1055 [label=AST ]
  1057 -> 1011 [label=REF ]
  1017 -> 1080 [label=REACHING_DEF VARIABLE="unlikely(!refcount_dec_and_test(&ctx->refcount))"]
  1079 -> 1078 [label=REACHING_DEF VARIABLE="ctx"]
  1052 -> 1054 [label=POST_DOMINATE ]
  1057 -> 1069 [label=CDG ]
  1035 -> 1037 [label=POST_DOMINATE ]
  1032 -> 1034 [label=POST_DOMINATE ]
  1032 -> 1053 [label=REACHING_DEF VARIABLE="ctx->list"]
  1073 -> 1070 [label=DOMINATE ]
  1006 -> 1073 [label=CONTAINS ]
  1021 -> 1022 [label=AST ]
  1021 -> 1023 [label=ARGUMENT ]
  1042 -> 1041 [label=REACHING_DEF VARIABLE="refcount_read(&ctx->refcount)"]
  1025 -> 1028 [label=POST_DOMINATE ]
  1008 -> 1035 [label=AST ]
  1006 -> 1065 [label=CONTAINS ]
  1038 -> 1045 [label=DOMINATE ]
  1031 -> 1032 [label=POST_DOMINATE ]
  1038 -> 1040 [label=POST_DOMINATE ]
  1026 -> 1025 [label=REACHING_DEF VARIABLE="&tls_device_lock"]
  1019 -> 1018 [label=DOMINATE ]
  1050 -> 1049 [label=CFG ]
  1020 -> 1021 [label=ARGUMENT ]
  1049 -> 1047 [label=DOMINATE ]
  1027 -> 1026 [label=DOMINATE ]
  1026 -> 1027 [label=POST_DOMINATE ]
  1080 -> 1078 [label=POST_DOMINATE ]
  1006 -> 1043 [label=CONTAINS ]
  1037 -> 1035 [label=DOMINATE ]
  1036 -> 1039 [label=CFG ]
  1014 -> 1013 [label=DOMINATE ]
  1064 -> 1065 [label=AST ]
  1041 -> 1037 [label=CFG ]
  1018 -> 1019 [label=ARGUMENT ]
  1006 -> 1077 [label=CONTAINS ]
  1066 -> 1064 [label=REACHING_DEF VARIABLE="&offload_ctx->destruct_work"]
  1058 -> 1060 [label=AST ]
  1039 -> 1036 [label=POST_DOMINATE ]
  1044 -> 1043 [label=CFG ]
  1069 -> 1068 [label=POST_DOMINATE ]
  1075 -> 1076 [label=ARGUMENT ]
  1006 -> 1020 [label=CONTAINS ]
  1072 -> 1071 [label=REACHING_DEF VARIABLE="tls_device_lock"]
  1051 -> 1050 [label=REACHING_DEF VARIABLE="ctx->tx_conf == TLS_HW"]
  1024 -> 1029 [label=AST ]
  1006 -> 1063 [label=REACHING_DEF VARIABLE=""]
  1006 -> 1065 [label=REACHING_DEF VARIABLE=""]
  1067 -> 1066 [label=DOMINATE ]
  1064 -> 1066 [label=ARGUMENT ]
  1051 -> 1049 [label=CFG ]
  1017 -> 1057 [label=CDG ]
  1065 -> 1068 [label=CFG ]
  1006 -> 1062 [label=CONTAINS ]
  1014 -> 1013 [label=REACHING_DEF VARIABLE="tls_device_lock"]
  1017 -> 1034 [label=CDG ]
  1046 -> 1044 [label=CFG ]
  1017 -> 1045 [label=CDG ]
  1049 -> 1051 [label=ARGUMENT ]
  1016 -> 1017 [label=AST ]
  1050 -> 1051 [label=CDG ]
  1021 -> 1020 [label=DOMINATE ]
  1026 -> 1027 [label=ARGUMENT ]
  1016 -> 1017 [label=CONDITION ]
  1075 -> 1079 [label=CFG ]
  1017 -> 1080 [label=DOMINATE ]
  1079 -> 1078 [label=DOMINATE ]
  1006 -> 1028 [label=CONTAINS ]
  1047 -> 1049 [label=ARGUMENT ]
  1070 -> 1073 [label=ARGUMENT ]
  1056 -> 1058 [label=AST ]
  1076 -> 1070 [label=POST_DOMINATE ]
  1007 -> 1045 [label=REACHING_DEF VARIABLE="ctx"]
  1050 -> 1009 [label=REF ]
  1062 -> 1060 [label=CFG ]
  1017 -> 1026 [label=CDG ]
  1050 -> 1053 [label=CFG ]
  1023 -> 1021 [label=DOMINATE ]
  1041 -> 1038 [label=REACHING_DEF VARIABLE="!refcount_read(&ctx->refcount)"]
  1039 -> 1040 [label=CFG ]
  1006 -> 1012 [label=CONTAINS ]
  1054 -> 1052 [label=CFG ]
  1048 -> 1076 [label=REACHING_DEF VARIABLE="async_cleanup"]
  1015 -> 1012 [label=REACHING_DEF VARIABLE="flags"]
  1042 -> 1041 [label=DOMINATE ]
  1017 -> 1050 [label=CDG ]
  1062 -> 1061 [label=REACHING_DEF VARIABLE="tls_offload_ctx_tx(ctx)"]
  1057 -> 1072 [label=CFG ]
  1028 -> 1010 [label=REF ]
  1029 -> 1025 [label=POST_DOMINATE ]
  1049 -> 1050 [label=POST_DOMINATE ]
  1037 -> 1041 [label=POST_DOMINATE ]
  1057 -> 1061 [label=CDG ]
  1006 -> 1032 [label=CONTAINS ]
  1013 -> 1072 [label=REACHING_DEF VARIABLE="&tls_device_lock"]
  1036 -> 1039 [label=DOMINATE ]
  1029 -> 1080 [label=REACHING_DEF VARIABLE="<RET>"]
  1069 -> 1067 [label=DOMINATE ]
  1006 -> 1079 [label=REACHING_DEF VARIABLE=""]
  1065 -> 1066 [label=REACHING_DEF VARIABLE="destruct_wq"]
  1017 -> 1072 [label=CDG ]
  1006 -> 1034 [label=CONTAINS ]
  1071 -> 1073 [label=DOMINATE ]
  1038 -> 1053 [label=REACHING_DEF VARIABLE="ctx->netdev"]
  1032 -> 1033 [label=ARGUMENT ]
  1070 -> 1073 [label=AST ]
  1032 -> 1034 [label=ARGUMENT ]
  1017 -> 1041 [label=CDG ]
  1071 -> 1073 [label=REACHING_DEF VARIABLE="&tls_device_lock"]
  1075 -> 1080 [label=CFG ]
  1017 -> 1029 [label=CDG ]
  1037 -> 1035 [label=REACHING_DEF VARIABLE="rcu_dereference_protected(ctx->netdev,
					   !refcount_read(&ctx->refcount))"]
  1013 -> 1015 [label=CFG ]
  1007 -> 1052 [label=REACHING_DEF VARIABLE="ctx"]
  1048 -> 1011 [label=REF ]
  1041 -> 1042 [label=ARGUMENT ]
  1006 -> 1017 [label=CONTAINS ]
  1006 -> 1044 [label=CONTAINS ]
  1006 -> 1047 [label=CONTAINS ]
  1017 -> 1033 [label=DOMINATE ]
  1021 -> 1033 [label=REACHING_DEF VARIABLE="ctx->refcount"]
  1067 -> 1066 [label=CFG ]
  1007 -> 1039 [label=REACHING_DEF VARIABLE="ctx"]
  1065 -> 1060 [label=POST_DOMINATE ]
  1049 -> 1051 [label=AST ]
  1060 -> 1062 [label=AST ]
  1026 -> 1028 [label=REACHING_DEF VARIABLE="&tls_device_lock"]
  1073 -> 1071 [label=REACHING_DEF VARIABLE="flags"]
  1006 -> 1057 [label=CONTAINS ]
  1037 -> 1041 [label=ARGUMENT ]
  1045 -> 1046 [label=CFG ]
  1043 -> 1044 [label=ARGUMENT ]
  1018 -> 1019 [label=AST ]
  1037 -> 1035 [label=CFG ]
  1053 -> 1054 [label=CFG ]
  1026 -> 1027 [label=AST ]
  1061 -> 1063 [label=CFG ]
  1044 -> 1046 [label=AST ]
  1029 -> 1080 [label=CFG ]
  1032 -> 1033 [label=AST ]
  1021 -> 1023 [label=AST ]
  1006 -> 1022 [label=CONTAINS ]
  1045 -> 1007 [label=REF ]
  1063 -> 1062 [label=CFG ]
  1074 -> 1075 [label=AST ]
  1041 -> 1042 [label=POST_DOMINATE ]
  1006 -> 1045 [label=REACHING_DEF VARIABLE=""]
  1050 -> 1053 [label=DOMINATE ]
  1014 -> 1006 [label=POST_DOMINATE ]
  1023 -> 1022 [label=POST_DOMINATE ]
  1015 -> 1012 [label=DOMINATE ]
  1044 -> 1046 [label=POST_DOMINATE ]
  1006 -> 1008 [label=AST ]
  1038 -> 1039 [label=ARGUMENT ]
  1006 -> 1027 [label=REACHING_DEF VARIABLE=""]
  1006 -> 1026 [label=CONTAINS ]
  1035 -> 1037 [label=ARGUMENT ]
  1018 -> 1017 [label=DOMINATE ]
  1023 -> 1021 [label=CFG ]
  1070 -> 1071 [label=ARGUMENT ]
  1066 -> 1067 [label=ARGUMENT ]
  1036 -> 1035 [label=REACHING_DEF VARIABLE="netdev"]
  1006 -> 1033 [label=REACHING_DEF VARIABLE=""]
  1006 -> 1071 [label=CONTAINS ]
  1006 -> 1052 [label=CONTAINS ]
  1019 -> 1018 [label=REACHING_DEF VARIABLE="refcount_dec_and_test(&ctx->refcount)"]
  1048 -> 1035 [label=POST_DOMINATE ]
  1006 -> 1078 [label=CONTAINS ]
  1020 -> 1021 [label=POST_DOMINATE ]
  1038 -> 1041 [label=REACHING_DEF VARIABLE="ctx->netdev"]
  1050 -> 1054 [label=CDG ]
  1055 -> 1051 [label=REACHING_DEF VARIABLE="TLS_HW"]
  1012 -> 1022 [label=CFG ]
  1039 -> 1007 [label=REF ]
  1006 -> 1021 [label=CONTAINS ]
  1031 -> 1030 [label=CFG ]
  1020 -> 1043 [label=REACHING_DEF VARIABLE="&ctx->refcount"]
  1034 -> 1033 [label=POST_DOMINATE ]
  1078 -> 1079 [label=AST ]
  1006 -> 1042 [label=CONTAINS ]
  1071 -> 1072 [label=ARGUMENT ]
  1021 -> 1044 [label=REACHING_DEF VARIABLE="ctx->refcount"]
  1025 -> 1028 [label=ARGUMENT ]
  1050 -> 1049 [label=REACHING_DEF VARIABLE="netdev"]
  1058 -> 1059 [label=AST ]
  1057 -> 1063 [label=CDG ]
  1074 -> 1075 [label=CONDITION ]
  1018 -> 1017 [label=CFG ]
  1017 -> 1033 [label=CDG ]
  1079 -> 1078 [label=CFG ]
  1025 -> 1026 [label=ARGUMENT ]
  1052 -> 1063 [label=REACHING_DEF VARIABLE="ctx->tx_conf"]
  1006 -> 1055 [label=CONTAINS ]
  1028 -> 1026 [label=POST_DOMINATE ]
  1065 -> 1080 [label=REACHING_DEF VARIABLE="destruct_wq"]
  1036 -> 1050 [label=REACHING_DEF VARIABLE="netdev"]
  1065 -> 1064 [label=REACHING_DEF VARIABLE="destruct_wq"]
  1080 -> 1075 [label=POST_DOMINATE ]
  1007 -> 1079 [label=REACHING_DEF VARIABLE="ctx"]
  1036 -> 1030 [label=POST_DOMINATE ]
  1057 -> 1067 [label=CDG ]
  1006 -> 1013 [label=CONTAINS ]
  1079 -> 1007 [label=REF ]
  1062 -> 1060 [label=DOMINATE ]
  1067 -> 1069 [label=AST ]
  1077 -> 1078 [label=AST ]
  1021 -> 1079 [label=REACHING_DEF VARIABLE="ctx->refcount"]
  1017 -> 1030 [label=CDG ]
  1063 -> 1007 [label=REF ]
  1072 -> 1071 [label=DOMINATE ]
  1040 -> 1039 [label=POST_DOMINATE ]
  1069 -> 1067 [label=CFG ]
  1074 -> 1077 [label=AST ]
  1035 -> 1037 [label=AST ]
  1025 -> 1029 [label=CFG ]
  1006 -> 1067 [label=CONTAINS ]
  1050 -> 1049 [label=DOMINATE ]
  1044 -> 1043 [label=DOMINATE ]
  1020 -> 1044 [label=REACHING_DEF VARIABLE="&ctx->refcount"]
  1033 -> 1007 [label=REF ]
  1076 -> 1075 [label=REACHING_DEF VARIABLE="async_cleanup"]
  1006 -> 1073 [label=REACHING_DEF VARIABLE=""]
  1071 -> 1072 [label=POST_DOMINATE ]
  1013 -> 1015 [label=DOMINATE ]
  1015 -> 1010 [label=REF ]
  1061 -> 1059 [label=REF ]
  1061 -> 1063 [label=DOMINATE ]
  1007 -> 1032 [label=REACHING_DEF VARIABLE="ctx"]
  1007 -> 21284 [label=REACHING_DEF VARIABLE="ctx"]
  1007 -> 21284 [label=REACHING_DEF VARIABLE="ctx"]
  1075 -> 1076 [label=POST_DOMINATE ]
  1057 -> 1064 [label=CDG ]
  1007 -> 1044 [label=REACHING_DEF VARIABLE="ctx"]
  1006 -> 1075 [label=CONTAINS ]
  1006 -> 1031 [label=CONTAINS ]
  1058 -> 1064 [label=AST ]
  1039 -> 1040 [label=DOMINATE ]
  1073 -> 1070 [label=CFG ]
  1006 -> 1037 [label=CONTAINS ]
  1060 -> 1065 [label=DOMINATE ]
  1015 -> 1028 [label=REACHING_DEF VARIABLE="flags"]
  1071 -> 1070 [label=REACHING_DEF VARIABLE="&tls_device_lock"]
  1028 -> 1080 [label=REACHING_DEF VARIABLE="flags"]
  1013 -> 1012 [label=REACHING_DEF VARIABLE="&tls_device_lock"]
  1017 -> 1042 [label=CDG ]
  1060 -> 1061 [label=ARGUMENT ]
  1075 -> 1078 [label=CDG ]
  1080 -> 1017 [label=POST_DOMINATE ]
  1018 -> 1019 [label=POST_DOMINATE ]
  1012 -> 1080 [label=REACHING_DEF VARIABLE="spin_lock_irqsave(&tls_device_lock, flags)"]
  1052 -> 1054 [label=ARGUMENT ]
  1067 -> 1066 [label=REACHING_DEF VARIABLE="offload_ctx->destruct_work"]
  1067 -> 1066 [label=REACHING_DEF VARIABLE="offload_ctx->destruct_work"]
  1006 -> 1008 [label=CONTAINS ]
  1064 -> 1065 [label=ARGUMENT ]
  1021 -> 1020 [label=REACHING_DEF VARIABLE="ctx->refcount"]
  1021 -> 1020 [label=REACHING_DEF VARIABLE="ctx->refcount"]
  1014 -> 1080 [label=REACHING_DEF VARIABLE="tls_device_lock"]
  1018 -> 1080 [label=REACHING_DEF VARIABLE="!refcount_dec_and_test(&ctx->refcount)"]
  1038 -> 1039 [label=AST ]
  1052 -> 1053 [label=ARGUMENT ]
  1062 -> 1063 [label=AST ]
  1056 -> 1057 [label=AST ]
  1030 -> 1036 [label=CFG ]
  1020 -> 1080 [label=REACHING_DEF VARIABLE="&ctx->refcount"]
  1006 -> 1068 [label=REACHING_DEF VARIABLE=""]
  1052 -> 1053 [label=AST ]
  1042 -> 1043 [label=AST ]
  1006 -> 1051 [label=CONTAINS ]
  1066 -> 1067 [label=AST ]
  1060 -> 1061 [label=AST ]
  1017 -> 1027 [label=CFG ]
  1070 -> 1076 [label=CFG ]
  1068 -> 1059 [label=REF ]
  1062 -> 1060 [label=REACHING_DEF VARIABLE="tls_offload_ctx_tx(ctx)"]
  1021 -> 1022 [label=ARGUMENT ]
  1057 -> 1072 [label=DOMINATE ]
  1017 -> 1025 [label=CDG ]
  1031 -> 1030 [label=REACHING_DEF VARIABLE="&ctx->list"]
  1048 -> 1047 [label=REACHING_DEF VARIABLE="async_cleanup"]
  1006 -> 21284 [label=AST ]
  1006 -> 1024 [label=CONTAINS ]
  1067 -> 1069 [label=ARGUMENT ]
}
