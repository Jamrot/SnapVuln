{"multi_graph": {"nodes": [{"type": "Function", "ID": 485, "name": "HMAC_CTX_new"}, {"type": "FUNCDEF", "childNum": "0", "ID": 486, "code": "HMAC_CTX_new ()"}, {"type": "PARAMLIST", "childNum": "2", "ID": 487, "code": ""}, {"type": "RETURNTYPE", "childNum": "1", "ID": 488, "code": "HMAC_CTX *"}, {"type": "COMPSTATE", "childNum": "0", "ID": 489, "code": "", "location": "71"}, {"type": "RETURNSTATE", "childNum": "2", "ID": 490, "code": "return ctx ;", "location": "80"}, {"type": "IDEN", "childNum": "0", "ID": 491, "code": "ctx"}, {"type": "IFSTATE", "childNum": "1", "ID": 492, "code": "if ( ctx != NULL )"}, {"type": "COMPSTATE", "childNum": "1", "ID": 493, "code": "", "location": "4"}, {"type": "IFSTATE", "childNum": "0", "ID": 494, "code": "if ( ! HMAC_CTX_reset ( ctx ) )"}, {"type": "COMPSTATE", "childNum": "1", "ID": 495, "code": "", "location": "5"}, {"type": "RETURNSTATE", "childNum": "1", "ID": 496, "code": "return NULL ;", "location": "77"}, {"type": "IDEN", "childNum": "0", "ID": 497, "code": "NULL"}, {"type": "EXPRSTATE", "childNum": "0", "ID": 498, "code": "HMAC_CTX_free ( ctx )", "location": "76"}, {"type": "CALLEXPR", "childNum": "0", "ID": 499, "code": "HMAC_CTX_free ( ctx )"}, {"type": "ARGULIST", "childNum": "1", "ID": 500, "code": "ctx"}, {"type": "ARGUMENT", "childNum": "0", "ID": 501, "code": "ctx"}, {"type": "IDEN", "childNum": "0", "ID": 502, "code": "ctx"}, {"type": "CALLEE", "childNum": "0", "ID": 503, "code": "HMAC_CTX_free"}, {"type": "IDEN", "childNum": "0", "ID": 504, "code": "HMAC_CTX_free"}, {"type": "COND", "childNum": "0", "ID": 505, "code": "! HMAC_CTX_reset ( ctx )", "location": "75"}, {"type": "UNAOP", "childNum": "0", "ID": 506, "code": "! HMAC_CTX_reset ( ctx )"}, {"type": "CALLEXPR", "childNum": "1", "ID": 507, "code": "HMAC_CTX_reset ( ctx )"}, {"type": "ARGULIST", "childNum": "1", "ID": 508, "code": "ctx"}, {"type": "ARGUMENT", "childNum": "0", "ID": 509, "code": "ctx"}, {"type": "IDEN", "childNum": "0", "ID": 510, "code": "ctx"}, {"type": "CALLEE", "childNum": "0", "ID": 511, "code": "HMAC_CTX_reset"}, {"type": "IDEN", "childNum": "0", "ID": 512, "code": "HMAC_CTX_reset"}, {"type": "UNARYOPER", "childNum": "0", "ID": 513, "code": "!"}, {"type": "COND", "childNum": "0", "ID": 514, "code": "ctx != NULL", "location": "74"}, {"type": "EQEXPR", "childNum": "0", "ID": 515, "code": "ctx != NULL"}, {"type": "IDEN", "childNum": "1", "ID": 516, "code": "NULL"}, {"type": "IDEN", "childNum": "0", "ID": 517, "code": "ctx"}, {"type": "IDENDECLSTATE", "childNum": "0", "ID": 518, "code": "HMAC_CTX * ctx = OPENSSL_zalloc ( sizeof ( HMAC_CTX ) ) ;", "location": "72"}, {"type": "IDENDECL", "childNum": "0", "ID": 519, "code": "* ctx = OPENSSL_zalloc ( sizeof ( HMAC_CTX ) )"}, {"type": "ASSIGNEXPR", "childNum": "2", "ID": 520, "code": "* ctx = OPENSSL_zalloc ( sizeof ( HMAC_CTX ) )"}, {"type": "CALLEXPR", "childNum": "1", "ID": 521, "code": "OPENSSL_zalloc ( sizeof ( HMAC_CTX ) )"}, {"type": "ARGULIST", "childNum": "1", "ID": 522, "code": "sizeof ( HMAC_CTX )"}, {"type": "ARGUMENT", "childNum": "0", "ID": 523, "code": "sizeof ( HMAC_CTX )"}, {"type": "SIZEOFEXPR", "childNum": "0", "ID": 524, "code": "sizeof ( HMAC_CTX )"}, {"type": "SIZEOFOPERA", "childNum": "1", "ID": 525, "code": "HMAC_CTX"}, {"type": "SIZEOF", "childNum": "0", "ID": 526, "code": "sizeof"}, {"type": "CALLEE", "childNum": "0", "ID": 527, "code": "OPENSSL_zalloc"}, {"type": "IDEN", "childNum": "0", "ID": 528, "code": "OPENSSL_zalloc"}, {"type": "IDEN", "childNum": "0", "ID": 529, "code": "ctx"}, {"type": "IDEN", "childNum": "0", "ID": 530, "code": "ctx"}, {"type": "IDENDECLTYPE", "childNum": "0", "ID": 531, "code": "HMAC_CTX *"}, {"type": "CFGENTRYNODE", "ID": 532, "code": "ENTRY"}, {"type": "CFGEXITNODE", "ID": 533, "code": "EXIT"}, {"type": "SYS", "ID": 534, "code": "NULL"}, {"type": "SYS", "ID": 535, "code": "ctx"}, {"type": "SYS", "ID": 536, "code": "HMAC_CTX_reset"}, {"type": "SYS", "ID": 537, "code": "OPENSSL_zalloc"}, {"type": "Function", "ID": 652, "name": "HMAC_Init_ex"}, {"type": "FUNCDEF", "childNum": "0", "ID": 653, "code": "HMAC_Init_ex (HMAC_CTX * ctx , const void * key , int len , const EVP_MD * md , ENGINE * impl)"}, {"type": "PARAMLIST", "childNum": "2", "ID": 654, "code": "HMAC_CTX * ctx , const void * key , int len , const EVP_MD * md , ENGINE * impl"}, {"type": "PARAM", "childNum": "4", "ID": 655, "code": "ENGINE * impl", "location": "104"}, {"type": "IDEN", "childNum": "1", "ID": 656, "code": "impl"}, {"type": "PARAMTYPE", "childNum": "0", "ID": 657, "code": "ENGINE *"}, {"type": "PARAM", "childNum": "3", "ID": 658, "code": "const EVP_MD * md", "location": "104"}, {"type": "IDEN", "childNum": "1", "ID": 659, "code": "md"}, {"type": "PARAMTYPE", "childNum": "0", "ID": 660, "code": "const EVP_MD *"}, {"type": "PARAM", "childNum": "2", "ID": 661, "code": "int len", "location": "103"}, {"type": "IDEN", "childNum": "1", "ID": 662, "code": "len"}, {"type": "PARAMTYPE", "childNum": "0", "ID": 663, "code": "int"}, {"type": "PARAM", "childNum": "1", "ID": 664, "code": "const void * key", "location": "103"}, {"type": "IDEN", "childNum": "1", "ID": 665, "code": "key"}, {"type": "PARAMTYPE", "childNum": "0", "ID": 666, "code": "const void *"}, {"type": "PARAM", "childNum": "0", "ID": 667, "code": "HMAC_CTX * ctx", "location": "103"}, {"type": "IDEN", "childNum": "1", "ID": 668, "code": "ctx"}, {"type": "PARAMTYPE", "childNum": "0", "ID": 669, "code": "HMAC_CTX *"}, {"type": "RETURNTYPE", "childNum": "1", "ID": 670, "code": "int"}, {"type": "COMPSTATE", "childNum": "0", "ID": 671, "code": "", "location": "105"}, {"type": "RETURNSTATE", "childNum": "11", "ID": 672, "code": "return rv ;", "location": "164"}, {"type": "IDEN", "childNum": "0", "ID": 673, "code": "rv"}, {"type": "IFSTATE", "childNum": "10", "ID": 674, "code": "if ( reset )"}, {"type": "EXPRSTATE", "childNum": "1", "ID": 675, "code": "OPENSSL_cleanse ( pad , sizeof ( pad ) )", "location": "163"}, {"type": "CALLEXPR", "childNum": "0", "ID": 676, "code": "OPENSSL_cleanse ( pad , sizeof ( pad ) )"}, {"type": "ARGULIST", "childNum": "1", "ID": 677, "code": "pad"}, {"type": "ARGUMENT", "childNum": "1", "ID": 678, "code": "sizeof ( pad )"}, {"type": "SIZEOFEXPR", "childNum": "0", "ID": 679, "code": "sizeof ( pad )"}, {"type": "SIZEOFOPERA", "childNum": "1", "ID": 680, "code": "pad"}, {"type": "SIZEOF", "childNum": "0", "ID": 681, "code": "sizeof"}, {"type": "ARGUMENT", "childNum": "0", "ID": 682, "code": "pad"}, {"type": "IDEN", "childNum": "0", "ID": 683, "code": "pad"}, {"type": "CALLEE", "childNum": "0", "ID": 684, "code": "OPENSSL_cleanse"}, {"type": "IDEN", "childNum": "0", "ID": 685, "code": "OPENSSL_cleanse"}, {"type": "COND", "childNum": "0", "ID": 686, "code": "reset", "location": "162"}, {"type": "IDEN", "childNum": "0", "ID": 687, "code": "reset"}, {"type": "LABEL", "childNum": "9", "ID": 688, "code": "err :", "location": "161"}, {"type": "IDEN", "childNum": "0", "ID": 689, "code": "err"}, {"type": "EXPRSTATE", "childNum": "8", "ID": 690, "code": "rv = 1", "location": "160"}, {"type": "ASSIGNEXPR", "childNum": "0", "ID": 691, "code": "rv = 1"}, {"type": "PRIEXPR", "childNum": "1", "ID": 692, "code": "1"}, {"type": "IDEN", "childNum": "0", "ID": 693, "code": "rv"}, {"type": "IFSTATE", "childNum": "7", "ID": 694, "code": "if ( ! EVP_MD_CTX_copy_ex ( ctx -> md_ctx , ctx -> i_ctx ) )"}, {"type": "GOGOSTATE", "childNum": "1", "ID": 695, "code": "goto err ;", "location": "159"}, {"type": "IDEN", "childNum": "0", "ID": 696, "code": "err"}, {"type": "COND", "childNum": "0", "ID": 697, "code": "! EVP_MD_CTX_copy_ex ( ctx -> md_ctx , ctx -> i_ctx )", "location": "158"}, {"type": "UNAOP", "childNum": "0", "ID": 698, "code": "! EVP_MD_CTX_copy_ex ( ctx -> md_ctx , ctx -> i_ctx )"}, {"type": "CALLEXPR", "childNum": "1", "ID": 699, "code": "EVP_MD_CTX_copy_ex ( ctx -> md_ctx , ctx -> i_ctx )"}, {"type": "ARGULIST", "childNum": "1", "ID": 700, "code": "ctx -> md_ctx"}, {"type": "ARGUMENT", "childNum": "1", "ID": 701, "code": "ctx -> i_ctx"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 702, "code": "ctx -> i_ctx"}, {"type": "IDEN", "childNum": "1", "ID": 703, "code": "i_ctx"}, {"type": "IDEN", "childNum": "0", "ID": 704, "code": "ctx"}, {"type": "ARGUMENT", "childNum": "0", "ID": 705, "code": "ctx -> md_ctx"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 706, "code": "ctx -> md_ctx"}, {"type": "IDEN", "childNum": "1", "ID": 707, "code": "md_ctx"}, {"type": "IDEN", "childNum": "0", "ID": 708, "code": "ctx"}, {"type": "CALLEE", "childNum": "0", "ID": 709, "code": "EVP_MD_CTX_copy_ex"}, {"type": "IDEN", "childNum": "0", "ID": 710, "code": "EVP_MD_CTX_copy_ex"}, {"type": "UNARYOPER", "childNum": "0", "ID": 711, "code": "!"}, {"type": "IFSTATE", "childNum": "6", "ID": 712, "code": "if ( reset )"}, {"type": "COMPSTATE", "childNum": "1", "ID": 713, "code": "", "location": "41"}, {"type": "IFSTATE", "childNum": "3", "ID": 714, "code": "if ( ! EVP_DigestInit_ex ( ctx -> o_ctx , md , impl ) || ! EVP_DigestUpdate ( ctx -> o_ctx , pad , EVP_MD_block_size ( md ) ) )"}, {"type": "GOGOSTATE", "childNum": "1", "ID": 715, "code": "goto err ;", "location": "156"}, {"type": "IDEN", "childNum": "0", "ID": 716, "code": "err"}, {"type": "COND", "childNum": "0", "ID": 717, "code": "! EVP_DigestInit_ex ( ctx -> o_ctx , md , impl ) || ! EVP_DigestUpdate ( ctx -> o_ctx , pad , EVP_MD_block_size ( md ) )", "location": "154"}, {"type": "OREXPR", "childNum": "0", "ID": 718, "code": "! EVP_DigestInit_ex ( ctx -> o_ctx , md , impl ) || ! EVP_DigestUpdate ( ctx -> o_ctx , pad , EVP_MD_block_size ( md ) )"}, {"type": "UNAOP", "childNum": "1", "ID": 719, "code": "! EVP_DigestUpdate ( ctx -> o_ctx , pad , EVP_MD_block_size ( md ) )"}, {"type": "CALLEXPR", "childNum": "1", "ID": 720, "code": "EVP_DigestUpdate ( ctx -> o_ctx , pad , EVP_MD_block_size ( md ) )"}, {"type": "ARGULIST", "childNum": "1", "ID": 721, "code": "ctx -> o_ctx"}, {"type": "ARGUMENT", "childNum": "2", "ID": 722, "code": "EVP_MD_block_size ( md )"}, {"type": "CALLEXPR", "childNum": "0", "ID": 723, "code": "EVP_MD_block_size ( md )"}, {"type": "ARGULIST", "childNum": "1", "ID": 724, "code": "md"}, {"type": "ARGUMENT", "childNum": "0", "ID": 725, "code": "md"}, {"type": "IDEN", "childNum": "0", "ID": 726, "code": "md"}, {"type": "CALLEE", "childNum": "0", "ID": 727, "code": "EVP_MD_block_size"}, {"type": "IDEN", "childNum": "0", "ID": 728, "code": "EVP_MD_block_size"}, {"type": "ARGUMENT", "childNum": "1", "ID": 729, "code": "pad"}, {"type": "IDEN", "childNum": "0", "ID": 730, "code": "pad"}, {"type": "ARGUMENT", "childNum": "0", "ID": 731, "code": "ctx -> o_ctx"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 732, "code": "ctx -> o_ctx"}, {"type": "IDEN", "childNum": "1", "ID": 733, "code": "o_ctx"}, {"type": "IDEN", "childNum": "0", "ID": 734, "code": "ctx"}, {"type": "CALLEE", "childNum": "0", "ID": 735, "code": "EVP_DigestUpdate"}, {"type": "IDEN", "childNum": "0", "ID": 736, "code": "EVP_DigestUpdate"}, {"type": "UNARYOPER", "childNum": "0", "ID": 737, "code": "!"}, {"type": "UNAOP", "childNum": "0", "ID": 738, "code": "! EVP_DigestInit_ex ( ctx -> o_ctx , md , impl )"}, {"type": "CALLEXPR", "childNum": "1", "ID": 739, "code": "EVP_DigestInit_ex ( ctx -> o_ctx , md , impl )"}, {"type": "ARGULIST", "childNum": "1", "ID": 740, "code": "ctx -> o_ctx"}, {"type": "ARGUMENT", "childNum": "2", "ID": 741, "code": "impl"}, {"type": "IDEN", "childNum": "0", "ID": 742, "code": "impl"}, {"type": "ARGUMENT", "childNum": "1", "ID": 743, "code": "md"}, {"type": "IDEN", "childNum": "0", "ID": 744, "code": "md"}, {"type": "ARGUMENT", "childNum": "0", "ID": 745, "code": "ctx -> o_ctx"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 746, "code": "ctx -> o_ctx"}, {"type": "IDEN", "childNum": "1", "ID": 747, "code": "o_ctx"}, {"type": "IDEN", "childNum": "0", "ID": 748, "code": "ctx"}, {"type": "CALLEE", "childNum": "0", "ID": 749, "code": "EVP_DigestInit_ex"}, {"type": "IDEN", "childNum": "0", "ID": 750, "code": "EVP_DigestInit_ex"}, {"type": "UNARYOPER", "childNum": "0", "ID": 751, "code": "!"}, {"type": "FORSTATE", "childNum": "2", "ID": 752, "code": "for ( i = 0 ; i < HMAC_MAX_MD_CBLOCK ; i ++ )"}, {"type": "EXPRSTATE", "childNum": "3", "ID": 753, "code": "pad [ i ] = 0x5c ^ ctx -> key [ i ]", "location": "153"}, {"type": "ASSIGNEXPR", "childNum": "0", "ID": 754, "code": "pad [ i ] = 0x5c ^ ctx -> key [ i ]"}, {"type": "EXCLUOREXPR", "childNum": "1", "ID": 755, "code": "0x5c ^ ctx -> key [ i ]"}, {"type": "ARRINDEX", "childNum": "1", "ID": 756, "code": "ctx -> key [ i ]"}, {"type": "IDEN", "childNum": "1", "ID": 757, "code": "i"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 758, "code": "ctx -> key"}, {"type": "IDEN", "childNum": "1", "ID": 759, "code": "key"}, {"type": "IDEN", "childNum": "0", "ID": 760, "code": "ctx"}, {"type": "PRIEXPR", "childNum": "0", "ID": 761, "code": "0x5c"}, {"type": "ARRINDEX", "childNum": "0", "ID": 762, "code": "pad [ i ]"}, {"type": "IDEN", "childNum": "1", "ID": 763, "code": "i"}, {"type": "IDEN", "childNum": "0", "ID": 764, "code": "pad"}, {"type": "INCDECOP", "childNum": "2", "ID": 765, "code": "i ++", "location": "152"}, {"type": "IncDec", "childNum": "1", "ID": 766, "code": "++"}, {"type": "IDEN", "childNum": "0", "ID": 767, "code": "i"}, {"type": "COND", "childNum": "1", "ID": 768, "code": "i < HMAC_MAX_MD_CBLOCK", "location": "152"}, {"type": "RELATIONEXPRE", "childNum": "0", "ID": 769, "code": "i < HMAC_MAX_MD_CBLOCK"}, {"type": "IDEN", "childNum": "1", "ID": 770, "code": "HMAC_MAX_MD_CBLOCK"}, {"type": "IDEN", "childNum": "0", "ID": 771, "code": "i"}, {"type": "FORINIT", "childNum": "0", "ID": 772, "code": "i = 0 ;", "location": "152"}, {"type": "ASSIGNEXPR", "childNum": "0", "ID": 773, "code": "i = 0"}, {"type": "PRIEXPR", "childNum": "1", "ID": 774, "code": "0"}, {"type": "IDEN", "childNum": "0", "ID": 775, "code": "i"}, {"type": "IFSTATE", "childNum": "1", "ID": 776, "code": "if ( ! EVP_DigestInit_ex ( ctx -> i_ctx , md , impl ) || ! EVP_DigestUpdate ( ctx -> i_ctx , pad , EVP_MD_block_size ( md ) ) )"}, {"type": "GOGOSTATE", "childNum": "1", "ID": 777, "code": "goto err ;", "location": "150"}, {"type": "IDEN", "childNum": "0", "ID": 778, "code": "err"}, {"type": "COND", "childNum": "0", "ID": 779, "code": "! EVP_DigestInit_ex ( ctx -> i_ctx , md , impl ) || ! EVP_DigestUpdate ( ctx -> i_ctx , pad , EVP_MD_block_size ( md ) )", "location": "148"}, {"type": "OREXPR", "childNum": "0", "ID": 780, "code": "! EVP_DigestInit_ex ( ctx -> i_ctx , md , impl ) || ! EVP_DigestUpdate ( ctx -> i_ctx , pad , EVP_MD_block_size ( md ) )"}, {"type": "UNAOP", "childNum": "1", "ID": 781, "code": "! EVP_DigestUpdate ( ctx -> i_ctx , pad , EVP_MD_block_size ( md ) )"}, {"type": "CALLEXPR", "childNum": "1", "ID": 782, "code": "EVP_DigestUpdate ( ctx -> i_ctx , pad , EVP_MD_block_size ( md ) )"}, {"type": "ARGULIST", "childNum": "1", "ID": 783, "code": "ctx -> i_ctx"}, {"type": "ARGUMENT", "childNum": "2", "ID": 784, "code": "EVP_MD_block_size ( md )"}, {"type": "CALLEXPR", "childNum": "0", "ID": 785, "code": "EVP_MD_block_size ( md )"}, {"type": "ARGULIST", "childNum": "1", "ID": 786, "code": "md"}, {"type": "ARGUMENT", "childNum": "0", "ID": 787, "code": "md"}, {"type": "IDEN", "childNum": "0", "ID": 788, "code": "md"}, {"type": "CALLEE", "childNum": "0", "ID": 789, "code": "EVP_MD_block_size"}, {"type": "IDEN", "childNum": "0", "ID": 790, "code": "EVP_MD_block_size"}, {"type": "ARGUMENT", "childNum": "1", "ID": 791, "code": "pad"}, {"type": "IDEN", "childNum": "0", "ID": 792, "code": "pad"}, {"type": "ARGUMENT", "childNum": "0", "ID": 793, "code": "ctx -> i_ctx"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 794, "code": "ctx -> i_ctx"}, {"type": "IDEN", "childNum": "1", "ID": 795, "code": "i_ctx"}, {"type": "IDEN", "childNum": "0", "ID": 796, "code": "ctx"}, {"type": "CALLEE", "childNum": "0", "ID": 797, "code": "EVP_DigestUpdate"}, {"type": "IDEN", "childNum": "0", "ID": 798, "code": "EVP_DigestUpdate"}, {"type": "UNARYOPER", "childNum": "0", "ID": 799, "code": "!"}, {"type": "UNAOP", "childNum": "0", "ID": 800, "code": "! EVP_DigestInit_ex ( ctx -> i_ctx , md , impl )"}, {"type": "CALLEXPR", "childNum": "1", "ID": 801, "code": "EVP_DigestInit_ex ( ctx -> i_ctx , md , impl )"}, {"type": "ARGULIST", "childNum": "1", "ID": 802, "code": "ctx -> i_ctx"}, {"type": "ARGUMENT", "childNum": "2", "ID": 803, "code": "impl"}, {"type": "IDEN", "childNum": "0", "ID": 804, "code": "impl"}, {"type": "ARGUMENT", "childNum": "1", "ID": 805, "code": "md"}, {"type": "IDEN", "childNum": "0", "ID": 806, "code": "md"}, {"type": "ARGUMENT", "childNum": "0", "ID": 807, "code": "ctx -> i_ctx"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 808, "code": "ctx -> i_ctx"}, {"type": "IDEN", "childNum": "1", "ID": 809, "code": "i_ctx"}, {"type": "IDEN", "childNum": "0", "ID": 810, "code": "ctx"}, {"type": "CALLEE", "childNum": "0", "ID": 811, "code": "EVP_DigestInit_ex"}, {"type": "IDEN", "childNum": "0", "ID": 812, "code": "EVP_DigestInit_ex"}, {"type": "UNARYOPER", "childNum": "0", "ID": 813, "code": "!"}, {"type": "FORSTATE", "childNum": "0", "ID": 814, "code": "for ( i = 0 ; i < HMAC_MAX_MD_CBLOCK ; i ++ )"}, {"type": "EXPRSTATE", "childNum": "3", "ID": 815, "code": "pad [ i ] = 0x36 ^ ctx -> key [ i ]", "location": "147"}, {"type": "ASSIGNEXPR", "childNum": "0", "ID": 816, "code": "pad [ i ] = 0x36 ^ ctx -> key [ i ]"}, {"type": "EXCLUOREXPR", "childNum": "1", "ID": 817, "code": "0x36 ^ ctx -> key [ i ]"}, {"type": "ARRINDEX", "childNum": "1", "ID": 818, "code": "ctx -> key [ i ]"}, {"type": "IDEN", "childNum": "1", "ID": 819, "code": "i"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 820, "code": "ctx -> key"}, {"type": "IDEN", "childNum": "1", "ID": 821, "code": "key"}, {"type": "IDEN", "childNum": "0", "ID": 822, "code": "ctx"}, {"type": "PRIEXPR", "childNum": "0", "ID": 823, "code": "0x36"}, {"type": "ARRINDEX", "childNum": "0", "ID": 824, "code": "pad [ i ]"}, {"type": "IDEN", "childNum": "1", "ID": 825, "code": "i"}, {"type": "IDEN", "childNum": "0", "ID": 826, "code": "pad"}, {"type": "INCDECOP", "childNum": "2", "ID": 827, "code": "i ++", "location": "146"}, {"type": "IncDec", "childNum": "1", "ID": 828, "code": "++"}, {"type": "IDEN", "childNum": "0", "ID": 829, "code": "i"}, {"type": "COND", "childNum": "1", "ID": 830, "code": "i < HMAC_MAX_MD_CBLOCK", "location": "146"}, {"type": "RELATIONEXPRE", "childNum": "0", "ID": 831, "code": "i < HMAC_MAX_MD_CBLOCK"}, {"type": "IDEN", "childNum": "1", "ID": 832, "code": "HMAC_MAX_MD_CBLOCK"}, {"type": "IDEN", "childNum": "0", "ID": 833, "code": "i"}, {"type": "FORINIT", "childNum": "0", "ID": 834, "code": "i = 0 ;", "location": "146"}, {"type": "ASSIGNEXPR", "childNum": "0", "ID": 835, "code": "i = 0"}, {"type": "PRIEXPR", "childNum": "1", "ID": 836, "code": "0"}, {"type": "IDEN", "childNum": "0", "ID": 837, "code": "i"}, {"type": "COND", "childNum": "0", "ID": 838, "code": "reset", "location": "145"}, {"type": "IDEN", "childNum": "0", "ID": 839, "code": "reset"}, {"type": "IFSTATE", "childNum": "5", "ID": 840, "code": "if ( key != NULL )"}, {"type": "COMPSTATE", "childNum": "1", "ID": 841, "code": "", "location": "19"}, {"type": "IFSTATE", "childNum": "4", "ID": 842, "code": "if ( ctx -> key_length != HMAC_MAX_MD_CBLOCK )"}, {"type": "EXPRSTATE", "childNum": "1", "ID": 843, "code": "memset ( & ctx -> key [ ctx -> key_length ] , 0 , HMAC_MAX_MD_CBLOCK - ctx -> key_length )", "location": "141"}, {"type": "CALLEXPR", "childNum": "0", "ID": 844, "code": "memset ( & ctx -> key [ ctx -> key_length ] , 0 , HMAC_MAX_MD_CBLOCK - ctx -> key_length )"}, {"type": "ARGULIST", "childNum": "1", "ID": 845, "code": "& ctx -> key [ ctx -> key_length ]"}, {"type": "ARGUMENT", "childNum": "2", "ID": 846, "code": "HMAC_MAX_MD_CBLOCK - ctx -> key_length"}, {"type": "ADDIEXPR", "childNum": "0", "ID": 847, "code": "HMAC_MAX_MD_CBLOCK - ctx -> key_length"}, {"type": "PTRMEMACCESS", "childNum": "1", "ID": 848, "code": "ctx -> key_length"}, {"type": "IDEN", "childNum": "1", "ID": 849, "code": "key_length"}, {"type": "IDEN", "childNum": "0", "ID": 850, "code": "ctx"}, {"type": "IDEN", "childNum": "0", "ID": 851, "code": "HMAC_MAX_MD_CBLOCK"}, {"type": "ARGUMENT", "childNum": "1", "ID": 852, "code": "0"}, {"type": "PRIEXPR", "childNum": "0", "ID": 853, "code": "0"}, {"type": "ARGUMENT", "childNum": "0", "ID": 854, "code": "& ctx -> key [ ctx -> key_length ]"}, {"type": "UNAOP", "childNum": "0", "ID": 855, "code": "& ctx -> key [ ctx -> key_length ]"}, {"type": "ARRINDEX", "childNum": "1", "ID": 856, "code": "ctx -> key [ ctx -> key_length ]"}, {"type": "PTRMEMACCESS", "childNum": "1", "ID": 857, "code": "ctx -> key_length"}, {"type": "IDEN", "childNum": "1", "ID": 858, "code": "key_length"}, {"type": "IDEN", "childNum": "0", "ID": 859, "code": "ctx"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 860, "code": "ctx -> key"}, {"type": "IDEN", "childNum": "1", "ID": 861, "code": "key"}, {"type": "IDEN", "childNum": "0", "ID": 862, "code": "ctx"}, {"type": "UNARYOPER", "childNum": "0", "ID": 863, "code": "&"}, {"type": "CALLEE", "childNum": "0", "ID": 864, "code": "memset"}, {"type": "IDEN", "childNum": "0", "ID": 865, "code": "memset"}, {"type": "COND", "childNum": "0", "ID": 866, "code": "ctx -> key_length != HMAC_MAX_MD_CBLOCK", "location": "140"}, {"type": "EQEXPR", "childNum": "0", "ID": 867, "code": "ctx -> key_length != HMAC_MAX_MD_CBLOCK"}, {"type": "IDEN", "childNum": "1", "ID": 868, "code": "HMAC_MAX_MD_CBLOCK"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 869, "code": "ctx -> key_length"}, {"type": "IDEN", "childNum": "1", "ID": 870, "code": "key_length"}, {"type": "IDEN", "childNum": "0", "ID": 871, "code": "ctx"}, {"type": "IFSTATE", "childNum": "3", "ID": 872, "code": "if ( j < len )"}, {"type": "ELSESTATE", "childNum": "0", "ID": 873, "code": "else"}, {"type": "COMPSTATE", "childNum": "0", "ID": 874, "code": "", "location": "30"}, {"type": "EXPRSTATE", "childNum": "2", "ID": 875, "code": "ctx -> key_length = len", "location": "138"}, {"type": "ASSIGNEXPR", "childNum": "0", "ID": 876, "code": "ctx -> key_length = len"}, {"type": "IDEN", "childNum": "1", "ID": 877, "code": "len"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 878, "code": "ctx -> key_length"}, {"type": "IDEN", "childNum": "1", "ID": 879, "code": "key_length"}, {"type": "IDEN", "childNum": "0", "ID": 880, "code": "ctx"}, {"type": "EXPRSTATE", "childNum": "1", "ID": 881, "code": "memcpy ( ctx -> key , key , len )", "location": "137"}, {"type": "CALLEXPR", "childNum": "0", "ID": 882, "code": "memcpy ( ctx -> key , key , len )"}, {"type": "ARGULIST", "childNum": "1", "ID": 883, "code": "ctx -> key"}, {"type": "ARGUMENT", "childNum": "2", "ID": 884, "code": "len"}, {"type": "IDEN", "childNum": "0", "ID": 885, "code": "len"}, {"type": "ARGUMENT", "childNum": "1", "ID": 886, "code": "key"}, {"type": "IDEN", "childNum": "0", "ID": 887, "code": "key"}, {"type": "ARGUMENT", "childNum": "0", "ID": 888, "code": "ctx -> key"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 889, "code": "ctx -> key"}, {"type": "IDEN", "childNum": "1", "ID": 890, "code": "key"}, {"type": "IDEN", "childNum": "0", "ID": 891, "code": "ctx"}, {"type": "CALLEE", "childNum": "0", "ID": 892, "code": "memcpy"}, {"type": "IDEN", "childNum": "0", "ID": 893, "code": "memcpy"}, {"type": "IFSTATE", "childNum": "0", "ID": 894, "code": "if ( len < 0 || len > ( int ) sizeof ( ctx -> key ) )"}, {"type": "RETURNSTATE", "childNum": "1", "ID": 895, "code": "return 0 ;", "location": "136"}, {"type": "PRIEXPR", "childNum": "0", "ID": 896, "code": "0"}, {"type": "COND", "childNum": "0", "ID": 897, "code": "len < 0 || len > ( int ) sizeof ( ctx -> key )", "location": "135"}, {"type": "OREXPR", "childNum": "0", "ID": 898, "code": "len < 0 || len > ( int ) sizeof ( ctx -> key )"}, {"type": "RELATIONEXPRE", "childNum": "1", "ID": 899, "code": "len > ( int ) sizeof ( ctx -> key )"}, {"type": "CASTEXPR", "childNum": "1", "ID": 900, "code": "( int ) sizeof ( ctx -> key )"}, {"type": "SIZEOFEXPR", "childNum": "0", "ID": 901, "code": "sizeof ( ctx -> key )"}, {"type": "PTRMEMACCESS", "childNum": "1", "ID": 902, "code": "ctx -> key"}, {"type": "IDEN", "childNum": "1", "ID": 903, "code": "key"}, {"type": "IDEN", "childNum": "0", "ID": 904, "code": "ctx"}, {"type": "SIZEOF", "childNum": "0", "ID": 905, "code": "sizeof"}, {"type": "CASTTAR", "childNum": "0", "ID": 906, "code": "int"}, {"type": "IDEN", "childNum": "0", "ID": 907, "code": "len"}, {"type": "RELATIONEXPRE", "childNum": "0", "ID": 908, "code": "len < 0"}, {"type": "PRIEXPR", "childNum": "1", "ID": 909, "code": "0"}, {"type": "IDEN", "childNum": "0", "ID": 910, "code": "len"}, {"type": "COMPSTATE", "childNum": "1", "ID": 911, "code": "", "location": "24"}, {"type": "IFSTATE", "childNum": "0", "ID": 912, "code": "if ( ! EVP_DigestInit_ex ( ctx -> md_ctx , md , impl ) || ! EVP_DigestUpdate ( ctx -> md_ctx , key , len ) || ! EVP_DigestFinal_ex ( ctx -> md_ctx , ctx -> key , & ctx -> key_length ) )"}, {"type": "RETURNSTATE", "childNum": "1", "ID": 913, "code": "return 0 ;", "location": "133"}, {"type": "PRIEXPR", "childNum": "0", "ID": 914, "code": "0"}, {"type": "COND", "childNum": "0", "ID": 915, "code": "! EVP_DigestInit_ex ( ctx -> md_ctx , md , impl ) || ! EVP_DigestUpdate ( ctx -> md_ctx , key , len ) || ! EVP_DigestFinal_ex ( ctx -> md_ctx , ctx -> key , & ctx -> key_length )", "location": "129"}, {"type": "OREXPR", "childNum": "0", "ID": 916, "code": "! EVP_DigestInit_ex ( ctx -> md_ctx , md , impl ) || ! EVP_DigestUpdate ( ctx -> md_ctx , key , len ) || ! EVP_DigestFinal_ex ( ctx -> md_ctx , ctx -> key , & ctx -> key_length )"}, {"type": "OREXPR", "childNum": "1", "ID": 917, "code": "! EVP_DigestUpdate ( ctx -> md_ctx , key , len ) || ! EVP_DigestFinal_ex ( ctx -> md_ctx , ctx -> key , & ctx -> key_length )"}, {"type": "UNAOP", "childNum": "1", "ID": 918, "code": "! EVP_DigestFinal_ex ( ctx -> md_ctx , ctx -> key , & ctx -> key_length )"}, {"type": "CALLEXPR", "childNum": "1", "ID": 919, "code": "EVP_DigestFinal_ex ( ctx -> md_ctx , ctx -> key , & ctx -> key_length )"}, {"type": "ARGULIST", "childNum": "1", "ID": 920, "code": "ctx -> md_ctx"}, {"type": "ARGUMENT", "childNum": "2", "ID": 921, "code": "& ctx -> key_length"}, {"type": "UNAOP", "childNum": "0", "ID": 922, "code": "& ctx -> key_length"}, {"type": "PTRMEMACCESS", "childNum": "1", "ID": 923, "code": "ctx -> key_length"}, {"type": "IDEN", "childNum": "1", "ID": 924, "code": "key_length"}, {"type": "IDEN", "childNum": "0", "ID": 925, "code": "ctx"}, {"type": "UNARYOPER", "childNum": "0", "ID": 926, "code": "&"}, {"type": "ARGUMENT", "childNum": "1", "ID": 927, "code": "ctx -> key"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 928, "code": "ctx -> key"}, {"type": "IDEN", "childNum": "1", "ID": 929, "code": "key"}, {"type": "IDEN", "childNum": "0", "ID": 930, "code": "ctx"}, {"type": "ARGUMENT", "childNum": "0", "ID": 931, "code": "ctx -> md_ctx"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 932, "code": "ctx -> md_ctx"}, {"type": "IDEN", "childNum": "1", "ID": 933, "code": "md_ctx"}, {"type": "IDEN", "childNum": "0", "ID": 934, "code": "ctx"}, {"type": "CALLEE", "childNum": "0", "ID": 935, "code": "EVP_DigestFinal_ex"}, {"type": "IDEN", "childNum": "0", "ID": 936, "code": "EVP_DigestFinal_ex"}, {"type": "UNARYOPER", "childNum": "0", "ID": 937, "code": "!"}, {"type": "UNAOP", "childNum": "0", "ID": 938, "code": "! EVP_DigestUpdate ( ctx -> md_ctx , key , len )"}, {"type": "CALLEXPR", "childNum": "1", "ID": 939, "code": "EVP_DigestUpdate ( ctx -> md_ctx , key , len )"}, {"type": "ARGULIST", "childNum": "1", "ID": 940, "code": "ctx -> md_ctx"}, {"type": "ARGUMENT", "childNum": "2", "ID": 941, "code": "len"}, {"type": "IDEN", "childNum": "0", "ID": 942, "code": "len"}, {"type": "ARGUMENT", "childNum": "1", "ID": 943, "code": "key"}, {"type": "IDEN", "childNum": "0", "ID": 944, "code": "key"}, {"type": "ARGUMENT", "childNum": "0", "ID": 945, "code": "ctx -> md_ctx"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 946, "code": "ctx -> md_ctx"}, {"type": "IDEN", "childNum": "1", "ID": 947, "code": "md_ctx"}, {"type": "IDEN", "childNum": "0", "ID": 948, "code": "ctx"}, {"type": "CALLEE", "childNum": "0", "ID": 949, "code": "EVP_DigestUpdate"}, {"type": "IDEN", "childNum": "0", "ID": 950, "code": "EVP_DigestUpdate"}, {"type": "UNARYOPER", "childNum": "0", "ID": 951, "code": "!"}, {"type": "UNAOP", "childNum": "0", "ID": 952, "code": "! EVP_DigestInit_ex ( ctx -> md_ctx , md , impl )"}, {"type": "CALLEXPR", "childNum": "1", "ID": 953, "code": "EVP_DigestInit_ex ( ctx -> md_ctx , md , impl )"}, {"type": "ARGULIST", "childNum": "1", "ID": 954, "code": "ctx -> md_ctx"}, {"type": "ARGUMENT", "childNum": "2", "ID": 955, "code": "impl"}, {"type": "IDEN", "childNum": "0", "ID": 956, "code": "impl"}, {"type": "ARGUMENT", "childNum": "1", "ID": 957, "code": "md"}, {"type": "IDEN", "childNum": "0", "ID": 958, "code": "md"}, {"type": "ARGUMENT", "childNum": "0", "ID": 959, "code": "ctx -> md_ctx"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 960, "code": "ctx -> md_ctx"}, {"type": "IDEN", "childNum": "1", "ID": 961, "code": "md_ctx"}, {"type": "IDEN", "childNum": "0", "ID": 962, "code": "ctx"}, {"type": "CALLEE", "childNum": "0", "ID": 963, "code": "EVP_DigestInit_ex"}, {"type": "IDEN", "childNum": "0", "ID": 964, "code": "EVP_DigestInit_ex"}, {"type": "UNARYOPER", "childNum": "0", "ID": 965, "code": "!"}, {"type": "COND", "childNum": "0", "ID": 966, "code": "j < len", "location": "128"}, {"type": "RELATIONEXPRE", "childNum": "0", "ID": 967, "code": "j < len"}, {"type": "IDEN", "childNum": "1", "ID": 968, "code": "len"}, {"type": "IDEN", "childNum": "0", "ID": 969, "code": "j"}, {"type": "IFSTATE", "childNum": "2", "ID": 970, "code": "if ( ! ossl_assert ( j <= ( int ) sizeof ( ctx -> key ) ) )"}, {"type": "RETURNSTATE", "childNum": "1", "ID": 971, "code": "return 0 ;", "location": "127"}, {"type": "PRIEXPR", "childNum": "0", "ID": 972, "code": "0"}, {"type": "COND", "childNum": "0", "ID": 973, "code": "! ossl_assert ( j <= ( int ) sizeof ( ctx -> key ) )", "location": "126"}, {"type": "UNAOP", "childNum": "0", "ID": 974, "code": "! ossl_assert ( j <= ( int ) sizeof ( ctx -> key ) )"}, {"type": "CALLEXPR", "childNum": "1", "ID": 975, "code": "ossl_assert ( j <= ( int ) sizeof ( ctx -> key ) )"}, {"type": "ARGULIST", "childNum": "1", "ID": 976, "code": "j <= ( int ) sizeof ( ctx -> key )"}, {"type": "ARGUMENT", "childNum": "0", "ID": 977, "code": "j <= ( int ) sizeof ( ctx -> key )"}, {"type": "RELATIONEXPRE", "childNum": "0", "ID": 978, "code": "j <= ( int ) sizeof ( ctx -> key )"}, {"type": "CASTEXPR", "childNum": "1", "ID": 979, "code": "( int ) sizeof ( ctx -> key )"}, {"type": "SIZEOFEXPR", "childNum": "0", "ID": 980, "code": "sizeof ( ctx -> key )"}, {"type": "PTRMEMACCESS", "childNum": "1", "ID": 981, "code": "ctx -> key"}, {"type": "IDEN", "childNum": "1", "ID": 982, "code": "key"}, {"type": "IDEN", "childNum": "0", "ID": 983, "code": "ctx"}, {"type": "SIZEOF", "childNum": "0", "ID": 984, "code": "sizeof"}, {"type": "CASTTAR", "childNum": "0", "ID": 985, "code": "int"}, {"type": "IDEN", "childNum": "0", "ID": 986, "code": "j"}, {"type": "CALLEE", "childNum": "0", "ID": 987, "code": "ossl_assert"}, {"type": "IDEN", "childNum": "0", "ID": 988, "code": "ossl_assert"}, {"type": "UNARYOPER", "childNum": "0", "ID": 989, "code": "!"}, {"type": "EXPRSTATE", "childNum": "1", "ID": 990, "code": "j = EVP_MD_block_size ( md )", "location": "125"}, {"type": "ASSIGNEXPR", "childNum": "0", "ID": 991, "code": "j = EVP_MD_block_size ( md )"}, {"type": "CALLEXPR", "childNum": "1", "ID": 992, "code": "EVP_MD_block_size ( md )"}, {"type": "ARGULIST", "childNum": "1", "ID": 993, "code": "md"}, {"type": "ARGUMENT", "childNum": "0", "ID": 994, "code": "md"}, {"type": "IDEN", "childNum": "0", "ID": 995, "code": "md"}, {"type": "CALLEE", "childNum": "0", "ID": 996, "code": "EVP_MD_block_size"}, {"type": "IDEN", "childNum": "0", "ID": 997, "code": "EVP_MD_block_size"}, {"type": "IDEN", "childNum": "0", "ID": 998, "code": "j"}, {"type": "EXPRSTATE", "childNum": "0", "ID": 999, "code": "reset = 1", "location": "124"}, {"type": "ASSIGNEXPR", "childNum": "0", "ID": 1000, "code": "reset = 1"}, {"type": "PRIEXPR", "childNum": "1", "ID": 1001, "code": "1"}, {"type": "IDEN", "childNum": "0", "ID": 1002, "code": "reset"}, {"type": "COND", "childNum": "0", "ID": 1003, "code": "key != NULL", "location": "123"}, {"type": "EQEXPR", "childNum": "0", "ID": 1004, "code": "key != NULL"}, {"type": "IDEN", "childNum": "1", "ID": 1005, "code": "NULL"}, {"type": "IDEN", "childNum": "0", "ID": 1006, "code": "key"}, {"type": "IFSTATE", "childNum": "4", "ID": 1007, "code": "if ( md != NULL )"}, {"type": "ELSESTATE", "childNum": "0", "ID": 1008, "code": "else"}, {"type": "IFSTATE", "childNum": "0", "ID": 1009, "code": "if ( ctx -> md )"}, {"type": "ELSESTATE", "childNum": "0", "ID": 1010, "code": "else"}, {"type": "COMPSTATE", "childNum": "0", "ID": 1011, "code": "", "location": "15"}, {"type": "RETURNSTATE", "childNum": "0", "ID": 1012, "code": "return 0 ;", "location": "120"}, {"type": "PRIEXPR", "childNum": "0", "ID": 1013, "code": "0"}, {"type": "COMPSTATE", "childNum": "1", "ID": 1014, "code": "", "location": "13"}, {"type": "EXPRSTATE", "childNum": "0", "ID": 1015, "code": "md = ctx -> md", "location": "118"}, {"type": "ASSIGNEXPR", "childNum": "0", "ID": 1016, "code": "md = ctx -> md"}, {"type": "PTRMEMACCESS", "childNum": "1", "ID": 1017, "code": "ctx -> md"}, {"type": "IDEN", "childNum": "1", "ID": 1018, "code": "md"}, {"type": "IDEN", "childNum": "0", "ID": 1019, "code": "ctx"}, {"type": "IDEN", "childNum": "0", "ID": 1020, "code": "md"}, {"type": "COND", "childNum": "0", "ID": 1021, "code": "ctx -> md", "location": "117"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 1022, "code": "ctx -> md"}, {"type": "IDEN", "childNum": "1", "ID": 1023, "code": "md"}, {"type": "IDEN", "childNum": "0", "ID": 1024, "code": "ctx"}, {"type": "COMPSTATE", "childNum": "1", "ID": 1025, "code": "", "location": "10"}, {"type": "EXPRSTATE", "childNum": "1", "ID": 1026, "code": "ctx -> md = md", "location": "116"}, {"type": "ASSIGNEXPR", "childNum": "0", "ID": 1027, "code": "ctx -> md = md"}, {"type": "IDEN", "childNum": "1", "ID": 1028, "code": "md"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 1029, "code": "ctx -> md"}, {"type": "IDEN", "childNum": "1", "ID": 1030, "code": "md"}, {"type": "IDEN", "childNum": "0", "ID": 1031, "code": "ctx"}, {"type": "EXPRSTATE", "childNum": "0", "ID": 1032, "code": "reset = 1", "location": "115"}, {"type": "ASSIGNEXPR", "childNum": "0", "ID": 1033, "code": "reset = 1"}, {"type": "PRIEXPR", "childNum": "1", "ID": 1034, "code": "1"}, {"type": "IDEN", "childNum": "0", "ID": 1035, "code": "reset"}, {"type": "COND", "childNum": "0", "ID": 1036, "code": "md != NULL", "location": "114"}, {"type": "EQEXPR", "childNum": "0", "ID": 1037, "code": "md != NULL"}, {"type": "IDEN", "childNum": "1", "ID": 1038, "code": "NULL"}, {"type": "IDEN", "childNum": "0", "ID": 1039, "code": "md"}, {"type": "IFSTATE", "childNum": "3", "ID": 1040, "code": "if ( md != NULL && md != ctx -> md && ( key == NULL || len < 0 ) )"}, {"type": "RETURNSTATE", "childNum": "1", "ID": 1041, "code": "return 0 ;", "location": "112"}, {"type": "PRIEXPR", "childNum": "0", "ID": 1042, "code": "0"}, {"type": "COND", "childNum": "0", "ID": 1043, "code": "md != NULL && md != ctx -> md && ( key == NULL || len < 0 )", "location": "111"}, {"type": "ANDEXPR", "childNum": "0", "ID": 1044, "code": "md != NULL && md != ctx -> md && ( key == NULL || len < 0 )"}, {"type": "ANDEXPR", "childNum": "1", "ID": 1045, "code": "md != ctx -> md && ( key == NULL || len < 0 )"}, {"type": "OREXPR", "childNum": "1", "ID": 1046, "code": "key == NULL || len < 0"}, {"type": "RELATIONEXPRE", "childNum": "1", "ID": 1047, "code": "len < 0"}, {"type": "PRIEXPR", "childNum": "1", "ID": 1048, "code": "0"}, {"type": "IDEN", "childNum": "0", "ID": 1049, "code": "len"}, {"type": "EQEXPR", "childNum": "0", "ID": 1050, "code": "key == NULL"}, {"type": "IDEN", "childNum": "1", "ID": 1051, "code": "NULL"}, {"type": "IDEN", "childNum": "0", "ID": 1052, "code": "key"}, {"type": "EQEXPR", "childNum": "0", "ID": 1053, "code": "md != ctx -> md"}, {"type": "PTRMEMACCESS", "childNum": "1", "ID": 1054, "code": "ctx -> md"}, {"type": "IDEN", "childNum": "1", "ID": 1055, "code": "md"}, {"type": "IDEN", "childNum": "0", "ID": 1056, "code": "ctx"}, {"type": "IDEN", "childNum": "0", "ID": 1057, "code": "md"}, {"type": "EQEXPR", "childNum": "0", "ID": 1058, "code": "md != NULL"}, {"type": "IDEN", "childNum": "1", "ID": 1059, "code": "NULL"}, {"type": "IDEN", "childNum": "0", "ID": 1060, "code": "md"}, {"type": "IDENDECLSTATE", "childNum": "2", "ID": 1061, "code": "unsigned char pad [ HMAC_MAX_MD_CBLOCK ] ;", "location": "108"}, {"type": "IDENDECL", "childNum": "0", "ID": 1062, "code": "pad [ HMAC_MAX_MD_CBLOCK ]"}, {"type": "IDEN", "childNum": "2", "ID": 1063, "code": "HMAC_MAX_MD_CBLOCK"}, {"type": "IDEN", "childNum": "1", "ID": 1064, "code": "pad"}, {"type": "IDENDECLTYPE", "childNum": "0", "ID": 1065, "code": "unsigned char [ HMAC_MAX_MD_CBLOCK ]"}, {"type": "IDENDECLSTATE", "childNum": "1", "ID": 1066, "code": "int i , j , reset = 0 ;", "location": "107"}, {"type": "IDENDECL", "childNum": "2", "ID": 1067, "code": "reset = 0"}, {"type": "ASSIGNEXPR", "childNum": "2", "ID": 1068, "code": "reset = 0"}, {"type": "PRIEXPR", "childNum": "1", "ID": 1069, "code": "0"}, {"type": "IDEN", "childNum": "0", "ID": 1070, "code": "reset"}, {"type": "IDEN", "childNum": "0", "ID": 1071, "code": "reset"}, {"type": "IDENDECLTYPE", "childNum": "0", "ID": 1072, "code": "int"}, {"type": "IDENDECL", "childNum": "1", "ID": 1073, "code": "j"}, {"type": "IDEN", "childNum": "1", "ID": 1074, "code": "j"}, {"type": "IDENDECLTYPE", "childNum": "0", "ID": 1075, "code": "int"}, {"type": "IDENDECL", "childNum": "0", "ID": 1076, "code": "i"}, {"type": "IDEN", "childNum": "1", "ID": 1077, "code": "i"}, {"type": "IDENDECLTYPE", "childNum": "0", "ID": 1078, "code": "int"}, {"type": "IDENDECLSTATE", "childNum": "0", "ID": 1079, "code": "int rv = 0 ;", "location": "106"}, {"type": "IDENDECL", "childNum": "0", "ID": 1080, "code": "rv = 0"}, {"type": "ASSIGNEXPR", "childNum": "2", "ID": 1081, "code": "rv = 0"}, {"type": "PRIEXPR", "childNum": "1", "ID": 1082, "code": "0"}, {"type": "IDEN", "childNum": "0", "ID": 1083, "code": "rv"}, {"type": "IDEN", "childNum": "0", "ID": 1084, "code": "rv"}, {"type": "IDENDECLTYPE", "childNum": "0", "ID": 1085, "code": "int"}, {"type": "CFGENTRYNODE", "ID": 1086, "code": "ENTRY"}, {"type": "CFGEXITNODE", "ID": 1087, "code": "EXIT"}, {"type": "SYS", "ID": 1088, "code": "ctx -> key_length"}, {"type": "SYS", "ID": 1089, "code": "* ctx -> key"}, {"type": "SYS", "ID": 1090, "code": "rv"}, {"type": "SYS", "ID": 1091, "code": "& ctx -> key_length"}, {"type": "SYS", "ID": 1092, "code": "ctx -> md_ctx"}, {"type": "SYS", "ID": 1093, "code": "ctx -> key"}, {"type": "SYS", "ID": 1094, "code": "ctx -> o_ctx"}, {"type": "SYS", "ID": 1095, "code": "EVP_DigestInit_ex"}, {"type": "SYS", "ID": 1096, "code": "ctx -> i_ctx"}, {"type": "SYS", "ID": 1097, "code": "& * * ctx"}, {"type": "SYS", "ID": 1098, "code": "& * ctx"}, {"type": "SYS", "ID": 1099, "code": "EVP_DigestUpdate"}, {"type": "SYS", "ID": 1100, "code": "impl"}, {"type": "SYS", "ID": 1101, "code": "pad"}, {"type": "SYS", "ID": 1102, "code": "& * ctx -> key_length"}, {"type": "SYS", "ID": 1103, "code": "len"}, {"type": "SYS", "ID": 1104, "code": "EVP_MD_block_size"}, {"type": "SYS", "ID": 1105, "code": "md"}, {"type": "SYS", "ID": 1106, "code": "key"}, {"type": "SYS", "ID": 1107, "code": "EVP_DigestFinal_ex"}, {"type": "SYS", "ID": 1108, "code": "NULL"}, {"type": "SYS", "ID": 1109, "code": "ctx"}, {"type": "SYS", "ID": 1110, "code": "i"}, {"type": "SYS", "ID": 1111, "code": "j"}, {"type": "SYS", "ID": 1112, "code": "HMAC_MAX_MD_CBLOCK"}, {"type": "SYS", "ID": 1113, "code": "ossl_assert"}, {"type": "SYS", "ID": 1114, "code": "* ctx"}, {"type": "SYS", "ID": 1115, "code": "EVP_MD_CTX_copy_ex"}, {"type": "SYS", "ID": 1116, "code": "& * ctx -> key"}, {"type": "SYS", "ID": 1117, "code": "ctx -> md"}, {"type": "SYS", "ID": 1118, "code": "* i"}, {"type": "SYS", "ID": 1119, "code": "reset"}, {"type": "SYS", "ID": 1120, "code": "* * ctx"}, {"type": "SYS", "ID": 1121, "code": "* pad"}, {"type": "Function", "ID": 538, "name": "HMAC_CTX_reset"}, {"type": "FUNCDEF", "childNum": "0", "ID": 539, "code": "HMAC_CTX_reset (HMAC_CTX * ctx)"}, {"type": "PARAMLIST", "childNum": "2", "ID": 540, "code": "HMAC_CTX * ctx"}, {"type": "PARAM", "childNum": "0", "ID": 541, "code": "HMAC_CTX * ctx", "location": "83"}, {"type": "IDEN", "childNum": "1", "ID": 542, "code": "ctx"}, {"type": "PARAMTYPE", "childNum": "0", "ID": 543, "code": "HMAC_CTX *"}, {"type": "RETURNTYPE", "childNum": "1", "ID": 544, "code": "int"}, {"type": "COMPSTATE", "childNum": "0", "ID": 545, "code": "", "location": "84"}, {"type": "RETURNSTATE", "childNum": "2", "ID": 546, "code": "return 1 ;", "location": "90"}, {"type": "PRIEXPR", "childNum": "0", "ID": 547, "code": "1"}, {"type": "IFSTATE", "childNum": "1", "ID": 548, "code": "if ( ! hmac_ctx_alloc_mds ( ctx ) )"}, {"type": "COMPSTATE", "childNum": "1", "ID": 549, "code": "", "location": "3"}, {"type": "RETURNSTATE", "childNum": "1", "ID": 550, "code": "return 0 ;", "location": "88"}, {"type": "PRIEXPR", "childNum": "0", "ID": 551, "code": "0"}, {"type": "EXPRSTATE", "childNum": "0", "ID": 552, "code": "hmac_ctx_cleanup ( ctx )", "location": "87"}, {"type": "CALLEXPR", "childNum": "0", "ID": 553, "code": "hmac_ctx_cleanup ( ctx )"}, {"type": "ARGULIST", "childNum": "1", "ID": 554, "code": "ctx"}, {"type": "ARGUMENT", "childNum": "0", "ID": 555, "code": "ctx"}, {"type": "IDEN", "childNum": "0", "ID": 556, "code": "ctx"}, {"type": "CALLEE", "childNum": "0", "ID": 557, "code": "hmac_ctx_cleanup"}, {"type": "IDEN", "childNum": "0", "ID": 558, "code": "hmac_ctx_cleanup"}, {"type": "COND", "childNum": "0", "ID": 559, "code": "! hmac_ctx_alloc_mds ( ctx )", "location": "86"}, {"type": "UNAOP", "childNum": "0", "ID": 560, "code": "! hmac_ctx_alloc_mds ( ctx )"}, {"type": "CALLEXPR", "childNum": "1", "ID": 561, "code": "hmac_ctx_alloc_mds ( ctx )"}, {"type": "ARGULIST", "childNum": "1", "ID": 562, "code": "ctx"}, {"type": "ARGUMENT", "childNum": "0", "ID": 563, "code": "ctx"}, {"type": "IDEN", "childNum": "0", "ID": 564, "code": "ctx"}, {"type": "CALLEE", "childNum": "0", "ID": 565, "code": "hmac_ctx_alloc_mds"}, {"type": "IDEN", "childNum": "0", "ID": 566, "code": "hmac_ctx_alloc_mds"}, {"type": "UNARYOPER", "childNum": "0", "ID": 567, "code": "!"}, {"type": "EXPRSTATE", "childNum": "0", "ID": 568, "code": "hmac_ctx_cleanup ( ctx )", "location": "85"}, {"type": "CALLEXPR", "childNum": "0", "ID": 569, "code": "hmac_ctx_cleanup ( ctx )"}, {"type": "ARGULIST", "childNum": "1", "ID": 570, "code": "ctx"}, {"type": "ARGUMENT", "childNum": "0", "ID": 571, "code": "ctx"}, {"type": "IDEN", "childNum": "0", "ID": 572, "code": "ctx"}, {"type": "CALLEE", "childNum": "0", "ID": 573, "code": "hmac_ctx_cleanup"}, {"type": "IDEN", "childNum": "0", "ID": 574, "code": "hmac_ctx_cleanup"}, {"type": "CFGENTRYNODE", "ID": 575, "code": "ENTRY"}, {"type": "CFGEXITNODE", "ID": 576, "code": "EXIT"}, {"type": "SYS", "ID": 577, "code": "ctx"}, {"type": "SYS", "ID": 578, "code": "hmac_ctx_alloc_mds"}, {"type": "Function", "ID": 579, "name": "hmac_ctx_cleanup"}, {"type": "FUNCDEF", "childNum": "0", "ID": 580, "code": "hmac_ctx_cleanup (HMAC_CTX * ctx)"}, {"type": "PARAMLIST", "childNum": "2", "ID": 581, "code": "HMAC_CTX * ctx"}, {"type": "PARAM", "childNum": "0", "ID": 582, "code": "HMAC_CTX * ctx", "location": "93"}, {"type": "IDEN", "childNum": "1", "ID": 583, "code": "ctx"}, {"type": "PARAMTYPE", "childNum": "0", "ID": 584, "code": "HMAC_CTX *"}, {"type": "RETURNTYPE", "childNum": "1", "ID": 585, "code": "static void"}, {"type": "COMPSTATE", "childNum": "0", "ID": 586, "code": "", "location": "94"}, {"type": "EXPRSTATE", "childNum": "5", "ID": 587, "code": "OPENSSL_cleanse ( ctx -> key , sizeof ( ctx -> key ) )", "location": "100"}, {"type": "CALLEXPR", "childNum": "0", "ID": 588, "code": "OPENSSL_cleanse ( ctx -> key , sizeof ( ctx -> key ) )"}, {"type": "ARGULIST", "childNum": "1", "ID": 589, "code": "ctx -> key"}, {"type": "ARGUMENT", "childNum": "1", "ID": 590, "code": "sizeof ( ctx -> key )"}, {"type": "SIZEOFEXPR", "childNum": "0", "ID": 591, "code": "sizeof ( ctx -> key )"}, {"type": "PTRMEMACCESS", "childNum": "1", "ID": 592, "code": "ctx -> key"}, {"type": "IDEN", "childNum": "1", "ID": 593, "code": "key"}, {"type": "IDEN", "childNum": "0", "ID": 594, "code": "ctx"}, {"type": "SIZEOF", "childNum": "0", "ID": 595, "code": "sizeof"}, {"type": "ARGUMENT", "childNum": "0", "ID": 596, "code": "ctx -> key"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 597, "code": "ctx -> key"}, {"type": "IDEN", "childNum": "1", "ID": 598, "code": "key"}, {"type": "IDEN", "childNum": "0", "ID": 599, "code": "ctx"}, {"type": "CALLEE", "childNum": "0", "ID": 600, "code": "OPENSSL_cleanse"}, {"type": "IDEN", "childNum": "0", "ID": 601, "code": "OPENSSL_cleanse"}, {"type": "EXPRSTATE", "childNum": "4", "ID": 602, "code": "ctx -> key_length = 0", "location": "99"}, {"type": "ASSIGNEXPR", "childNum": "0", "ID": 603, "code": "ctx -> key_length = 0"}, {"type": "PRIEXPR", "childNum": "1", "ID": 604, "code": "0"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 605, "code": "ctx -> key_length"}, {"type": "IDEN", "childNum": "1", "ID": 606, "code": "key_length"}, {"type": "IDEN", "childNum": "0", "ID": 607, "code": "ctx"}, {"type": "EXPRSTATE", "childNum": "3", "ID": 608, "code": "ctx -> md = NULL", "location": "98"}, {"type": "ASSIGNEXPR", "childNum": "0", "ID": 609, "code": "ctx -> md = NULL"}, {"type": "IDEN", "childNum": "1", "ID": 610, "code": "NULL"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 611, "code": "ctx -> md"}, {"type": "IDEN", "childNum": "1", "ID": 612, "code": "md"}, {"type": "IDEN", "childNum": "0", "ID": 613, "code": "ctx"}, {"type": "EXPRSTATE", "childNum": "2", "ID": 614, "code": "EVP_MD_CTX_reset ( ctx -> md_ctx )", "location": "97"}, {"type": "CALLEXPR", "childNum": "0", "ID": 615, "code": "EVP_MD_CTX_reset ( ctx -> md_ctx )"}, {"type": "ARGULIST", "childNum": "1", "ID": 616, "code": "ctx -> md_ctx"}, {"type": "ARGUMENT", "childNum": "0", "ID": 617, "code": "ctx -> md_ctx"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 618, "code": "ctx -> md_ctx"}, {"type": "IDEN", "childNum": "1", "ID": 619, "code": "md_ctx"}, {"type": "IDEN", "childNum": "0", "ID": 620, "code": "ctx"}, {"type": "CALLEE", "childNum": "0", "ID": 621, "code": "EVP_MD_CTX_reset"}, {"type": "IDEN", "childNum": "0", "ID": 622, "code": "EVP_MD_CTX_reset"}, {"type": "EXPRSTATE", "childNum": "1", "ID": 623, "code": "EVP_MD_CTX_reset ( ctx -> o_ctx )", "location": "96"}, {"type": "CALLEXPR", "childNum": "0", "ID": 624, "code": "EVP_MD_CTX_reset ( ctx -> o_ctx )"}, {"type": "ARGULIST", "childNum": "1", "ID": 625, "code": "ctx -> o_ctx"}, {"type": "ARGUMENT", "childNum": "0", "ID": 626, "code": "ctx -> o_ctx"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 627, "code": "ctx -> o_ctx"}, {"type": "IDEN", "childNum": "1", "ID": 628, "code": "o_ctx"}, {"type": "IDEN", "childNum": "0", "ID": 629, "code": "ctx"}, {"type": "CALLEE", "childNum": "0", "ID": 630, "code": "EVP_MD_CTX_reset"}, {"type": "IDEN", "childNum": "0", "ID": 631, "code": "EVP_MD_CTX_reset"}, {"type": "EXPRSTATE", "childNum": "0", "ID": 632, "code": "EVP_MD_CTX_reset ( ctx -> i_ctx )", "location": "95"}, {"type": "CALLEXPR", "childNum": "0", "ID": 633, "code": "EVP_MD_CTX_reset ( ctx -> i_ctx )"}, {"type": "ARGULIST", "childNum": "1", "ID": 634, "code": "ctx -> i_ctx"}, {"type": "ARGUMENT", "childNum": "0", "ID": 635, "code": "ctx -> i_ctx"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 636, "code": "ctx -> i_ctx"}, {"type": "IDEN", "childNum": "1", "ID": 637, "code": "i_ctx"}, {"type": "IDEN", "childNum": "0", "ID": 638, "code": "ctx"}, {"type": "CALLEE", "childNum": "0", "ID": 639, "code": "EVP_MD_CTX_reset"}, {"type": "IDEN", "childNum": "0", "ID": 640, "code": "EVP_MD_CTX_reset"}, {"type": "CFGENTRYNODE", "ID": 641, "code": "ENTRY"}, {"type": "CFGEXITNODE", "ID": 642, "code": "EXIT"}, {"type": "SYS", "ID": 643, "code": "ctx -> md"}, {"type": "SYS", "ID": 644, "code": "NULL"}, {"type": "SYS", "ID": 645, "code": "ctx -> key_length"}, {"type": "SYS", "ID": 646, "code": "ctx"}, {"type": "SYS", "ID": 647, "code": "ctx -> md_ctx"}, {"type": "SYS", "ID": 648, "code": "ctx -> key"}, {"type": "SYS", "ID": 649, "code": "ctx -> o_ctx"}, {"type": "SYS", "ID": 650, "code": "* ctx"}, {"type": "SYS", "ID": 651, "code": "ctx -> i_ctx"}, {"type": "Function", "ID": 0, "name": "pkcs12_gen_mac"}, {"type": "FUNCDEF", "childNum": "0", "ID": 1, "code": "pkcs12_gen_mac (PKCS12 * p12 , const char * pass , int passlen , unsigned char * mac , unsigned int * maclen , int ( * pkcs12_key_gen ) ( const char * pass , int passlen , unsigned char * salt , int slen , int id , int iter , int n , unsigned char * out , const EVP_MD * md_type ))"}, {"type": "PARAMLIST", "childNum": "2", "ID": 2, "code": "PKCS12 * p12 , const char * pass , int passlen , unsigned char * mac , unsigned int * maclen , int ( * pkcs12_key_gen ) ( const char * pass , int passlen , unsigned char * salt , int slen , int id , int iter , int n , unsigned char * out , const EVP_MD * md_type )"}, {"type": "PARAM", "childNum": "5", "ID": 3, "code": "int ( * pkcs12_key_gen ) ( const char * pass , int passlen , unsigned char * salt , int slen , int id , int iter , int n , unsigned char * out , const EVP_MD * md_type )", "location": "3"}, {"type": "IDEN", "childNum": "1", "ID": 4, "code": "pkcs12_key_gen"}, {"type": "PARAMTYPE", "childNum": "0", "ID": 5, "code": "(( const char * pass , int passlen , unsigned char * salt , int slen , int id , int iter , int n , unsigned char * out , const EVP_MD * md_type ) int) *"}, {"type": "PARAM", "childNum": "4", "ID": 6, "code": "unsigned int * maclen", "location": "2"}, {"type": "IDEN", "childNum": "1", "ID": 7, "code": "maclen"}, {"type": "PARAMTYPE", "childNum": "0", "ID": 8, "code": "unsigned int *"}, {"type": "PARAM", "childNum": "3", "ID": 9, "code": "unsigned char * mac", "location": "2"}, {"type": "IDEN", "childNum": "1", "ID": 10, "code": "mac"}, {"type": "PARAMTYPE", "childNum": "0", "ID": 11, "code": "unsigned char *"}, {"type": "PARAM", "childNum": "2", "ID": 12, "code": "int passlen", "location": "1"}, {"type": "IDEN", "childNum": "1", "ID": 13, "code": "passlen"}, {"type": "PARAMTYPE", "childNum": "0", "ID": 14, "code": "int"}, {"type": "PARAM", "childNum": "1", "ID": 15, "code": "const char * pass", "location": "1"}, {"type": "IDEN", "childNum": "1", "ID": 16, "code": "pass"}, {"type": "PARAMTYPE", "childNum": "0", "ID": 17, "code": "const char *"}, {"type": "PARAM", "childNum": "0", "ID": 18, "code": "PKCS12 * p12", "location": "1"}, {"type": "IDEN", "childNum": "1", "ID": 19, "code": "p12"}, {"type": "PARAMTYPE", "childNum": "0", "ID": 20, "code": "PKCS12 *"}, {"type": "RETURNTYPE", "childNum": "1", "ID": 21, "code": "static int"}, {"type": "COMPSTATE", "childNum": "0", "ID": 22, "code": "", "location": "8"}, {"type": "RETURNSTATE", "childNum": "22", "ID": 23, "code": "return 1 ;", "location": "67"}, {"type": "PRIEXPR", "childNum": "0", "ID": 24, "code": "1"}, {"type": "EXPRSTATE", "childNum": "21", "ID": 25, "code": "HMAC_CTX_free ( hmac )", "location": "66"}, {"type": "CALLEXPR", "childNum": "0", "ID": 26, "code": "HMAC_CTX_free ( hmac )"}, {"type": "ARGULIST", "childNum": "1", "ID": 27, "code": "hmac"}, {"type": "ARGUMENT", "childNum": "0", "ID": 28, "code": "hmac"}, {"type": "IDEN", "childNum": "0", "ID": 29, "code": "hmac"}, {"type": "CALLEE", "childNum": "0", "ID": 30, "code": "HMAC_CTX_free"}, {"type": "IDEN", "childNum": "0", "ID": 31, "code": "HMAC_CTX_free"}, {"type": "IFSTATE", "childNum": "20", "ID": 32, "code": "if ( ( hmac = HMAC_CTX_new ( ) ) == NULL || ! HMAC_Init_ex ( hmac , key , md_size , md_type , NULL ) || ! HMAC_Update ( hmac , p12 -> authsafes -> d . data -> data , p12 -> authsafes -> d . data -> length ) || ! HMAC_Final ( hmac , mac , maclen ) )"}, {"type": "COMPSTATE", "childNum": "1", "ID": 33, "code": "", "location": "55"}, {"type": "RETURNSTATE", "childNum": "1", "ID": 34, "code": "return 0 ;", "location": "64"}, {"type": "PRIEXPR", "childNum": "0", "ID": 35, "code": "0"}, {"type": "EXPRSTATE", "childNum": "0", "ID": 36, "code": "HMAC_CTX_free ( hmac )", "location": "63"}, {"type": "CALLEXPR", "childNum": "0", "ID": 37, "code": "HMAC_CTX_free ( hmac )"}, {"type": "ARGULIST", "childNum": "1", "ID": 38, "code": "hmac"}, {"type": "ARGUMENT", "childNum": "0", "ID": 39, "code": "hmac"}, {"type": "IDEN", "childNum": "0", "ID": 40, "code": "hmac"}, {"type": "CALLEE", "childNum": "0", "ID": 41, "code": "HMAC_CTX_free"}, {"type": "IDEN", "childNum": "0", "ID": 42, "code": "HMAC_CTX_free"}, {"type": "COND", "childNum": "0", "ID": 43, "code": "( hmac = HMAC_CTX_new ( ) ) == NULL || ! HMAC_Init_ex ( hmac , key , md_size , md_type , NULL ) || ! HMAC_Update ( hmac , p12 -> authsafes -> d . data -> data , p12 -> authsafes -> d . data -> length ) || ! HMAC_Final ( hmac , mac , maclen )", "location": "58"}, {"type": "OREXPR", "childNum": "0", "ID": 44, "code": "( hmac = HMAC_CTX_new ( ) ) == NULL || ! HMAC_Init_ex ( hmac , key , md_size , md_type , NULL ) || ! HMAC_Update ( hmac , p12 -> authsafes -> d . data -> data , p12 -> authsafes -> d . data -> length ) || ! HMAC_Final ( hmac , mac , maclen )"}, {"type": "OREXPR", "childNum": "1", "ID": 45, "code": "! HMAC_Init_ex ( hmac , key , md_size , md_type , NULL ) || ! HMAC_Update ( hmac , p12 -> authsafes -> d . data -> data , p12 -> authsafes -> d . data -> length ) || ! HMAC_Final ( hmac , mac , maclen )"}, {"type": "OREXPR", "childNum": "1", "ID": 46, "code": "! HMAC_Update ( hmac , p12 -> authsafes -> d . data -> data , p12 -> authsafes -> d . data -> length ) || ! HMAC_Final ( hmac , mac , maclen )"}, {"type": "UNAOP", "childNum": "1", "ID": 47, "code": "! HMAC_Final ( hmac , mac , maclen )"}, {"type": "CALLEXPR", "childNum": "1", "ID": 48, "code": "HMAC_Final ( hmac , mac , maclen )"}, {"type": "ARGULIST", "childNum": "1", "ID": 49, "code": "hmac"}, {"type": "ARGUMENT", "childNum": "2", "ID": 50, "code": "maclen"}, {"type": "IDEN", "childNum": "0", "ID": 51, "code": "maclen"}, {"type": "ARGUMENT", "childNum": "1", "ID": 52, "code": "mac"}, {"type": "IDEN", "childNum": "0", "ID": 53, "code": "mac"}, {"type": "ARGUMENT", "childNum": "0", "ID": 54, "code": "hmac"}, {"type": "IDEN", "childNum": "0", "ID": 55, "code": "hmac"}, {"type": "CALLEE", "childNum": "0", "ID": 56, "code": "HMAC_Final"}, {"type": "IDEN", "childNum": "0", "ID": 57, "code": "HMAC_Final"}, {"type": "UNARYOPER", "childNum": "0", "ID": 58, "code": "!"}, {"type": "UNAOP", "childNum": "0", "ID": 59, "code": "! HMAC_Update ( hmac , p12 -> authsafes -> d . data -> data , p12 -> authsafes -> d . data -> length )"}, {"type": "CALLEXPR", "childNum": "1", "ID": 60, "code": "HMAC_Update ( hmac , p12 -> authsafes -> d . data -> data , p12 -> authsafes -> d . data -> length )"}, {"type": "ARGULIST", "childNum": "1", "ID": 61, "code": "hmac"}, {"type": "ARGUMENT", "childNum": "2", "ID": 62, "code": "p12 -> authsafes -> d . data -> length"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 63, "code": "p12 -> authsafes -> d . data -> length"}, {"type": "IDEN", "childNum": "1", "ID": 64, "code": "length"}, {"type": "MEMACCESS", "childNum": "0", "ID": 65, "code": "p12 -> authsafes -> d . data"}, {"type": "IDEN", "childNum": "1", "ID": 66, "code": "data"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 67, "code": "p12 -> authsafes -> d"}, {"type": "IDEN", "childNum": "1", "ID": 68, "code": "d"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 69, "code": "p12 -> authsafes"}, {"type": "IDEN", "childNum": "1", "ID": 70, "code": "authsafes"}, {"type": "IDEN", "childNum": "0", "ID": 71, "code": "p12"}, {"type": "ARGUMENT", "childNum": "1", "ID": 72, "code": "p12 -> authsafes -> d . data -> data"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 73, "code": "p12 -> authsafes -> d . data -> data"}, {"type": "IDEN", "childNum": "1", "ID": 74, "code": "data"}, {"type": "MEMACCESS", "childNum": "0", "ID": 75, "code": "p12 -> authsafes -> d . data"}, {"type": "IDEN", "childNum": "1", "ID": 76, "code": "data"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 77, "code": "p12 -> authsafes -> d"}, {"type": "IDEN", "childNum": "1", "ID": 78, "code": "d"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 79, "code": "p12 -> authsafes"}, {"type": "IDEN", "childNum": "1", "ID": 80, "code": "authsafes"}, {"type": "IDEN", "childNum": "0", "ID": 81, "code": "p12"}, {"type": "ARGUMENT", "childNum": "0", "ID": 82, "code": "hmac"}, {"type": "IDEN", "childNum": "0", "ID": 83, "code": "hmac"}, {"type": "CALLEE", "childNum": "0", "ID": 84, "code": "HMAC_Update"}, {"type": "IDEN", "childNum": "0", "ID": 85, "code": "HMAC_Update"}, {"type": "UNARYOPER", "childNum": "0", "ID": 86, "code": "!"}, {"type": "UNAOP", "childNum": "0", "ID": 87, "code": "! HMAC_Init_ex ( hmac , key , md_size , md_type , NULL )"}, {"type": "CALLEXPR", "childNum": "1", "ID": 88, "code": "HMAC_Init_ex ( hmac , key , md_size , md_type , NULL )"}, {"type": "ARGULIST", "childNum": "1", "ID": 89, "code": "hmac"}, {"type": "ARGUMENT", "childNum": "4", "ID": 90, "code": "NULL"}, {"type": "IDEN", "childNum": "0", "ID": 91, "code": "NULL"}, {"type": "ARGUMENT", "childNum": "3", "ID": 92, "code": "md_type"}, {"type": "IDEN", "childNum": "0", "ID": 93, "code": "md_type"}, {"type": "ARGUMENT", "childNum": "2", "ID": 94, "code": "md_size"}, {"type": "IDEN", "childNum": "0", "ID": 95, "code": "md_size"}, {"type": "ARGUMENT", "childNum": "1", "ID": 96, "code": "key"}, {"type": "IDEN", "childNum": "0", "ID": 97, "code": "key"}, {"type": "ARGUMENT", "childNum": "0", "ID": 98, "code": "hmac"}, {"type": "IDEN", "childNum": "0", "ID": 99, "code": "hmac"}, {"type": "CALLEE", "childNum": "0", "ID": 100, "code": "HMAC_Init_ex"}, {"type": "IDEN", "childNum": "0", "ID": 101, "code": "HMAC_Init_ex"}, {"type": "UNARYOPER", "childNum": "0", "ID": 102, "code": "!"}, {"type": "EQEXPR", "childNum": "0", "ID": 103, "code": "( hmac = HMAC_CTX_new ( ) ) == NULL"}, {"type": "IDEN", "childNum": "1", "ID": 104, "code": "NULL"}, {"type": "ASSIGNEXPR", "childNum": "0", "ID": 105, "code": "hmac = HMAC_CTX_new ( )"}, {"type": "CALLEXPR", "childNum": "1", "ID": 106, "code": "HMAC_CTX_new ( )"}, {"type": "ARGULIST", "childNum": "1", "ID": 107, "code": ""}, {"type": "CALLEE", "childNum": "0", "ID": 108, "code": "HMAC_CTX_new"}, {"type": "IDEN", "childNum": "0", "ID": 109, "code": "HMAC_CTX_new"}, {"type": "IDEN", "childNum": "0", "ID": 110, "code": "hmac"}, {"type": "IFSTATE", "childNum": "19", "ID": 111, "code": "if ( ( md_type_nid == NID_id_GostR3411_94 || md_type_nid == NID_id_GostR3411_2012_256 || md_type_nid == NID_id_GostR3411_2012_512 ) && ! getenv ( \\\"LEGACY_GOST_PKCS12\\"}, {"type": "ELSESTATE", "childNum": "0", "ID": 112, "code": "else"}, {"type": "IFSTATE", "childNum": "0", "ID": 113, "code": "if ( ! ( * pkcs12_key_gen ) ( pass , passlen , salt , saltlen , PKCS12_MAC_ID , iter , md_size , key , md_type ) )"}, {"type": "COMPSTATE", "childNum": "1", "ID": 114, "code": "", "location": "47"}, {"type": "RETURNSTATE", "childNum": "1", "ID": 115, "code": "return 0 ;", "location": "56"}, {"type": "PRIEXPR", "childNum": "0", "ID": 116, "code": "0"}, {"type": "EXPRSTATE", "childNum": "0", "ID": 117, "code": "PKCS12err ( PKCS12_F_PKCS12_GEN_MAC , PKCS12_R_KEY_GEN_ERROR )", "location": "55"}, {"type": "CALLEXPR", "childNum": "0", "ID": 118, "code": "PKCS12err ( PKCS12_F_PKCS12_GEN_MAC , PKCS12_R_KEY_GEN_ERROR )"}, {"type": "ARGULIST", "childNum": "1", "ID": 119, "code": "PKCS12_F_PKCS12_GEN_MAC"}, {"type": "ARGUMENT", "childNum": "1", "ID": 120, "code": "PKCS12_R_KEY_GEN_ERROR"}, {"type": "IDEN", "childNum": "0", "ID": 121, "code": "PKCS12_R_KEY_GEN_ERROR"}, {"type": "ARGUMENT", "childNum": "0", "ID": 122, "code": "PKCS12_F_PKCS12_GEN_MAC"}, {"type": "IDEN", "childNum": "0", "ID": 123, "code": "PKCS12_F_PKCS12_GEN_MAC"}, {"type": "CALLEE", "childNum": "0", "ID": 124, "code": "PKCS12err"}, {"type": "IDEN", "childNum": "0", "ID": 125, "code": "PKCS12err"}, {"type": "COND", "childNum": "0", "ID": 126, "code": "! ( * pkcs12_key_gen ) ( pass , passlen , salt , saltlen , PKCS12_MAC_ID , iter , md_size , key , md_type )", "location": "53"}, {"type": "UNAOP", "childNum": "0", "ID": 127, "code": "! ( * pkcs12_key_gen ) ( pass , passlen , salt , saltlen , PKCS12_MAC_ID , iter , md_size , key , md_type )"}, {"type": "CALLEXPR", "childNum": "1", "ID": 128, "code": "( * pkcs12_key_gen ) ( pass , passlen , salt , saltlen , PKCS12_MAC_ID , iter , md_size , key , md_type )"}, {"type": "ARGULIST", "childNum": "1", "ID": 129, "code": "pass"}, {"type": "ARGUMENT", "childNum": "8", "ID": 130, "code": "md_type"}, {"type": "IDEN", "childNum": "0", "ID": 131, "code": "md_type"}, {"type": "ARGUMENT", "childNum": "7", "ID": 132, "code": "key"}, {"type": "IDEN", "childNum": "0", "ID": 133, "code": "key"}, {"type": "ARGUMENT", "childNum": "6", "ID": 134, "code": "md_size"}, {"type": "IDEN", "childNum": "0", "ID": 135, "code": "md_size"}, {"type": "ARGUMENT", "childNum": "5", "ID": 136, "code": "iter"}, {"type": "IDEN", "childNum": "0", "ID": 137, "code": "iter"}, {"type": "ARGUMENT", "childNum": "4", "ID": 138, "code": "PKCS12_MAC_ID"}, {"type": "IDEN", "childNum": "0", "ID": 139, "code": "PKCS12_MAC_ID"}, {"type": "ARGUMENT", "childNum": "3", "ID": 140, "code": "saltlen"}, {"type": "IDEN", "childNum": "0", "ID": 141, "code": "saltlen"}, {"type": "ARGUMENT", "childNum": "2", "ID": 142, "code": "salt"}, {"type": "IDEN", "childNum": "0", "ID": 143, "code": "salt"}, {"type": "ARGUMENT", "childNum": "1", "ID": 144, "code": "passlen"}, {"type": "IDEN", "childNum": "0", "ID": 145, "code": "passlen"}, {"type": "ARGUMENT", "childNum": "0", "ID": 146, "code": "pass"}, {"type": "IDEN", "childNum": "0", "ID": 147, "code": "pass"}, {"type": "CALLEE", "childNum": "0", "ID": 148, "code": "* pkcs12_key_gen"}, {"type": "UNAOP", "childNum": "0", "ID": 149, "code": "* pkcs12_key_gen"}, {"type": "IDEN", "childNum": "1", "ID": 150, "code": "pkcs12_key_gen"}, {"type": "UNARYOPER", "childNum": "0", "ID": 151, "code": "*"}, {"type": "UNARYOPER", "childNum": "0", "ID": 152, "code": "!"}, {"type": "COMPSTATE", "childNum": "1", "ID": 153, "code": "", "location": "38"}, {"type": "IFSTATE", "childNum": "1", "ID": 154, "code": "if ( ! pkcs12_gen_gost_mac_key ( pass , passlen , salt , saltlen , iter , md_size , key , md_type ) )"}, {"type": "COMPSTATE", "childNum": "1", "ID": 155, "code": "", "location": "41"}, {"type": "RETURNSTATE", "childNum": "1", "ID": 156, "code": "return 0 ;", "location": "50"}, {"type": "PRIEXPR", "childNum": "0", "ID": 157, "code": "0"}, {"type": "EXPRSTATE", "childNum": "0", "ID": 158, "code": "PKCS12err ( PKCS12_F_PKCS12_GEN_MAC , PKCS12_R_KEY_GEN_ERROR )", "location": "49"}, {"type": "CALLEXPR", "childNum": "0", "ID": 159, "code": "PKCS12err ( PKCS12_F_PKCS12_GEN_MAC , PKCS12_R_KEY_GEN_ERROR )"}, {"type": "ARGULIST", "childNum": "1", "ID": 160, "code": "PKCS12_F_PKCS12_GEN_MAC"}, {"type": "ARGUMENT", "childNum": "1", "ID": 161, "code": "PKCS12_R_KEY_GEN_ERROR"}, {"type": "IDEN", "childNum": "0", "ID": 162, "code": "PKCS12_R_KEY_GEN_ERROR"}, {"type": "ARGUMENT", "childNum": "0", "ID": 163, "code": "PKCS12_F_PKCS12_GEN_MAC"}, {"type": "IDEN", "childNum": "0", "ID": 164, "code": "PKCS12_F_PKCS12_GEN_MAC"}, {"type": "CALLEE", "childNum": "0", "ID": 165, "code": "PKCS12err"}, {"type": "IDEN", "childNum": "0", "ID": 166, "code": "PKCS12err"}, {"type": "COND", "childNum": "0", "ID": 167, "code": "! pkcs12_gen_gost_mac_key ( pass , passlen , salt , saltlen , iter , md_size , key , md_type )", "location": "47"}, {"type": "UNAOP", "childNum": "0", "ID": 168, "code": "! pkcs12_gen_gost_mac_key ( pass , passlen , salt , saltlen , iter , md_size , key , md_type )"}, {"type": "CALLEXPR", "childNum": "1", "ID": 169, "code": "pkcs12_gen_gost_mac_key ( pass , passlen , salt , saltlen , iter , md_size , key , md_type )"}, {"type": "ARGULIST", "childNum": "1", "ID": 170, "code": "pass"}, {"type": "ARGUMENT", "childNum": "7", "ID": 171, "code": "md_type"}, {"type": "IDEN", "childNum": "0", "ID": 172, "code": "md_type"}, {"type": "ARGUMENT", "childNum": "6", "ID": 173, "code": "key"}, {"type": "IDEN", "childNum": "0", "ID": 174, "code": "key"}, {"type": "ARGUMENT", "childNum": "5", "ID": 175, "code": "md_size"}, {"type": "IDEN", "childNum": "0", "ID": 176, "code": "md_size"}, {"type": "ARGUMENT", "childNum": "4", "ID": 177, "code": "iter"}, {"type": "IDEN", "childNum": "0", "ID": 178, "code": "iter"}, {"type": "ARGUMENT", "childNum": "3", "ID": 179, "code": "saltlen"}, {"type": "IDEN", "childNum": "0", "ID": 180, "code": "saltlen"}, {"type": "ARGUMENT", "childNum": "2", "ID": 181, "code": "salt"}, {"type": "IDEN", "childNum": "0", "ID": 182, "code": "salt"}, {"type": "ARGUMENT", "childNum": "1", "ID": 183, "code": "passlen"}, {"type": "IDEN", "childNum": "0", "ID": 184, "code": "passlen"}, {"type": "ARGUMENT", "childNum": "0", "ID": 185, "code": "pass"}, {"type": "IDEN", "childNum": "0", "ID": 186, "code": "pass"}, {"type": "CALLEE", "childNum": "0", "ID": 187, "code": "pkcs12_gen_gost_mac_key"}, {"type": "IDEN", "childNum": "0", "ID": 188, "code": "pkcs12_gen_gost_mac_key"}, {"type": "UNARYOPER", "childNum": "0", "ID": 189, "code": "!"}, {"type": "EXPRSTATE", "childNum": "0", "ID": 190, "code": "md_size = TK26_MAC_KEY_LEN", "location": "46"}, {"type": "ASSIGNEXPR", "childNum": "0", "ID": 191, "code": "md_size = TK26_MAC_KEY_LEN"}, {"type": "IDEN", "childNum": "1", "ID": 192, "code": "TK26_MAC_KEY_LEN"}, {"type": "IDEN", "childNum": "0", "ID": 193, "code": "md_size"}, {"type": "COND", "childNum": "0", "ID": 194, "code": "( md_type_nid == NID_id_GostR3411_94 || md_type_nid == NID_id_GostR3411_2012_256 || md_type_nid == NID_id_GostR3411_2012_512 ) && ! getenv ( \\\"LEGACY_GOST_PKCS12\\", "location": "42"}, {"type": "ANDEXPR", "childNum": "0", "ID": 195, "code": "( md_type_nid == NID_id_GostR3411_94 || md_type_nid == NID_id_GostR3411_2012_256 || md_type_nid == NID_id_GostR3411_2012_512 ) && ! getenv ( \\\"LEGACY_GOST_PKCS12\\"}, {"type": "UNAOP", "childNum": "1", "ID": 196, "code": "! getenv ( \\\"LEGACY_GOST_PKCS12\\"}, {"type": "CALLEXPR", "childNum": "1", "ID": 197, "code": "getenv ( \\\"LEGACY_GOST_PKCS12\\"}, {"type": "ARGULIST", "childNum": "1", "ID": 198, "code": "\\\"LEGACY_GOST_PKCS12\\\""}, {"type": "ARGUMENT", "childNum": "0", "ID": 199, "code": "\\\"LEGACY_GOST_PKCS12\\\""}, {"type": "PRIEXPR", "childNum": "0", "ID": 200, "code": "\\\"LEGACY_GOST_PKCS12\\\""}, {"type": "CALLEE", "childNum": "0", "ID": 201, "code": "getenv"}, {"type": "IDEN", "childNum": "0", "ID": 202, "code": "getenv"}, {"type": "UNARYOPER", "childNum": "0", "ID": 203, "code": "!"}, {"type": "OREXPR", "childNum": "0", "ID": 204, "code": "md_type_nid == NID_id_GostR3411_94 || md_type_nid == NID_id_GostR3411_2012_256 || md_type_nid == NID_id_GostR3411_2012_512"}, {"type": "OREXPR", "childNum": "1", "ID": 205, "code": "md_type_nid == NID_id_GostR3411_2012_256 || md_type_nid == NID_id_GostR3411_2012_512"}, {"type": "EQEXPR", "childNum": "1", "ID": 206, "code": "md_type_nid == NID_id_GostR3411_2012_512"}, {"type": "IDEN", "childNum": "1", "ID": 207, "code": "NID_id_GostR3411_2012_512"}, {"type": "IDEN", "childNum": "0", "ID": 208, "code": "md_type_nid"}, {"type": "EQEXPR", "childNum": "0", "ID": 209, "code": "md_type_nid == NID_id_GostR3411_2012_256"}, {"type": "IDEN", "childNum": "1", "ID": 210, "code": "NID_id_GostR3411_2012_256"}, {"type": "IDEN", "childNum": "0", "ID": 211, "code": "md_type_nid"}, {"type": "EQEXPR", "childNum": "0", "ID": 212, "code": "md_type_nid == NID_id_GostR3411_94"}, {"type": "IDEN", "childNum": "1", "ID": 213, "code": "NID_id_GostR3411_94"}, {"type": "IDEN", "childNum": "0", "ID": 214, "code": "md_type_nid"}, {"type": "IFSTATE", "childNum": "18", "ID": 215, "code": "if ( md_size < 0 )"}, {"type": "RETURNSTATE", "childNum": "1", "ID": 216, "code": "return 0 ;", "location": "41"}, {"type": "PRIEXPR", "childNum": "0", "ID": 217, "code": "0"}, {"type": "COND", "childNum": "0", "ID": 218, "code": "md_size < 0", "location": "40"}, {"type": "RELATIONEXPRE", "childNum": "0", "ID": 219, "code": "md_size < 0"}, {"type": "PRIEXPR", "childNum": "1", "ID": 220, "code": "0"}, {"type": "IDEN", "childNum": "0", "ID": 221, "code": "md_size"}, {"type": "EXPRSTATE", "childNum": "17", "ID": 222, "code": "md_type_nid = EVP_MD_type ( md_type )", "location": "39"}, {"type": "ASSIGNEXPR", "childNum": "0", "ID": 223, "code": "md_type_nid = EVP_MD_type ( md_type )"}, {"type": "CALLEXPR", "childNum": "1", "ID": 224, "code": "EVP_MD_type ( md_type )"}, {"type": "ARGULIST", "childNum": "1", "ID": 225, "code": "md_type"}, {"type": "ARGUMENT", "childNum": "0", "ID": 226, "code": "md_type"}, {"type": "IDEN", "childNum": "0", "ID": 227, "code": "md_type"}, {"type": "CALLEE", "childNum": "0", "ID": 228, "code": "EVP_MD_type"}, {"type": "IDEN", "childNum": "0", "ID": 229, "code": "EVP_MD_type"}, {"type": "IDEN", "childNum": "0", "ID": 230, "code": "md_type_nid"}, {"type": "EXPRSTATE", "childNum": "16", "ID": 231, "code": "md_size = EVP_MD_size ( md_type )", "location": "38"}, {"type": "ASSIGNEXPR", "childNum": "0", "ID": 232, "code": "md_size = EVP_MD_size ( md_type )"}, {"type": "CALLEXPR", "childNum": "1", "ID": 233, "code": "EVP_MD_size ( md_type )"}, {"type": "ARGULIST", "childNum": "1", "ID": 234, "code": "md_type"}, {"type": "ARGUMENT", "childNum": "0", "ID": 235, "code": "md_type"}, {"type": "IDEN", "childNum": "0", "ID": 236, "code": "md_type"}, {"type": "CALLEE", "childNum": "0", "ID": 237, "code": "EVP_MD_size"}, {"type": "IDEN", "childNum": "0", "ID": 238, "code": "EVP_MD_size"}, {"type": "IDEN", "childNum": "0", "ID": 239, "code": "md_size"}, {"type": "IFSTATE", "childNum": "15", "ID": 240, "code": "if ( ( md_type = EVP_get_digestbyobj ( macoid ) ) == NULL )"}, {"type": "COMPSTATE", "childNum": "1", "ID": 241, "code": "", "location": "27"}, {"type": "RETURNSTATE", "childNum": "1", "ID": 242, "code": "return 0 ;", "location": "36"}, {"type": "PRIEXPR", "childNum": "0", "ID": 243, "code": "0"}, {"type": "EXPRSTATE", "childNum": "0", "ID": 244, "code": "PKCS12err ( PKCS12_F_PKCS12_GEN_MAC , PKCS12_R_UNKNOWN_DIGEST_ALGORITHM )", "location": "35"}, {"type": "CALLEXPR", "childNum": "0", "ID": 245, "code": "PKCS12err ( PKCS12_F_PKCS12_GEN_MAC , PKCS12_R_UNKNOWN_DIGEST_ALGORITHM )"}, {"type": "ARGULIST", "childNum": "1", "ID": 246, "code": "PKCS12_F_PKCS12_GEN_MAC"}, {"type": "ARGUMENT", "childNum": "1", "ID": 247, "code": "PKCS12_R_UNKNOWN_DIGEST_ALGORITHM"}, {"type": "IDEN", "childNum": "0", "ID": 248, "code": "PKCS12_R_UNKNOWN_DIGEST_ALGORITHM"}, {"type": "ARGUMENT", "childNum": "0", "ID": 249, "code": "PKCS12_F_PKCS12_GEN_MAC"}, {"type": "IDEN", "childNum": "0", "ID": 250, "code": "PKCS12_F_PKCS12_GEN_MAC"}, {"type": "CALLEE", "childNum": "0", "ID": 251, "code": "PKCS12err"}, {"type": "IDEN", "childNum": "0", "ID": 252, "code": "PKCS12err"}, {"type": "COND", "childNum": "0", "ID": 253, "code": "( md_type = EVP_get_digestbyobj ( macoid ) ) == NULL", "location": "34"}, {"type": "EQEXPR", "childNum": "0", "ID": 254, "code": "( md_type = EVP_get_digestbyobj ( macoid ) ) == NULL"}, {"type": "IDEN", "childNum": "1", "ID": 255, "code": "NULL"}, {"type": "ASSIGNEXPR", "childNum": "0", "ID": 256, "code": "md_type = EVP_get_digestbyobj ( macoid )"}, {"type": "CALLEXPR", "childNum": "1", "ID": 257, "code": "EVP_get_digestbyobj ( macoid )"}, {"type": "ARGULIST", "childNum": "1", "ID": 258, "code": "macoid"}, {"type": "ARGUMENT", "childNum": "0", "ID": 259, "code": "macoid"}, {"type": "IDEN", "childNum": "0", "ID": 260, "code": "macoid"}, {"type": "CALLEE", "childNum": "0", "ID": 261, "code": "EVP_get_digestbyobj"}, {"type": "IDEN", "childNum": "0", "ID": 262, "code": "EVP_get_digestbyobj"}, {"type": "IDEN", "childNum": "0", "ID": 263, "code": "md_type"}, {"type": "EXPRSTATE", "childNum": "14", "ID": 264, "code": "X509_ALGOR_get0 ( & macoid , NULL , NULL , macalg )", "location": "33"}, {"type": "CALLEXPR", "childNum": "0", "ID": 265, "code": "X509_ALGOR_get0 ( & macoid , NULL , NULL , macalg )"}, {"type": "ARGULIST", "childNum": "1", "ID": 266, "code": "& macoid"}, {"type": "ARGUMENT", "childNum": "3", "ID": 267, "code": "macalg"}, {"type": "IDEN", "childNum": "0", "ID": 268, "code": "macalg"}, {"type": "ARGUMENT", "childNum": "2", "ID": 269, "code": "NULL"}, {"type": "IDEN", "childNum": "0", "ID": 270, "code": "NULL"}, {"type": "ARGUMENT", "childNum": "1", "ID": 271, "code": "NULL"}, {"type": "IDEN", "childNum": "0", "ID": 272, "code": "NULL"}, {"type": "ARGUMENT", "childNum": "0", "ID": 273, "code": "& macoid"}, {"type": "UNAOP", "childNum": "0", "ID": 274, "code": "& macoid"}, {"type": "IDEN", "childNum": "1", "ID": 275, "code": "macoid"}, {"type": "UNARYOPER", "childNum": "0", "ID": 276, "code": "&"}, {"type": "CALLEE", "childNum": "0", "ID": 277, "code": "X509_ALGOR_get0"}, {"type": "IDEN", "childNum": "0", "ID": 278, "code": "X509_ALGOR_get0"}, {"type": "EXPRSTATE", "childNum": "13", "ID": 279, "code": "X509_SIG_get0 ( p12 -> mac -> dinfo , & macalg , NULL )", "location": "32"}, {"type": "CALLEXPR", "childNum": "0", "ID": 280, "code": "X509_SIG_get0 ( p12 -> mac -> dinfo , & macalg , NULL )"}, {"type": "ARGULIST", "childNum": "1", "ID": 281, "code": "p12 -> mac -> dinfo"}, {"type": "ARGUMENT", "childNum": "2", "ID": 282, "code": "NULL"}, {"type": "IDEN", "childNum": "0", "ID": 283, "code": "NULL"}, {"type": "ARGUMENT", "childNum": "1", "ID": 284, "code": "& macalg"}, {"type": "UNAOP", "childNum": "0", "ID": 285, "code": "& macalg"}, {"type": "IDEN", "childNum": "1", "ID": 286, "code": "macalg"}, {"type": "UNARYOPER", "childNum": "0", "ID": 287, "code": "&"}, {"type": "ARGUMENT", "childNum": "0", "ID": 288, "code": "p12 -> mac -> dinfo"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 289, "code": "p12 -> mac -> dinfo"}, {"type": "IDEN", "childNum": "1", "ID": 290, "code": "dinfo"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 291, "code": "p12 -> mac"}, {"type": "IDEN", "childNum": "1", "ID": 292, "code": "mac"}, {"type": "IDEN", "childNum": "0", "ID": 293, "code": "p12"}, {"type": "CALLEE", "childNum": "0", "ID": 294, "code": "X509_SIG_get0"}, {"type": "IDEN", "childNum": "0", "ID": 295, "code": "X509_SIG_get0"}, {"type": "IFSTATE", "childNum": "12", "ID": 296, "code": "if ( ! p12 -> mac -> iter )"}, {"type": "ELSESTATE", "childNum": "0", "ID": 297, "code": "else"}, {"type": "EXPRSTATE", "childNum": "0", "ID": 298, "code": "iter = ASN1_INTEGER_get ( p12 -> mac -> iter )", "location": "31"}, {"type": "ASSIGNEXPR", "childNum": "0", "ID": 299, "code": "iter = ASN1_INTEGER_get ( p12 -> mac -> iter )"}, {"type": "CALLEXPR", "childNum": "1", "ID": 300, "code": "ASN1_INTEGER_get ( p12 -> mac -> iter )"}, {"type": "ARGULIST", "childNum": "1", "ID": 301, "code": "p12 -> mac -> iter"}, {"type": "ARGUMENT", "childNum": "0", "ID": 302, "code": "p12 -> mac -> iter"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 303, "code": "p12 -> mac -> iter"}, {"type": "IDEN", "childNum": "1", "ID": 304, "code": "iter"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 305, "code": "p12 -> mac"}, {"type": "IDEN", "childNum": "1", "ID": 306, "code": "mac"}, {"type": "IDEN", "childNum": "0", "ID": 307, "code": "p12"}, {"type": "CALLEE", "childNum": "0", "ID": 308, "code": "ASN1_INTEGER_get"}, {"type": "IDEN", "childNum": "0", "ID": 309, "code": "ASN1_INTEGER_get"}, {"type": "IDEN", "childNum": "0", "ID": 310, "code": "iter"}, {"type": "EXPRSTATE", "childNum": "1", "ID": 311, "code": "iter = 1", "location": "29"}, {"type": "ASSIGNEXPR", "childNum": "0", "ID": 312, "code": "iter = 1"}, {"type": "PRIEXPR", "childNum": "1", "ID": 313, "code": "1"}, {"type": "IDEN", "childNum": "0", "ID": 314, "code": "iter"}, {"type": "COND", "childNum": "0", "ID": 315, "code": "! p12 -> mac -> iter", "location": "28"}, {"type": "UNAOP", "childNum": "0", "ID": 316, "code": "! p12 -> mac -> iter"}, {"type": "PTRMEMACCESS", "childNum": "1", "ID": 317, "code": "p12 -> mac -> iter"}, {"type": "IDEN", "childNum": "1", "ID": 318, "code": "iter"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 319, "code": "p12 -> mac"}, {"type": "IDEN", "childNum": "1", "ID": 320, "code": "mac"}, {"type": "IDEN", "childNum": "0", "ID": 321, "code": "p12"}, {"type": "UNARYOPER", "childNum": "0", "ID": 322, "code": "!"}, {"type": "EXPRSTATE", "childNum": "11", "ID": 323, "code": "saltlen = p12 -> mac -> salt -> length", "location": "27"}, {"type": "ASSIGNEXPR", "childNum": "0", "ID": 324, "code": "saltlen = p12 -> mac -> salt -> length"}, {"type": "PTRMEMACCESS", "childNum": "1", "ID": 325, "code": "p12 -> mac -> salt -> length"}, {"type": "IDEN", "childNum": "1", "ID": 326, "code": "length"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 327, "code": "p12 -> mac -> salt"}, {"type": "IDEN", "childNum": "1", "ID": 328, "code": "salt"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 329, "code": "p12 -> mac"}, {"type": "IDEN", "childNum": "1", "ID": 330, "code": "mac"}, {"type": "IDEN", "childNum": "0", "ID": 331, "code": "p12"}, {"type": "IDEN", "childNum": "0", "ID": 332, "code": "saltlen"}, {"type": "EXPRSTATE", "childNum": "10", "ID": 333, "code": "salt = p12 -> mac -> salt -> data", "location": "26"}, {"type": "ASSIGNEXPR", "childNum": "0", "ID": 334, "code": "salt = p12 -> mac -> salt -> data"}, {"type": "PTRMEMACCESS", "childNum": "1", "ID": 335, "code": "p12 -> mac -> salt -> data"}, {"type": "IDEN", "childNum": "1", "ID": 336, "code": "data"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 337, "code": "p12 -> mac -> salt"}, {"type": "IDEN", "childNum": "1", "ID": 338, "code": "salt"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 339, "code": "p12 -> mac"}, {"type": "IDEN", "childNum": "1", "ID": 340, "code": "mac"}, {"type": "IDEN", "childNum": "0", "ID": 341, "code": "p12"}, {"type": "IDEN", "childNum": "0", "ID": 342, "code": "salt"}, {"type": "IFSTATE", "childNum": "9", "ID": 343, "code": "if ( ! PKCS7_type_is_data ( p12 -> authsafes ) )"}, {"type": "COMPSTATE", "childNum": "1", "ID": 344, "code": "", "location": "14"}, {"type": "RETURNSTATE", "childNum": "1", "ID": 345, "code": "return 0 ;", "location": "23"}, {"type": "PRIEXPR", "childNum": "0", "ID": 346, "code": "0"}, {"type": "EXPRSTATE", "childNum": "0", "ID": 347, "code": "PKCS12err ( PKCS12_F_PKCS12_GEN_MAC , PKCS12_R_CONTENT_TYPE_NOT_DATA )", "location": "22"}, {"type": "CALLEXPR", "childNum": "0", "ID": 348, "code": "PKCS12err ( PKCS12_F_PKCS12_GEN_MAC , PKCS12_R_CONTENT_TYPE_NOT_DATA )"}, {"type": "ARGULIST", "childNum": "1", "ID": 349, "code": "PKCS12_F_PKCS12_GEN_MAC"}, {"type": "ARGUMENT", "childNum": "1", "ID": 350, "code": "PKCS12_R_CONTENT_TYPE_NOT_DATA"}, {"type": "IDEN", "childNum": "0", "ID": 351, "code": "PKCS12_R_CONTENT_TYPE_NOT_DATA"}, {"type": "ARGUMENT", "childNum": "0", "ID": 352, "code": "PKCS12_F_PKCS12_GEN_MAC"}, {"type": "IDEN", "childNum": "0", "ID": 353, "code": "PKCS12_F_PKCS12_GEN_MAC"}, {"type": "CALLEE", "childNum": "0", "ID": 354, "code": "PKCS12err"}, {"type": "IDEN", "childNum": "0", "ID": 355, "code": "PKCS12err"}, {"type": "COND", "childNum": "0", "ID": 356, "code": "! PKCS7_type_is_data ( p12 -> authsafes )", "location": "21"}, {"type": "UNAOP", "childNum": "0", "ID": 357, "code": "! PKCS7_type_is_data ( p12 -> authsafes )"}, {"type": "CALLEXPR", "childNum": "1", "ID": 358, "code": "PKCS7_type_is_data ( p12 -> authsafes )"}, {"type": "ARGULIST", "childNum": "1", "ID": 359, "code": "p12 -> authsafes"}, {"type": "ARGUMENT", "childNum": "0", "ID": 360, "code": "p12 -> authsafes"}, {"type": "PTRMEMACCESS", "childNum": "0", "ID": 361, "code": "p12 -> authsafes"}, {"type": "IDEN", "childNum": "1", "ID": 362, "code": "authsafes"}, {"type": "IDEN", "childNum": "0", "ID": 363, "code": "p12"}, {"type": "CALLEE", "childNum": "0", "ID": 364, "code": "PKCS7_type_is_data"}, {"type": "IDEN", "childNum": "0", "ID": 365, "code": "PKCS7_type_is_data"}, {"type": "UNARYOPER", "childNum": "0", "ID": 366, "code": "!"}, {"type": "IFSTATE", "childNum": "8", "ID": 367, "code": "if ( pkcs12_key_gen == NULL )"}, {"type": "EXPRSTATE", "childNum": "1", "ID": 368, "code": "pkcs12_key_gen = PKCS12_key_gen_utf8", "location": "19"}, {"type": "ASSIGNEXPR", "childNum": "0", "ID": 369, "code": "pkcs12_key_gen = PKCS12_key_gen_utf8"}, {"type": "IDEN", "childNum": "1", "ID": 370, "code": "PKCS12_key_gen_utf8"}, {"type": "IDEN", "childNum": "0", "ID": 371, "code": "pkcs12_key_gen"}, {"type": "COND", "childNum": "0", "ID": 372, "code": "pkcs12_key_gen == NULL", "location": "18"}, {"type": "EQEXPR", "childNum": "0", "ID": 373, "code": "pkcs12_key_gen == NULL"}, {"type": "IDEN", "childNum": "1", "ID": 374, "code": "NULL"}, {"type": "IDEN", "childNum": "0", "ID": 375, "code": "pkcs12_key_gen"}, {"type": "IDENDECLSTATE", "childNum": "7", "ID": 376, "code": "const ASN1_OBJECT * macoid ;", "location": "16"}, {"type": "IDENDECL", "childNum": "0", "ID": 377, "code": "* macoid"}, {"type": "IDEN", "childNum": "1", "ID": 378, "code": "macoid"}, {"type": "IDENDECLTYPE", "childNum": "0", "ID": 379, "code": "const ASN1_OBJECT *"}, {"type": "IDENDECLSTATE", "childNum": "6", "ID": 380, "code": "const X509_ALGOR * macalg ;", "location": "15"}, {"type": "IDENDECL", "childNum": "0", "ID": 381, "code": "* macalg"}, {"type": "IDEN", "childNum": "1", "ID": 382, "code": "macalg"}, {"type": "IDENDECLTYPE", "childNum": "0", "ID": 383, "code": "const X509_ALGOR *"}, {"type": "IDENDECLSTATE", "childNum": "5", "ID": 384, "code": "int md_type_nid ;", "location": "14"}, {"type": "IDENDECL", "childNum": "0", "ID": 385, "code": "md_type_nid"}, {"type": "IDEN", "childNum": "1", "ID": 386, "code": "md_type_nid"}, {"type": "IDENDECLTYPE", "childNum": "0", "ID": 387, "code": "int"}, {"type": "IDENDECLSTATE", "childNum": "4", "ID": 388, "code": "int md_size = 0 ;", "location": "13"}, {"type": "IDENDECL", "childNum": "0", "ID": 389, "code": "md_size = 0"}, {"type": "ASSIGNEXPR", "childNum": "2", "ID": 390, "code": "md_size = 0"}, {"type": "PRIEXPR", "childNum": "1", "ID": 391, "code": "0"}, {"type": "IDEN", "childNum": "0", "ID": 392, "code": "md_size"}, {"type": "IDEN", "childNum": "0", "ID": 393, "code": "md_size"}, {"type": "IDENDECLTYPE", "childNum": "0", "ID": 394, "code": "int"}, {"type": "IDENDECLSTATE", "childNum": "3", "ID": 395, "code": "int saltlen , iter ;", "location": "12"}, {"type": "IDENDECL", "childNum": "1", "ID": 396, "code": "iter"}, {"type": "IDEN", "childNum": "1", "ID": 397, "code": "iter"}, {"type": "IDENDECLTYPE", "childNum": "0", "ID": 398, "code": "int"}, {"type": "IDENDECL", "childNum": "0", "ID": 399, "code": "saltlen"}, {"type": "IDEN", "childNum": "1", "ID": 400, "code": "saltlen"}, {"type": "IDENDECLTYPE", "childNum": "0", "ID": 401, "code": "int"}, {"type": "IDENDECLSTATE", "childNum": "2", "ID": 402, "code": "unsigned char key [ EVP_MAX_MD_SIZE ] , * salt ;", "location": "11"}, {"type": "IDENDECL", "childNum": "1", "ID": 403, "code": "* salt"}, {"type": "IDEN", "childNum": "1", "ID": 404, "code": "salt"}, {"type": "IDENDECLTYPE", "childNum": "0", "ID": 405, "code": "unsigned char *"}, {"type": "IDENDECL", "childNum": "0", "ID": 406, "code": "key [ EVP_MAX_MD_SIZE ]"}, {"type": "IDEN", "childNum": "2", "ID": 407, "code": "EVP_MAX_MD_SIZE"}, {"type": "IDEN", "childNum": "1", "ID": 408, "code": "key"}, {"type": "IDENDECLTYPE", "childNum": "0", "ID": 409, "code": "unsigned char [ EVP_MAX_MD_SIZE ]"}, {"type": "IDENDECLSTATE", "childNum": "1", "ID": 410, "code": "HMAC_CTX * hmac = NULL ;", "location": "10"}, {"type": "IDENDECL", "childNum": "0", "ID": 411, "code": "* hmac = NULL"}, {"type": "ASSIGNEXPR", "childNum": "2", "ID": 412, "code": "* hmac = NULL"}, {"type": "IDEN", "childNum": "1", "ID": 413, "code": "NULL"}, {"type": "IDEN", "childNum": "1", "ID": 414, "code": "NULL"}, {"type": "IDEN", "childNum": "1", "ID": 415, "code": "hmac"}, {"type": "IDENDECLTYPE", "childNum": "0", "ID": 416, "code": "HMAC_CTX *"}, {"type": "IDENDECLSTATE", "childNum": "0", "ID": 417, "code": "const EVP_MD * md_type ;", "location": "9"}, {"type": "IDENDECL", "childNum": "0", "ID": 418, "code": "* md_type"}, {"type": "IDEN", "childNum": "1", "ID": 419, "code": "md_type"}, {"type": "IDENDECLTYPE", "childNum": "0", "ID": 420, "code": "const EVP_MD *"}, {"type": "CFGENTRYNODE", "ID": 421, "code": "ENTRY"}, {"type": "CFGEXITNODE", "ID": 422, "code": "EXIT"}, {"type": "SYS", "ID": 423, "code": "NID_id_GostR3411_2012_512"}, {"type": "SYS", "ID": 424, "code": "* p12 -> authsafes -> d"}, {"type": "SYS", "ID": 425, "code": "md_type_nid"}, {"type": "SYS", "ID": 426, "code": "NID_id_GostR3411_94"}, {"type": "SYS", "ID": 427, "code": "* p12 -> authsafes"}, {"type": "SYS", "ID": 428, "code": "ASN1_INTEGER_get"}, {"type": "SYS", "ID": 429, "code": "p12 -> mac"}, {"type": "SYS", "ID": 430, "code": "* * * p12"}, {"type": "SYS", "ID": 431, "code": "* pkcs12_key_gen"}, {"type": "SYS", "ID": 432, "code": "p12"}, {"type": "SYS", "ID": 433, "code": "TK26_MAC_KEY_LEN"}, {"type": "SYS", "ID": 434, "code": "p12 -> authsafes -> d . data -> length"}, {"type": "SYS", "ID": 435, "code": "EVP_get_digestbyobj"}, {"type": "SYS", "ID": 436, "code": "pkcs12_key_gen"}, {"type": "SYS", "ID": 437, "code": "macoid"}, {"type": "SYS", "ID": 438, "code": "& macalg"}, {"type": "SYS", "ID": 439, "code": "EVP_MD_type"}, {"type": "SYS", "ID": 440, "code": "NULL"}, {"type": "SYS", "ID": 441, "code": "pass"}, {"type": "SYS", "ID": 442, "code": "iter"}, {"type": "SYS", "ID": 443, "code": "p12 -> authsafes"}, {"type": "SYS", "ID": 444, "code": "HMAC_Final"}, {"type": "SYS", "ID": 445, "code": "passlen"}, {"type": "SYS", "ID": 446, "code": "p12 -> mac -> salt"}, {"type": "SYS", "ID": 447, "code": "md_size"}, {"type": "SYS", "ID": 448, "code": "p12 -> mac -> salt -> length"}, {"type": "SYS", "ID": 449, "code": "* * p12 -> authsafes"}, {"type": "SYS", "ID": 450, "code": "PKCS7_type_is_data"}, {"type": "SYS", "ID": 451, "code": "p12 -> authsafes -> d . data"}, {"type": "SYS", "ID": 452, "code": "HMAC_Update"}, {"type": "SYS", "ID": 453, "code": "mac"}, {"type": "SYS", "ID": 454, "code": "NID_id_GostR3411_2012_256"}, {"type": "SYS", "ID": 455, "code": "PKCS12_R_CONTENT_TYPE_NOT_DATA"}, {"type": "SYS", "ID": 456, "code": "p12 -> authsafes -> d"}, {"type": "SYS", "ID": 457, "code": "EVP_MD_size"}, {"type": "SYS", "ID": 458, "code": "PKCS12_R_KEY_GEN_ERROR"}, {"type": "SYS", "ID": 459, "code": "hmac"}, {"type": "SYS", "ID": 460, "code": "PKCS12_F_PKCS12_GEN_MAC"}, {"type": "SYS", "ID": 461, "code": "key"}, {"type": "SYS", "ID": 462, "code": "* p12 -> mac -> salt"}, {"type": "SYS", "ID": 463, "code": "getenv"}, {"type": "SYS", "ID": 464, "code": "p12 -> mac -> iter"}, {"type": "SYS", "ID": 465, "code": "maclen"}, {"type": "SYS", "ID": 466, "code": "salt"}, {"type": "SYS", "ID": 467, "code": "PKCS12_key_gen_utf8"}, {"type": "SYS", "ID": 468, "code": "p12 -> authsafes -> d . data -> data"}, {"type": "SYS", "ID": 469, "code": "saltlen"}, {"type": "SYS", "ID": 470, "code": "* * p12"}, {"type": "SYS", "ID": 471, "code": "macalg"}, {"type": "SYS", "ID": 472, "code": "PKCS12_R_UNKNOWN_DIGEST_ALGORITHM"}, {"type": "SYS", "ID": 473, "code": "* p12 -> authsafes -> d . data"}, {"type": "SYS", "ID": 474, "code": "& macoid"}, {"type": "SYS", "ID": 475, "code": "HMAC_CTX_new"}, {"type": "SYS", "ID": 476, "code": "HMAC_Init_ex"}, {"type": "SYS", "ID": 477, "code": "pkcs12_gen_gost_mac_key"}, {"type": "SYS", "ID": 478, "code": "* p12 -> mac"}, {"type": "SYS", "ID": 479, "code": "p12 -> mac -> dinfo"}, {"type": "SYS", "ID": 480, "code": "PKCS12_MAC_ID"}, {"type": "SYS", "ID": 481, "code": "* p12"}, {"type": "SYS", "ID": 482, "code": "* * p12 -> mac"}, {"type": "SYS", "ID": 483, "code": "p12 -> mac -> salt -> data"}, {"type": "SYS", "ID": 484, "code": "md_type"}], "edges": [["IS_AST_PARENT", 486, 487], ["IS_AST_PARENT", 486, 488], ["IS_AST_PARENT", 490, 491], ["IS_AST_PARENT", 489, 490], ["IS_AST_PARENT", 496, 497], ["IS_AST_PARENT", 495, 496], ["IS_AST_PARENT", 501, 502], ["IS_AST_PARENT", 500, 501], ["IS_AST_PARENT", 499, 500], ["IS_AST_PARENT", 503, 504], ["IS_AST_PARENT", 499, 503], ["IS_AST_PARENT", 498, 499], ["IS_AST_PARENT", 495, 498], ["IS_AST_PARENT", 494, 495], ["IS_AST_PARENT", 509, 510], ["IS_AST_PARENT", 508, 509], ["IS_AST_PARENT", 507, 508], ["IS_AST_PARENT", 511, 512], ["IS_AST_PARENT", 507, 511], ["IS_AST_PARENT", 506, 507], ["IS_AST_PARENT", 506, 513], ["IS_AST_PARENT", 505, 506], ["IS_AST_PARENT", 494, 505], ["IS_AST_PARENT", 493, 494], ["IS_AST_PARENT", 492, 493], ["IS_AST_PARENT", 515, 516], ["IS_AST_PARENT", 515, 517], ["IS_AST_PARENT", 514, 515], ["IS_AST_PARENT", 492, 514], ["IS_AST_PARENT", 489, 492], ["IS_AST_PARENT", 524, 525], ["IS_AST_PARENT", 524, 526], ["IS_AST_PARENT", 523, 524], ["IS_AST_PARENT", 522, 523], ["IS_AST_PARENT", 521, 522], ["IS_AST_PARENT", 527, 528], ["IS_AST_PARENT", 521, 527], ["IS_AST_PARENT", 520, 521], ["IS_AST_PARENT", 520, 529], ["IS_AST_PARENT", 519, 520], ["IS_AST_PARENT", 519, 530], ["IS_AST_PARENT", 519, 531], ["IS_AST_PARENT", 518, 519], ["IS_AST_PARENT", 489, 518], ["IS_AST_PARENT", 486, 489], ["FLOWS_TO", 532, 518], ["FLOWS_TO", 518, 514], ["FLOWS_TO", 514, 505], ["FLOWS_TO", 514, 490], ["FLOWS_TO", 505, 498], ["FLOWS_TO", 505, 490], ["FLOWS_TO", 498, 496], ["FLOWS_TO", 496, 533], ["FLOWS_TO", 490, 533], ["USE", 514, 534], ["USE", 496, 534], ["DEF", 518, 535], ["DEF", 520, 535], ["USE", 514, 535], ["USE", 505, 535], ["USE", 509, 535], ["USE", 498, 535], ["USE", 501, 535], ["USE", 490, 535], ["USE", 505, 536], ["USE", 518, 537], ["USE", 520, 537], ["REACHES", 518, 514], ["REACHES", 518, 505], ["REACHES", 518, 498], ["REACHES", 518, 490], ["POST_DOM", 533, 533], ["POST_DOM", 514, 518], ["POST_DOM", 533, 496], ["POST_DOM", 533, 505], ["POST_DOM", 533, 514], ["POST_DOM", 533, 532], ["POST_DOM", 533, 490], ["POST_DOM", 496, 498], ["CONTROLS", 532, 518], ["CONTROLS", 532, 514], ["CONTROLS", 505, 496], ["CONTROLS", 505, 490], ["CONTROLS", 505, 498], ["CONTROLS", 514, 505], ["CONTROLS", 514, 490], ["IS_FUNCTION_OF_AST", 485, 486], ["IS_FUNCTION_OF_CFG", 485, 532], ["IS_AST_PARENT", 655, 656], ["IS_AST_PARENT", 655, 657], ["IS_AST_PARENT", 654, 655], ["IS_AST_PARENT", 658, 659], ["IS_AST_PARENT", 658, 660], ["IS_AST_PARENT", 654, 658], ["IS_AST_PARENT", 661, 662], ["IS_AST_PARENT", 661, 663], ["IS_AST_PARENT", 654, 661], ["IS_AST_PARENT", 664, 665], ["IS_AST_PARENT", 664, 666], ["IS_AST_PARENT", 654, 664], ["IS_AST_PARENT", 667, 668], ["IS_AST_PARENT", 667, 669], ["IS_AST_PARENT", 654, 667], ["IS_AST_PARENT", 653, 654], ["IS_AST_PARENT", 653, 670], ["IS_AST_PARENT", 672, 673], ["IS_AST_PARENT", 671, 672], ["IS_AST_PARENT", 679, 680], ["IS_AST_PARENT", 679, 681], ["IS_AST_PARENT", 678, 679], ["IS_AST_PARENT", 677, 678], ["IS_AST_PARENT", 682, 683], ["IS_AST_PARENT", 677, 682], ["IS_AST_PARENT", 676, 677], ["IS_AST_PARENT", 684, 685], ["IS_AST_PARENT", 676, 684], ["IS_AST_PARENT", 675, 676], ["IS_AST_PARENT", 674, 675], ["IS_AST_PARENT", 686, 687], ["IS_AST_PARENT", 674, 686], ["IS_AST_PARENT", 671, 674], ["IS_AST_PARENT", 688, 689], ["IS_AST_PARENT", 671, 688], ["IS_AST_PARENT", 691, 692], ["IS_AST_PARENT", 691, 693], ["IS_AST_PARENT", 690, 691], ["IS_AST_PARENT", 671, 690], ["IS_AST_PARENT", 695, 696], ["IS_AST_PARENT", 694, 695], ["IS_AST_PARENT", 702, 703], ["IS_AST_PARENT", 702, 704], ["IS_AST_PARENT", 701, 702], ["IS_AST_PARENT", 700, 701], ["IS_AST_PARENT", 706, 707], ["IS_AST_PARENT", 706, 708], ["IS_AST_PARENT", 705, 706], ["IS_AST_PARENT", 700, 705], ["IS_AST_PARENT", 699, 700], ["IS_AST_PARENT", 709, 710], ["IS_AST_PARENT", 699, 709], ["IS_AST_PARENT", 698, 699], ["IS_AST_PARENT", 698, 711], ["IS_AST_PARENT", 697, 698], ["IS_AST_PARENT", 694, 697], ["IS_AST_PARENT", 671, 694], ["IS_AST_PARENT", 715, 716], ["IS_AST_PARENT", 714, 715], ["IS_AST_PARENT", 725, 726], ["IS_AST_PARENT", 724, 725], ["IS_AST_PARENT", 723, 724], ["IS_AST_PARENT", 727, 728], ["IS_AST_PARENT", 723, 727], ["IS_AST_PARENT", 722, 723], ["IS_AST_PARENT", 721, 722], ["IS_AST_PARENT", 729, 730], ["IS_AST_PARENT", 721, 729], ["IS_AST_PARENT", 732, 733], ["IS_AST_PARENT", 732, 734], ["IS_AST_PARENT", 731, 732], ["IS_AST_PARENT", 721, 731], ["IS_AST_PARENT", 720, 721], ["IS_AST_PARENT", 735, 736], ["IS_AST_PARENT", 720, 735], ["IS_AST_PARENT", 719, 720], ["IS_AST_PARENT", 719, 737], ["IS_AST_PARENT", 718, 719], ["IS_AST_PARENT", 741, 742], ["IS_AST_PARENT", 740, 741], ["IS_AST_PARENT", 743, 744], ["IS_AST_PARENT", 740, 743], ["IS_AST_PARENT", 746, 747], ["IS_AST_PARENT", 746, 748], ["IS_AST_PARENT", 745, 746], ["IS_AST_PARENT", 740, 745], ["IS_AST_PARENT", 739, 740], ["IS_AST_PARENT", 749, 750], ["IS_AST_PARENT", 739, 749], ["IS_AST_PARENT", 738, 739], ["IS_AST_PARENT", 738, 751], ["IS_AST_PARENT", 718, 738], ["IS_AST_PARENT", 717, 718], ["IS_AST_PARENT", 714, 717], ["IS_AST_PARENT", 713, 714], ["IS_AST_PARENT", 756, 757], ["IS_AST_PARENT", 758, 759], ["IS_AST_PARENT", 758, 760], ["IS_AST_PARENT", 756, 758], ["IS_AST_PARENT", 755, 756], ["IS_AST_PARENT", 755, 761], ["IS_AST_PARENT", 754, 755], ["IS_AST_PARENT", 762, 763], ["IS_AST_PARENT", 762, 764], ["IS_AST_PARENT", 754, 762], ["IS_AST_PARENT", 753, 754], ["IS_AST_PARENT", 752, 753], ["IS_AST_PARENT", 765, 766], ["IS_AST_PARENT", 765, 767], ["IS_AST_PARENT", 752, 765], ["IS_AST_PARENT", 769, 770], ["IS_AST_PARENT", 769, 771], ["IS_AST_PARENT", 768, 769], ["IS_AST_PARENT", 752, 768], ["IS_AST_PARENT", 773, 774], ["IS_AST_PARENT", 773, 775], ["IS_AST_PARENT", 772, 773], ["IS_AST_PARENT", 752, 772], ["IS_AST_PARENT", 713, 752], ["IS_AST_PARENT", 777, 778], ["IS_AST_PARENT", 776, 777], ["IS_AST_PARENT", 787, 788], ["IS_AST_PARENT", 786, 787], ["IS_AST_PARENT", 785, 786], ["IS_AST_PARENT", 789, 790], ["IS_AST_PARENT", 785, 789], ["IS_AST_PARENT", 784, 785], ["IS_AST_PARENT", 783, 784], ["IS_AST_PARENT", 791, 792], ["IS_AST_PARENT", 783, 791], ["IS_AST_PARENT", 794, 795], ["IS_AST_PARENT", 794, 796], ["IS_AST_PARENT", 793, 794], ["IS_AST_PARENT", 783, 793], ["IS_AST_PARENT", 782, 783], ["IS_AST_PARENT", 797, 798], ["IS_AST_PARENT", 782, 797], ["IS_AST_PARENT", 781, 782], ["IS_AST_PARENT", 781, 799], ["IS_AST_PARENT", 780, 781], ["IS_AST_PARENT", 803, 804], ["IS_AST_PARENT", 802, 803], ["IS_AST_PARENT", 805, 806], ["IS_AST_PARENT", 802, 805], ["IS_AST_PARENT", 808, 809], ["IS_AST_PARENT", 808, 810], ["IS_AST_PARENT", 807, 808], ["IS_AST_PARENT", 802, 807], ["IS_AST_PARENT", 801, 802], ["IS_AST_PARENT", 811, 812], ["IS_AST_PARENT", 801, 811], ["IS_AST_PARENT", 800, 801], ["IS_AST_PARENT", 800, 813], ["IS_AST_PARENT", 780, 800], ["IS_AST_PARENT", 779, 780], ["IS_AST_PARENT", 776, 779], ["IS_AST_PARENT", 713, 776], ["IS_AST_PARENT", 818, 819], ["IS_AST_PARENT", 820, 821], ["IS_AST_PARENT", 820, 822], ["IS_AST_PARENT", 818, 820], ["IS_AST_PARENT", 817, 818], ["IS_AST_PARENT", 817, 823], ["IS_AST_PARENT", 816, 817], ["IS_AST_PARENT", 824, 825], ["IS_AST_PARENT", 824, 826], ["IS_AST_PARENT", 816, 824], ["IS_AST_PARENT", 815, 816], ["IS_AST_PARENT", 814, 815], ["IS_AST_PARENT", 827, 828], ["IS_AST_PARENT", 827, 829], ["IS_AST_PARENT", 814, 827], ["IS_AST_PARENT", 831, 832], ["IS_AST_PARENT", 831, 833], ["IS_AST_PARENT", 830, 831], ["IS_AST_PARENT", 814, 830], ["IS_AST_PARENT", 835, 836], ["IS_AST_PARENT", 835, 837], ["IS_AST_PARENT", 834, 835], ["IS_AST_PARENT", 814, 834], ["IS_AST_PARENT", 713, 814], ["IS_AST_PARENT", 712, 713], ["IS_AST_PARENT", 838, 839], ["IS_AST_PARENT", 712, 838], ["IS_AST_PARENT", 671, 712], ["IS_AST_PARENT", 848, 849], ["IS_AST_PARENT", 848, 850], ["IS_AST_PARENT", 847, 848], ["IS_AST_PARENT", 847, 851], ["IS_AST_PARENT", 846, 847], ["IS_AST_PARENT", 845, 846], ["IS_AST_PARENT", 852, 853], ["IS_AST_PARENT", 845, 852], ["IS_AST_PARENT", 857, 858], ["IS_AST_PARENT", 857, 859], ["IS_AST_PARENT", 856, 857], ["IS_AST_PARENT", 860, 861], ["IS_AST_PARENT", 860, 862], ["IS_AST_PARENT", 856, 860], ["IS_AST_PARENT", 855, 856], ["IS_AST_PARENT", 855, 863], ["IS_AST_PARENT", 854, 855], ["IS_AST_PARENT", 845, 854], ["IS_AST_PARENT", 844, 845], ["IS_AST_PARENT", 864, 865], ["IS_AST_PARENT", 844, 864], ["IS_AST_PARENT", 843, 844], ["IS_AST_PARENT", 842, 843], ["IS_AST_PARENT", 867, 868], ["IS_AST_PARENT", 869, 870], ["IS_AST_PARENT", 869, 871], ["IS_AST_PARENT", 867, 869], ["IS_AST_PARENT", 866, 867], ["IS_AST_PARENT", 842, 866], ["IS_AST_PARENT", 841, 842], ["IS_AST_PARENT", 876, 877], ["IS_AST_PARENT", 878, 879], ["IS_AST_PARENT", 878, 880], ["IS_AST_PARENT", 876, 878], ["IS_AST_PARENT", 875, 876], ["IS_AST_PARENT", 874, 875], ["IS_AST_PARENT", 884, 885], ["IS_AST_PARENT", 883, 884], ["IS_AST_PARENT", 886, 887], ["IS_AST_PARENT", 883, 886], ["IS_AST_PARENT", 889, 890], ["IS_AST_PARENT", 889, 891], ["IS_AST_PARENT", 888, 889], ["IS_AST_PARENT", 883, 888], ["IS_AST_PARENT", 882, 883], ["IS_AST_PARENT", 892, 893], ["IS_AST_PARENT", 882, 892], ["IS_AST_PARENT", 881, 882], ["IS_AST_PARENT", 874, 881], ["IS_AST_PARENT", 895, 896], ["IS_AST_PARENT", 894, 895], ["IS_AST_PARENT", 902, 903], ["IS_AST_PARENT", 902, 904], ["IS_AST_PARENT", 901, 902], ["IS_AST_PARENT", 901, 905], ["IS_AST_PARENT", 900, 901], ["IS_AST_PARENT", 900, 906], ["IS_AST_PARENT", 899, 900], ["IS_AST_PARENT", 899, 907], ["IS_AST_PARENT", 898, 899], ["IS_AST_PARENT", 908, 909], ["IS_AST_PARENT", 908, 910], ["IS_AST_PARENT", 898, 908], ["IS_AST_PARENT", 897, 898], ["IS_AST_PARENT", 894, 897], ["IS_AST_PARENT", 874, 894], ["IS_AST_PARENT", 873, 874], ["IS_AST_PARENT", 872, 873], ["IS_AST_PARENT", 913, 914], ["IS_AST_PARENT", 912, 913], ["IS_AST_PARENT", 923, 924], ["IS_AST_PARENT", 923, 925], ["IS_AST_PARENT", 922, 923], ["IS_AST_PARENT", 922, 926], ["IS_AST_PARENT", 921, 922], ["IS_AST_PARENT", 920, 921], ["IS_AST_PARENT", 928, 929], ["IS_AST_PARENT", 928, 930], ["IS_AST_PARENT", 927, 928], ["IS_AST_PARENT", 920, 927], ["IS_AST_PARENT", 932, 933], ["IS_AST_PARENT", 932, 934], ["IS_AST_PARENT", 931, 932], ["IS_AST_PARENT", 920, 931], ["IS_AST_PARENT", 919, 920], ["IS_AST_PARENT", 935, 936], ["IS_AST_PARENT", 919, 935], ["IS_AST_PARENT", 918, 919], ["IS_AST_PARENT", 918, 937], ["IS_AST_PARENT", 917, 918], ["IS_AST_PARENT", 941, 942], ["IS_AST_PARENT", 940, 941], ["IS_AST_PARENT", 943, 944], ["IS_AST_PARENT", 940, 943], ["IS_AST_PARENT", 946, 947], ["IS_AST_PARENT", 946, 948], ["IS_AST_PARENT", 945, 946], ["IS_AST_PARENT", 940, 945], ["IS_AST_PARENT", 939, 940], ["IS_AST_PARENT", 949, 950], ["IS_AST_PARENT", 939, 949], ["IS_AST_PARENT", 938, 939], ["IS_AST_PARENT", 938, 951], ["IS_AST_PARENT", 917, 938], ["IS_AST_PARENT", 916, 917], ["IS_AST_PARENT", 955, 956], ["IS_AST_PARENT", 954, 955], ["IS_AST_PARENT", 957, 958], ["IS_AST_PARENT", 954, 957], ["IS_AST_PARENT", 960, 961], ["IS_AST_PARENT", 960, 962], ["IS_AST_PARENT", 959, 960], ["IS_AST_PARENT", 954, 959], ["IS_AST_PARENT", 953, 954], ["IS_AST_PARENT", 963, 964], ["IS_AST_PARENT", 953, 963], ["IS_AST_PARENT", 952, 953], ["IS_AST_PARENT", 952, 965], ["IS_AST_PARENT", 916, 952], ["IS_AST_PARENT", 915, 916], ["IS_AST_PARENT", 912, 915], ["IS_AST_PARENT", 911, 912], ["IS_AST_PARENT", 872, 911], ["IS_AST_PARENT", 967, 968], ["IS_AST_PARENT", 967, 969], ["IS_AST_PARENT", 966, 967], ["IS_AST_PARENT", 872, 966], ["IS_AST_PARENT", 841, 872], ["IS_AST_PARENT", 971, 972], ["IS_AST_PARENT", 970, 971], ["IS_AST_PARENT", 981, 982], ["IS_AST_PARENT", 981, 983], ["IS_AST_PARENT", 980, 981], ["IS_AST_PARENT", 980, 984], ["IS_AST_PARENT", 979, 980], ["IS_AST_PARENT", 979, 985], ["IS_AST_PARENT", 978, 979], ["IS_AST_PARENT", 978, 986], ["IS_AST_PARENT", 977, 978], ["IS_AST_PARENT", 976, 977], ["IS_AST_PARENT", 975, 976], ["IS_AST_PARENT", 987, 988], ["IS_AST_PARENT", 975, 987], ["IS_AST_PARENT", 974, 975], ["IS_AST_PARENT", 974, 989], ["IS_AST_PARENT", 973, 974], ["IS_AST_PARENT", 970, 973], ["IS_AST_PARENT", 841, 970], ["IS_AST_PARENT", 994, 995], ["IS_AST_PARENT", 993, 994], ["IS_AST_PARENT", 992, 993], ["IS_AST_PARENT", 996, 997], ["IS_AST_PARENT", 992, 996], ["IS_AST_PARENT", 991, 992], ["IS_AST_PARENT", 991, 998], ["IS_AST_PARENT", 990, 991], ["IS_AST_PARENT", 841, 990], ["IS_AST_PARENT", 1000, 1001], ["IS_AST_PARENT", 1000, 1002], ["IS_AST_PARENT", 999, 1000], ["IS_AST_PARENT", 841, 999], ["IS_AST_PARENT", 840, 841], ["IS_AST_PARENT", 1004, 1005], ["IS_AST_PARENT", 1004, 1006], ["IS_AST_PARENT", 1003, 1004], ["IS_AST_PARENT", 840, 1003], ["IS_AST_PARENT", 671, 840], ["IS_AST_PARENT", 1012, 1013], ["IS_AST_PARENT", 1011, 1012], ["IS_AST_PARENT", 1010, 1011], ["IS_AST_PARENT", 1009, 1010], ["IS_AST_PARENT", 1017, 1018], ["IS_AST_PARENT", 1017, 1019], ["IS_AST_PARENT", 1016, 1017], ["IS_AST_PARENT", 1016, 1020], ["IS_AST_PARENT", 1015, 1016], ["IS_AST_PARENT", 1014, 1015], ["IS_AST_PARENT", 1009, 1014], ["IS_AST_PARENT", 1022, 1023], ["IS_AST_PARENT", 1022, 1024], ["IS_AST_PARENT", 1021, 1022], ["IS_AST_PARENT", 1009, 1021], ["IS_AST_PARENT", 1008, 1009], ["IS_AST_PARENT", 1007, 1008], ["IS_AST_PARENT", 1027, 1028], ["IS_AST_PARENT", 1029, 1030], ["IS_AST_PARENT", 1029, 1031], ["IS_AST_PARENT", 1027, 1029], ["IS_AST_PARENT", 1026, 1027], ["IS_AST_PARENT", 1025, 1026], ["IS_AST_PARENT", 1033, 1034], ["IS_AST_PARENT", 1033, 1035], ["IS_AST_PARENT", 1032, 1033], ["IS_AST_PARENT", 1025, 1032], ["IS_AST_PARENT", 1007, 1025], ["IS_AST_PARENT", 1037, 1038], ["IS_AST_PARENT", 1037, 1039], ["IS_AST_PARENT", 1036, 1037], ["IS_AST_PARENT", 1007, 1036], ["IS_AST_PARENT", 671, 1007], ["IS_AST_PARENT", 1041, 1042], ["IS_AST_PARENT", 1040, 1041], ["IS_AST_PARENT", 1047, 1048], ["IS_AST_PARENT", 1047, 1049], ["IS_AST_PARENT", 1046, 1047], ["IS_AST_PARENT", 1050, 1051], ["IS_AST_PARENT", 1050, 1052], ["IS_AST_PARENT", 1046, 1050], ["IS_AST_PARENT", 1045, 1046], ["IS_AST_PARENT", 1054, 1055], ["IS_AST_PARENT", 1054, 1056], ["IS_AST_PARENT", 1053, 1054], ["IS_AST_PARENT", 1053, 1057], ["IS_AST_PARENT", 1045, 1053], ["IS_AST_PARENT", 1044, 1045], ["IS_AST_PARENT", 1058, 1059], ["IS_AST_PARENT", 1058, 1060], ["IS_AST_PARENT", 1044, 1058], ["IS_AST_PARENT", 1043, 1044], ["IS_AST_PARENT", 1040, 1043], ["IS_AST_PARENT", 671, 1040], ["IS_AST_PARENT", 1062, 1063], ["IS_AST_PARENT", 1062, 1064], ["IS_AST_PARENT", 1062, 1065], ["IS_AST_PARENT", 1061, 1062], ["IS_AST_PARENT", 671, 1061], ["IS_AST_PARENT", 1068, 1069], ["IS_AST_PARENT", 1068, 1070], ["IS_AST_PARENT", 1067, 1068], ["IS_AST_PARENT", 1067, 1071], ["IS_AST_PARENT", 1067, 1072], ["IS_AST_PARENT", 1066, 1067], ["IS_AST_PARENT", 1073, 1074], ["IS_AST_PARENT", 1073, 1075], ["IS_AST_PARENT", 1066, 1073], ["IS_AST_PARENT", 1076, 1077], ["IS_AST_PARENT", 1076, 1078], ["IS_AST_PARENT", 1066, 1076], ["IS_AST_PARENT", 671, 1066], ["IS_AST_PARENT", 1081, 1082], ["IS_AST_PARENT", 1081, 1083], ["IS_AST_PARENT", 1080, 1081], ["IS_AST_PARENT", 1080, 1084], ["IS_AST_PARENT", 1080, 1085], ["IS_AST_PARENT", 1079, 1080], ["IS_AST_PARENT", 671, 1079], ["IS_AST_PARENT", 653, 671], ["FLOWS_TO", 1086, 667], ["FLOWS_TO", 667, 664], ["FLOWS_TO", 664, 661], ["FLOWS_TO", 661, 658], ["FLOWS_TO", 658, 655], ["FLOWS_TO", 655, 1079], ["FLOWS_TO", 1079, 1066], ["FLOWS_TO", 1066, 1061], ["FLOWS_TO", 1061, 1043], ["FLOWS_TO", 1043, 1041], ["FLOWS_TO", 1043, 1036], ["FLOWS_TO", 1041, 1087], ["FLOWS_TO", 1036, 1032], ["FLOWS_TO", 1036, 1021], ["FLOWS_TO", 1032, 1026], ["FLOWS_TO", 1026, 1003], ["FLOWS_TO", 1021, 1015], ["FLOWS_TO", 1021, 1012], ["FLOWS_TO", 1015, 1003], ["FLOWS_TO", 1012, 1087], ["FLOWS_TO", 1003, 999], ["FLOWS_TO", 1003, 838], ["FLOWS_TO", 999, 990], ["FLOWS_TO", 990, 973], ["FLOWS_TO", 973, 971], ["FLOWS_TO", 973, 966], ["FLOWS_TO", 971, 1087], ["FLOWS_TO", 966, 915], ["FLOWS_TO", 966, 897], ["FLOWS_TO", 915, 913], ["FLOWS_TO", 915, 866], ["FLOWS_TO", 913, 1087], ["FLOWS_TO", 897, 895], ["FLOWS_TO", 897, 881], ["FLOWS_TO", 895, 1087], ["FLOWS_TO", 881, 875], ["FLOWS_TO", 875, 866], ["FLOWS_TO", 866, 843], ["FLOWS_TO", 866, 838], ["FLOWS_TO", 843, 838], ["FLOWS_TO", 838, 834], ["FLOWS_TO", 838, 697], ["FLOWS_TO", 830, 815], ["FLOWS_TO", 830, 779], ["FLOWS_TO", 834, 830], ["FLOWS_TO", 827, 830], ["FLOWS_TO", 815, 827], ["FLOWS_TO", 779, 777], ["FLOWS_TO", 779, 772], ["FLOWS_TO", 777, 688], ["FLOWS_TO", 768, 753], ["FLOWS_TO", 768, 717], ["FLOWS_TO", 772, 768], ["FLOWS_TO", 765, 768], ["FLOWS_TO", 753, 765], ["FLOWS_TO", 717, 715], ["FLOWS_TO", 717, 697], ["FLOWS_TO", 715, 688], ["FLOWS_TO", 697, 695], ["FLOWS_TO", 697, 690], ["FLOWS_TO", 695, 688], ["FLOWS_TO", 690, 688], ["FLOWS_TO", 688, 686], ["FLOWS_TO", 686, 675], ["FLOWS_TO", 686, 672], ["FLOWS_TO", 675, 672], ["FLOWS_TO", 672, 1087], ["DEF", 875, 1088], ["DEF", 876, 1088], ["USE", 866, 1088], ["USE", 843, 1088], ["USE", 856, 1088], ["USE", 846, 1088], ["USE", 815, 1089], ["USE", 816, 1089], ["USE", 753, 1089], ["USE", 754, 1089], ["DEF", 1079, 1090], ["DEF", 1081, 1090], ["DEF", 690, 1090], ["DEF", 691, 1090], ["USE", 672, 1090], ["USE", 915, 1091], ["USE", 921, 1091], ["USE", 915, 1092], ["USE", 959, 1092], ["USE", 945, 1092], ["USE", 931, 1092], ["USE", 697, 1092], ["USE", 705, 1092], ["USE", 973, 1093], ["USE", 977, 1093], ["USE", 915, 1093], ["USE", 927, 1093], ["USE", 897, 1093], ["USE", 881, 1093], ["USE", 888, 1093], ["USE", 843, 1093], ["USE", 856, 1093], ["USE", 815, 1093], ["USE", 818, 1093], ["USE", 753, 1093], ["USE", 756, 1093], ["USE", 717, 1094], ["USE", 745, 1094], ["USE", 731, 1094], ["USE", 915, 1095], ["USE", 779, 1095], ["USE", 717, 1095], ["USE", 779, 1096], ["USE", 807, 1096], ["USE", 793, 1096], ["USE", 697, 1096], ["USE", 701, 1096], ["USE", 843, 1097], ["USE", 854, 1097], ["USE", 915, 1098], ["USE", 921, 1098], ["USE", 915, 1099], ["USE", 779, 1099], ["USE", 717, 1099], ["DEF", 655, 1100], ["USE", 915, 1100], ["USE", 955, 1100], ["USE", 779, 1100], ["USE", 803, 1100], ["USE", 717, 1100], ["USE", 741, 1100], ["DEF", 1061, 1101], ["DEF", 1062, 1101], ["USE", 815, 1101], ["USE", 824, 1101], ["USE", 779, 1101], ["USE", 791, 1101], ["USE", 753, 1101], ["USE", 762, 1101], ["USE", 717, 1101], ["USE", 729, 1101], ["USE", 675, 1101], ["USE", 682, 1101], ["USE", 843, 1102], ["USE", 854, 1102], ["DEF", 661, 1103], ["USE", 1043, 1103], ["USE", 966, 1103], ["USE", 915, 1103], ["USE", 941, 1103], ["USE", 897, 1103], ["USE", 881, 1103], ["USE", 884, 1103], ["USE", 875, 1103], ["USE", 876, 1103], ["USE", 990, 1104], ["USE", 991, 1104], ["USE", 779, 1104], ["USE", 784, 1104], ["USE", 717, 1104], ["USE", 722, 1104], ["DEF", 658, 1105], ["USE", 1043, 1105], ["USE", 1036, 1105], ["USE", 1026, 1105], ["USE", 1027, 1105], ["DEF", 1015, 1105], ["DEF", 1016, 1105], ["USE", 990, 1105], ["USE", 994, 1105], ["USE", 915, 1105], ["USE", 957, 1105], ["USE", 779, 1105], ["USE", 805, 1105], ["USE", 787, 1105], ["USE", 717, 1105], ["USE", 743, 1105], ["USE", 725, 1105], ["DEF", 664, 1106], ["USE", 1043, 1106], ["USE", 1003, 1106], ["USE", 915, 1106], ["USE", 943, 1106], ["USE", 881, 1106], ["USE", 886, 1106], ["USE", 915, 1107], ["USE", 1043, 1108], ["USE", 1036, 1108], ["USE", 1003, 1108], ["DEF", 667, 1109], ["USE", 1043, 1109], ["USE", 1054, 1109], ["USE", 1026, 1109], ["USE", 1029, 1109], ["USE", 1021, 1109], ["USE", 1022, 1109], ["USE", 1015, 1109], ["USE", 1017, 1109], ["USE", 973, 1109], ["USE", 981, 1109], ["USE", 915, 1109], ["USE", 960, 1109], ["USE", 946, 1109], ["USE", 932, 1109], ["USE", 928, 1109], ["USE", 923, 1109], ["USE", 897, 1109], ["USE", 902, 1109], ["USE", 881, 1109], ["USE", 889, 1109], ["USE", 875, 1109], ["USE", 878, 1109], ["USE", 866, 1109], ["USE", 869, 1109], ["USE", 843, 1109], ["USE", 860, 1109], ["USE", 857, 1109], ["USE", 848, 1109], ["USE", 815, 1109], ["USE", 820, 1109], ["USE", 779, 1109], ["USE", 808, 1109], ["USE", 794, 1109], ["USE", 753, 1109], ["USE", 758, 1109], ["USE", 717, 1109], ["USE", 746, 1109], ["USE", 732, 1109], ["USE", 697, 1109], ["USE", 706, 1109], ["USE", 702, 1109], ["DEF", 1066, 1110], ["DEF", 1076, 1110], ["USE", 830, 1110], ["DEF", 834, 1110], ["DEF", 835, 1110], ["DEF", 827, 1110], ["USE", 827, 1110], ["USE", 815, 1110], ["USE", 824, 1110], ["USE", 818, 1110], ["USE", 768, 1110], ["DEF", 772, 1110], ["DEF", 773, 1110], ["DEF", 765, 1110], ["USE", 765, 1110], ["USE", 753, 1110], ["USE", 762, 1110], ["USE", 756, 1110], ["DEF", 1066, 1111], ["DEF", 1073, 1111], ["DEF", 990, 1111], ["DEF", 991, 1111], ["USE", 973, 1111], ["USE", 977, 1111], ["USE", 966, 1111], ["USE", 866, 1112], ["USE", 843, 1112], ["USE", 846, 1112], ["USE", 830, 1112], ["USE", 768, 1112], ["USE", 973, 1113], ["USE", 1043, 1114], ["DEF", 1026, 1114], ["DEF", 1027, 1114], ["USE", 1021, 1114], ["USE", 1015, 1114], ["USE", 1016, 1114], ["USE", 973, 1114], ["USE", 977, 1114], ["USE", 915, 1114], ["USE", 959, 1114], ["USE", 945, 1114], ["USE", 931, 1114], ["USE", 927, 1114], ["USE", 897, 1114], ["USE", 881, 1114], ["USE", 888, 1114], ["DEF", 875, 1114], ["DEF", 876, 1114], ["USE", 866, 1114], ["USE", 843, 1114], ["USE", 856, 1114], ["USE", 846, 1114], ["USE", 815, 1114], ["USE", 818, 1114], ["USE", 779, 1114], ["USE", 807, 1114], ["USE", 793, 1114], ["USE", 753, 1114], ["USE", 756, 1114], ["USE", 717, 1114], ["USE", 745, 1114], ["USE", 731, 1114], ["USE", 697, 1114], ["USE", 705, 1114], ["USE", 701, 1114], ["USE", 697, 1115], ["USE", 843, 1116], ["USE", 854, 1116], ["USE", 1043, 1117], ["DEF", 1026, 1117], ["DEF", 1027, 1117], ["USE", 1021, 1117], ["USE", 1015, 1117], ["USE", 1016, 1117], ["DEF", 815, 1118], ["DEF", 816, 1118], ["USE", 815, 1118], ["USE", 816, 1118], ["DEF", 753, 1118], ["DEF", 754, 1118], ["USE", 753, 1118], ["USE", 754, 1118], ["DEF", 1066, 1119], ["DEF", 1068, 1119], ["DEF", 1032, 1119], ["DEF", 1033, 1119], ["DEF", 999, 1119], ["DEF", 1000, 1119], ["USE", 838, 1119], ["USE", 686, 1119], ["USE", 815, 1120], ["USE", 816, 1120], ["USE", 753, 1120], ["USE", 754, 1120], ["DEF", 815, 1121], ["DEF", 816, 1121], ["DEF", 753, 1121], ["DEF", 754, 1121], ["REACHES", 655, 915], ["REACHES", 655, 779], ["REACHES", 655, 717], ["REACHES", 1061, 815], ["REACHES", 1061, 779], ["REACHES", 1061, 753], ["REACHES", 1061, 717], ["REACHES", 1061, 675], ["REACHES", 661, 1043], ["REACHES", 661, 966], ["REACHES", 661, 915], ["REACHES", 661, 897], ["REACHES", 661, 881], ["REACHES", 661, 875], ["REACHES", 658, 1036], ["REACHES", 658, 1043], ["REACHES", 658, 1026], ["REACHES", 658, 990], ["REACHES", 1015, 990], ["REACHES", 658, 915], ["REACHES", 658, 717], ["REACHES", 1015, 915], ["REACHES", 658, 779], ["REACHES", 1015, 717], ["REACHES", 1015, 779], ["REACHES", 667, 973], ["REACHES", 667, 1043], ["REACHES", 667, 717], ["REACHES", 667, 1026], ["REACHES", 667, 1021], ["REACHES", 667, 1015], ["REACHES", 667, 915], ["REACHES", 667, 779], ["REACHES", 667, 897], ["REACHES", 667, 843], ["REACHES", 667, 881], ["REACHES", 667, 875], ["REACHES", 667, 753], ["REACHES", 667, 815], ["REACHES", 667, 697], ["REACHES", 667, 866], ["REACHES", 1066, 838], ["REACHES", 999, 838], ["REACHES", 1032, 838], ["REACHES", 1066, 686], ["REACHES", 999, 686], ["REACHES", 1032, 686], ["REACHES", 875, 866], ["REACHES", 875, 843], ["REACHES", 690, 672], ["REACHES", 1079, 672], ["REACHES", 664, 1043], ["REACHES", 664, 1003], ["REACHES", 664, 915], ["REACHES", 664, 881], ["REACHES", 834, 815], ["REACHES", 834, 827], ["REACHES", 834, 830], ["REACHES", 827, 830], ["REACHES", 827, 827], ["REACHES", 827, 815], ["REACHES", 765, 753], ["REACHES", 772, 768], ["REACHES", 765, 765], ["REACHES", 772, 753], ["REACHES", 765, 768], ["REACHES", 772, 765], ["REACHES", 990, 973], ["REACHES", 990, 966], ["REACHES", 1026, 973], ["REACHES", 1026, 1087], ["REACHES", 875, 1087], ["REACHES", 875, 815], ["REACHES", 875, 717], ["REACHES", 1026, 915], ["REACHES", 1026, 897], ["REACHES", 1026, 753], ["REACHES", 1026, 779], ["REACHES", 875, 779], ["REACHES", 1026, 881], ["REACHES", 1026, 866], ["REACHES", 1026, 697], ["REACHES", 1026, 717], ["REACHES", 875, 697], ["REACHES", 875, 843], ["REACHES", 875, 866], ["REACHES", 1026, 843], ["REACHES", 1026, 815], ["REACHES", 875, 753], ["REACHES", 815, 815], ["REACHES", 753, 753], ["REACHES", 815, 753], ["POST_DOM", 717, 768], ["POST_DOM", 1061, 1066], ["POST_DOM", 1087, 1087], ["POST_DOM", 688, 779], ["POST_DOM", 688, 777], ["POST_DOM", 1087, 1003], ["POST_DOM", 1087, 973], ["POST_DOM", 1087, 895], ["POST_DOM", 1087, 1036], ["POST_DOM", 688, 838], ["POST_DOM", 875, 881], ["POST_DOM", 1087, 1086], ["POST_DOM", 1079, 655], ["POST_DOM", 1087, 897], ["POST_DOM", 838, 843], ["POST_DOM", 838, 866], ["POST_DOM", 1026, 1032], ["POST_DOM", 990, 999], ["POST_DOM", 768, 772], ["POST_DOM", 768, 765], ["POST_DOM", 661, 664], ["POST_DOM", 1087, 915], ["POST_DOM", 1087, 672], ["POST_DOM", 688, 717], ["POST_DOM", 1043, 1061], ["POST_DOM", 688, 697], ["POST_DOM", 1003, 1026], ["POST_DOM", 830, 827], ["POST_DOM", 1087, 1021], ["POST_DOM", 1087, 966], ["POST_DOM", 779, 830], ["POST_DOM", 688, 695], ["POST_DOM", 1087, 1043], ["POST_DOM", 658, 661], ["POST_DOM", 973, 990], ["POST_DOM", 866, 875], ["POST_DOM", 688, 690], ["POST_DOM", 1087, 1041], ["POST_DOM", 664, 667], ["POST_DOM", 672, 675], ["POST_DOM", 686, 688], ["POST_DOM", 765, 753], ["POST_DOM", 827, 815], ["POST_DOM", 830, 834], ["POST_DOM", 1066, 1079], ["POST_DOM", 1087, 1012], ["POST_DOM", 655, 658], ["POST_DOM", 1003, 1015], ["POST_DOM", 688, 715], ["POST_DOM", 1087, 971], ["POST_DOM", 672, 686], ["POST_DOM", 1087, 913], ["CONTROLS", 768, 765], ["CONTROLS", 768, 753], ["CONTROLS", 779, 768], ["CONTROLS", 779, 777], ["CONTROLS", 779, 772], ["CONTROLS", 779, 717], ["CONTROLS", 1086, 1066], ["CONTROLS", 1086, 655], ["CONTROLS", 1086, 664], ["CONTROLS", 1086, 1061], ["CONTROLS", 1086, 1043], ["CONTROLS", 1086, 661], ["CONTROLS", 1086, 667], ["CONTROLS", 1086, 1079], ["CONTROLS", 1086, 658], ["CONTROLS", 838, 779], ["CONTROLS", 838, 697], ["CONTROLS", 838, 830], ["CONTROLS", 838, 834], ["CONTROLS", 1003, 973], ["CONTROLS", 1003, 838], ["CONTROLS", 1003, 999], ["CONTROLS", 1003, 672], ["CONTROLS", 1003, 990], ["CONTROLS", 1003, 688], ["CONTROLS", 1003, 686], ["CONTROLS", 1036, 1003], ["CONTROLS", 1036, 1032], ["CONTROLS", 1036, 1026], ["CONTROLS", 1036, 1021], ["CONTROLS", 1021, 1003], ["CONTROLS", 1021, 1012], ["CONTROLS", 1021, 1015], ["CONTROLS", 973, 966], ["CONTROLS", 973, 971], ["CONTROLS", 897, 895], ["CONTROLS", 897, 838], ["CONTROLS", 897, 881], ["CONTROLS", 897, 866], ["CONTROLS", 897, 672], ["CONTROLS", 897, 875], ["CONTROLS", 897, 688], ["CONTROLS", 897, 686], ["CONTROLS", 1043, 1036], ["CONTROLS", 1043, 1041], ["CONTROLS", 915, 838], ["CONTROLS", 915, 866], ["CONTROLS", 915, 672], ["CONTROLS", 915, 688], ["CONTROLS", 915, 686], ["CONTROLS", 915, 913], ["CONTROLS", 966, 897], ["CONTROLS", 966, 915], ["CONTROLS", 866, 843], ["CONTROLS", 717, 697], ["CONTROLS", 717, 715], ["CONTROLS", 697, 695], ["CONTROLS", 697, 690], ["CONTROLS", 830, 827], ["CONTROLS", 830, 815], ["CONTROLS", 686, 675], ["IS_FUNCTION_OF_AST", 652, 653], ["IS_FUNCTION_OF_CFG", 652, 1086], ["IS_AST_PARENT", 541, 542], ["IS_AST_PARENT", 541, 543], ["IS_AST_PARENT", 540, 541], ["IS_AST_PARENT", 539, 540], ["IS_AST_PARENT", 539, 544], ["IS_AST_PARENT", 546, 547], ["IS_AST_PARENT", 545, 546], ["IS_AST_PARENT", 550, 551], ["IS_AST_PARENT", 549, 550], ["IS_AST_PARENT", 555, 556], ["IS_AST_PARENT", 554, 555], ["IS_AST_PARENT", 553, 554], ["IS_AST_PARENT", 557, 558], ["IS_AST_PARENT", 553, 557], ["IS_AST_PARENT", 552, 553], ["IS_AST_PARENT", 549, 552], ["IS_AST_PARENT", 548, 549], ["IS_AST_PARENT", 563, 564], ["IS_AST_PARENT", 562, 563], ["IS_AST_PARENT", 561, 562], ["IS_AST_PARENT", 565, 566], ["IS_AST_PARENT", 561, 565], ["IS_AST_PARENT", 560, 561], ["IS_AST_PARENT", 560, 567], ["IS_AST_PARENT", 559, 560], ["IS_AST_PARENT", 548, 559], ["IS_AST_PARENT", 545, 548], ["IS_AST_PARENT", 571, 572], ["IS_AST_PARENT", 570, 571], ["IS_AST_PARENT", 569, 570], ["IS_AST_PARENT", 573, 574], ["IS_AST_PARENT", 569, 573], ["IS_AST_PARENT", 568, 569], ["IS_AST_PARENT", 545, 568], ["IS_AST_PARENT", 539, 545], ["FLOWS_TO", 575, 541], ["FLOWS_TO", 541, 568], ["FLOWS_TO", 568, 559], ["FLOWS_TO", 559, 552], ["FLOWS_TO", 559, 546], ["FLOWS_TO", 552, 550], ["FLOWS_TO", 550, 576], ["FLOWS_TO", 546, 576], ["DEF", 541, 577], ["USE", 568, 577], ["USE", 571, 577], ["USE", 559, 577], ["USE", 563, 577], ["USE", 552, 577], ["USE", 555, 577], ["USE", 559, 578], ["REACHES", 541, 568], ["REACHES", 541, 559], ["REACHES", 541, 552], ["POST_DOM", 576, 546], ["POST_DOM", 576, 575], ["POST_DOM", 550, 552], ["POST_DOM", 576, 576], ["POST_DOM", 568, 541], ["POST_DOM", 576, 550], ["POST_DOM", 559, 568], ["POST_DOM", 576, 559], ["CONTROLS", 559, 546], ["CONTROLS", 559, 552], ["CONTROLS", 559, 550], ["CONTROLS", 575, 541], ["CONTROLS", 575, 568], ["CONTROLS", 575, 559], ["IS_FUNCTION_OF_AST", 538, 539], ["IS_FUNCTION_OF_CFG", 538, 575], ["IS_AST_PARENT", 582, 583], ["IS_AST_PARENT", 582, 584], ["IS_AST_PARENT", 581, 582], ["IS_AST_PARENT", 580, 581], ["IS_AST_PARENT", 580, 585], ["IS_AST_PARENT", 592, 593], ["IS_AST_PARENT", 592, 594], ["IS_AST_PARENT", 591, 592], ["IS_AST_PARENT", 591, 595], ["IS_AST_PARENT", 590, 591], ["IS_AST_PARENT", 589, 590], ["IS_AST_PARENT", 597, 598], ["IS_AST_PARENT", 597, 599], ["IS_AST_PARENT", 596, 597], ["IS_AST_PARENT", 589, 596], ["IS_AST_PARENT", 588, 589], ["IS_AST_PARENT", 600, 601], ["IS_AST_PARENT", 588, 600], ["IS_AST_PARENT", 587, 588], ["IS_AST_PARENT", 586, 587], ["IS_AST_PARENT", 603, 604], ["IS_AST_PARENT", 605, 606], ["IS_AST_PARENT", 605, 607], ["IS_AST_PARENT", 603, 605], ["IS_AST_PARENT", 602, 603], ["IS_AST_PARENT", 586, 602], ["IS_AST_PARENT", 609, 610], ["IS_AST_PARENT", 611, 612], ["IS_AST_PARENT", 611, 613], ["IS_AST_PARENT", 609, 611], ["IS_AST_PARENT", 608, 609], ["IS_AST_PARENT", 586, 608], ["IS_AST_PARENT", 618, 619], ["IS_AST_PARENT", 618, 620], ["IS_AST_PARENT", 617, 618], ["IS_AST_PARENT", 616, 617], ["IS_AST_PARENT", 615, 616], ["IS_AST_PARENT", 621, 622], ["IS_AST_PARENT", 615, 621], ["IS_AST_PARENT", 614, 615], ["IS_AST_PARENT", 586, 614], ["IS_AST_PARENT", 627, 628], ["IS_AST_PARENT", 627, 629], ["IS_AST_PARENT", 626, 627], ["IS_AST_PARENT", 625, 626], ["IS_AST_PARENT", 624, 625], ["IS_AST_PARENT", 630, 631], ["IS_AST_PARENT", 624, 630], ["IS_AST_PARENT", 623, 624], ["IS_AST_PARENT", 586, 623], ["IS_AST_PARENT", 636, 637], ["IS_AST_PARENT", 636, 638], ["IS_AST_PARENT", 635, 636], ["IS_AST_PARENT", 634, 635], ["IS_AST_PARENT", 633, 634], ["IS_AST_PARENT", 639, 640], ["IS_AST_PARENT", 633, 639], ["IS_AST_PARENT", 632, 633], ["IS_AST_PARENT", 586, 632], ["IS_AST_PARENT", 580, 586], ["FLOWS_TO", 641, 582], ["FLOWS_TO", 582, 632], ["FLOWS_TO", 632, 623], ["FLOWS_TO", 623, 614], ["FLOWS_TO", 614, 608], ["FLOWS_TO", 608, 602], ["FLOWS_TO", 602, 587], ["FLOWS_TO", 587, 642], ["DEF", 608, 643], ["DEF", 609, 643], ["USE", 608, 644], ["USE", 609, 644], ["DEF", 602, 645], ["DEF", 603, 645], ["DEF", 582, 646], ["USE", 632, 646], ["USE", 636, 646], ["USE", 623, 646], ["USE", 627, 646], ["USE", 614, 646], ["USE", 618, 646], ["USE", 608, 646], ["USE", 611, 646], ["USE", 602, 646], ["USE", 605, 646], ["USE", 587, 646], ["USE", 597, 646], ["USE", 592, 646], ["USE", 614, 647], ["USE", 617, 647], ["USE", 587, 648], ["USE", 596, 648], ["USE", 590, 648], ["USE", 623, 649], ["USE", 626, 649], ["USE", 632, 650], ["USE", 635, 650], ["USE", 623, 650], ["USE", 626, 650], ["USE", 614, 650], ["USE", 617, 650], ["DEF", 608, 650], ["DEF", 609, 650], ["DEF", 602, 650], ["DEF", 603, 650], ["USE", 587, 650], ["USE", 596, 650], ["USE", 590, 650], ["USE", 632, 651], ["USE", 635, 651], ["REACHES", 582, 632], ["REACHES", 582, 623], ["REACHES", 582, 614], ["REACHES", 582, 608], ["REACHES", 582, 602], ["REACHES", 582, 587], ["REACHES", 602, 642], ["REACHES", 602, 587], ["POST_DOM", 587, 602], ["POST_DOM", 602, 608], ["POST_DOM", 642, 642], ["POST_DOM", 614, 623], ["POST_DOM", 623, 632], ["POST_DOM", 632, 582], ["POST_DOM", 608, 614], ["POST_DOM", 642, 641], ["POST_DOM", 642, 587], ["CONTROLS", 641, 602], ["CONTROLS", 641, 608], ["CONTROLS", 641, 623], ["CONTROLS", 641, 632], ["CONTROLS", 641, 582], ["CONTROLS", 641, 614], ["CONTROLS", 641, 587], ["IS_FUNCTION_OF_AST", 579, 580], ["IS_FUNCTION_OF_CFG", 579, 641], ["IS_AST_PARENT", 3, 4], ["IS_AST_PARENT", 3, 5], ["IS_AST_PARENT", 2, 3], ["IS_AST_PARENT", 6, 7], ["IS_AST_PARENT", 6, 8], ["IS_AST_PARENT", 2, 6], ["IS_AST_PARENT", 9, 10], ["IS_AST_PARENT", 9, 11], ["IS_AST_PARENT", 2, 9], ["IS_AST_PARENT", 12, 13], ["IS_AST_PARENT", 12, 14], ["IS_AST_PARENT", 2, 12], ["IS_AST_PARENT", 15, 16], ["IS_AST_PARENT", 15, 17], ["IS_AST_PARENT", 2, 15], ["IS_AST_PARENT", 18, 19], ["IS_AST_PARENT", 18, 20], ["IS_AST_PARENT", 2, 18], ["IS_AST_PARENT", 1, 2], ["IS_AST_PARENT", 1, 21], ["IS_AST_PARENT", 23, 24], ["IS_AST_PARENT", 22, 23], ["IS_AST_PARENT", 28, 29], ["IS_AST_PARENT", 27, 28], ["IS_AST_PARENT", 26, 27], ["IS_AST_PARENT", 30, 31], ["IS_AST_PARENT", 26, 30], ["IS_AST_PARENT", 25, 26], ["IS_AST_PARENT", 22, 25], ["IS_AST_PARENT", 34, 35], ["IS_AST_PARENT", 33, 34], ["IS_AST_PARENT", 39, 40], ["IS_AST_PARENT", 38, 39], ["IS_AST_PARENT", 37, 38], ["IS_AST_PARENT", 41, 42], ["IS_AST_PARENT", 37, 41], ["IS_AST_PARENT", 36, 37], ["IS_AST_PARENT", 33, 36], ["IS_AST_PARENT", 32, 33], ["IS_AST_PARENT", 50, 51], ["IS_AST_PARENT", 49, 50], ["IS_AST_PARENT", 52, 53], ["IS_AST_PARENT", 49, 52], ["IS_AST_PARENT", 54, 55], ["IS_AST_PARENT", 49, 54], ["IS_AST_PARENT", 48, 49], ["IS_AST_PARENT", 56, 57], ["IS_AST_PARENT", 48, 56], ["IS_AST_PARENT", 47, 48], ["IS_AST_PARENT", 47, 58], ["IS_AST_PARENT", 46, 47], ["IS_AST_PARENT", 63, 64], ["IS_AST_PARENT", 65, 66], ["IS_AST_PARENT", 67, 68], ["IS_AST_PARENT", 69, 70], ["IS_AST_PARENT", 69, 71], ["IS_AST_PARENT", 67, 69], ["IS_AST_PARENT", 65, 67], ["IS_AST_PARENT", 63, 65], ["IS_AST_PARENT", 62, 63], ["IS_AST_PARENT", 61, 62], ["IS_AST_PARENT", 73, 74], ["IS_AST_PARENT", 75, 76], ["IS_AST_PARENT", 77, 78], ["IS_AST_PARENT", 79, 80], ["IS_AST_PARENT", 79, 81], ["IS_AST_PARENT", 77, 79], ["IS_AST_PARENT", 75, 77], ["IS_AST_PARENT", 73, 75], ["IS_AST_PARENT", 72, 73], ["IS_AST_PARENT", 61, 72], ["IS_AST_PARENT", 82, 83], ["IS_AST_PARENT", 61, 82], ["IS_AST_PARENT", 60, 61], ["IS_AST_PARENT", 84, 85], ["IS_AST_PARENT", 60, 84], ["IS_AST_PARENT", 59, 60], ["IS_AST_PARENT", 59, 86], ["IS_AST_PARENT", 46, 59], ["IS_AST_PARENT", 45, 46], ["IS_AST_PARENT", 90, 91], ["IS_AST_PARENT", 89, 90], ["IS_AST_PARENT", 92, 93], ["IS_AST_PARENT", 89, 92], ["IS_AST_PARENT", 94, 95], ["IS_AST_PARENT", 89, 94], ["IS_AST_PARENT", 96, 97], ["IS_AST_PARENT", 89, 96], ["IS_AST_PARENT", 98, 99], ["IS_AST_PARENT", 89, 98], ["IS_AST_PARENT", 88, 89], ["IS_AST_PARENT", 100, 101], ["IS_AST_PARENT", 88, 100], ["IS_AST_PARENT", 87, 88], ["IS_AST_PARENT", 87, 102], ["IS_AST_PARENT", 45, 87], ["IS_AST_PARENT", 44, 45], ["IS_AST_PARENT", 103, 104], ["IS_AST_PARENT", 106, 107], ["IS_AST_PARENT", 108, 109], ["IS_AST_PARENT", 106, 108], ["IS_AST_PARENT", 105, 106], ["IS_AST_PARENT", 105, 110], ["IS_AST_PARENT", 103, 105], ["IS_AST_PARENT", 44, 103], ["IS_AST_PARENT", 43, 44], ["IS_AST_PARENT", 32, 43], ["IS_AST_PARENT", 22, 32], ["IS_AST_PARENT", 115, 116], ["IS_AST_PARENT", 114, 115], ["IS_AST_PARENT", 120, 121], ["IS_AST_PARENT", 119, 120], ["IS_AST_PARENT", 122, 123], ["IS_AST_PARENT", 119, 122], ["IS_AST_PARENT", 118, 119], ["IS_AST_PARENT", 124, 125], ["IS_AST_PARENT", 118, 124], ["IS_AST_PARENT", 117, 118], ["IS_AST_PARENT", 114, 117], ["IS_AST_PARENT", 113, 114], ["IS_AST_PARENT", 130, 131], ["IS_AST_PARENT", 129, 130], ["IS_AST_PARENT", 132, 133], ["IS_AST_PARENT", 129, 132], ["IS_AST_PARENT", 134, 135], ["IS_AST_PARENT", 129, 134], ["IS_AST_PARENT", 136, 137], ["IS_AST_PARENT", 129, 136], ["IS_AST_PARENT", 138, 139], ["IS_AST_PARENT", 129, 138], ["IS_AST_PARENT", 140, 141], ["IS_AST_PARENT", 129, 140], ["IS_AST_PARENT", 142, 143], ["IS_AST_PARENT", 129, 142], ["IS_AST_PARENT", 144, 145], ["IS_AST_PARENT", 129, 144], ["IS_AST_PARENT", 146, 147], ["IS_AST_PARENT", 129, 146], ["IS_AST_PARENT", 128, 129], ["IS_AST_PARENT", 149, 150], ["IS_AST_PARENT", 149, 151], ["IS_AST_PARENT", 148, 149], ["IS_AST_PARENT", 128, 148], ["IS_AST_PARENT", 127, 128], ["IS_AST_PARENT", 127, 152], ["IS_AST_PARENT", 126, 127], ["IS_AST_PARENT", 113, 126], ["IS_AST_PARENT", 112, 113], ["IS_AST_PARENT", 111, 112], ["IS_AST_PARENT", 156, 157], ["IS_AST_PARENT", 155, 156], ["IS_AST_PARENT", 161, 162], ["IS_AST_PARENT", 160, 161], ["IS_AST_PARENT", 163, 164], ["IS_AST_PARENT", 160, 163], ["IS_AST_PARENT", 159, 160], ["IS_AST_PARENT", 165, 166], ["IS_AST_PARENT", 159, 165], ["IS_AST_PARENT", 158, 159], ["IS_AST_PARENT", 155, 158], ["IS_AST_PARENT", 154, 155], ["IS_AST_PARENT", 171, 172], ["IS_AST_PARENT", 170, 171], ["IS_AST_PARENT", 173, 174], ["IS_AST_PARENT", 170, 173], ["IS_AST_PARENT", 175, 176], ["IS_AST_PARENT", 170, 175], ["IS_AST_PARENT", 177, 178], ["IS_AST_PARENT", 170, 177], ["IS_AST_PARENT", 179, 180], ["IS_AST_PARENT", 170, 179], ["IS_AST_PARENT", 181, 182], ["IS_AST_PARENT", 170, 181], ["IS_AST_PARENT", 183, 184], ["IS_AST_PARENT", 170, 183], ["IS_AST_PARENT", 185, 186], ["IS_AST_PARENT", 170, 185], ["IS_AST_PARENT", 169, 170], ["IS_AST_PARENT", 187, 188], ["IS_AST_PARENT", 169, 187], ["IS_AST_PARENT", 168, 169], ["IS_AST_PARENT", 168, 189], ["IS_AST_PARENT", 167, 168], ["IS_AST_PARENT", 154, 167], ["IS_AST_PARENT", 153, 154], ["IS_AST_PARENT", 191, 192], ["IS_AST_PARENT", 191, 193], ["IS_AST_PARENT", 190, 191], ["IS_AST_PARENT", 153, 190], ["IS_AST_PARENT", 111, 153], ["IS_AST_PARENT", 199, 200], ["IS_AST_PARENT", 198, 199], ["IS_AST_PARENT", 197, 198], ["IS_AST_PARENT", 201, 202], ["IS_AST_PARENT", 197, 201], ["IS_AST_PARENT", 196, 197], ["IS_AST_PARENT", 196, 203], ["IS_AST_PARENT", 195, 196], ["IS_AST_PARENT", 206, 207], ["IS_AST_PARENT", 206, 208], ["IS_AST_PARENT", 205, 206], ["IS_AST_PARENT", 209, 210], ["IS_AST_PARENT", 209, 211], ["IS_AST_PARENT", 205, 209], ["IS_AST_PARENT", 204, 205], ["IS_AST_PARENT", 212, 213], ["IS_AST_PARENT", 212, 214], ["IS_AST_PARENT", 204, 212], ["IS_AST_PARENT", 195, 204], ["IS_AST_PARENT", 194, 195], ["IS_AST_PARENT", 111, 194], ["IS_AST_PARENT", 22, 111], ["IS_AST_PARENT", 216, 217], ["IS_AST_PARENT", 215, 216], ["IS_AST_PARENT", 219, 220], ["IS_AST_PARENT", 219, 221], ["IS_AST_PARENT", 218, 219], ["IS_AST_PARENT", 215, 218], ["IS_AST_PARENT", 22, 215], ["IS_AST_PARENT", 226, 227], ["IS_AST_PARENT", 225, 226], ["IS_AST_PARENT", 224, 225], ["IS_AST_PARENT", 228, 229], ["IS_AST_PARENT", 224, 228], ["IS_AST_PARENT", 223, 224], ["IS_AST_PARENT", 223, 230], ["IS_AST_PARENT", 222, 223], ["IS_AST_PARENT", 22, 222], ["IS_AST_PARENT", 235, 236], ["IS_AST_PARENT", 234, 235], ["IS_AST_PARENT", 233, 234], ["IS_AST_PARENT", 237, 238], ["IS_AST_PARENT", 233, 237], ["IS_AST_PARENT", 232, 233], ["IS_AST_PARENT", 232, 239], ["IS_AST_PARENT", 231, 232], ["IS_AST_PARENT", 22, 231], ["IS_AST_PARENT", 242, 243], ["IS_AST_PARENT", 241, 242], ["IS_AST_PARENT", 247, 248], ["IS_AST_PARENT", 246, 247], ["IS_AST_PARENT", 249, 250], ["IS_AST_PARENT", 246, 249], ["IS_AST_PARENT", 245, 246], ["IS_AST_PARENT", 251, 252], ["IS_AST_PARENT", 245, 251], ["IS_AST_PARENT", 244, 245], ["IS_AST_PARENT", 241, 244], ["IS_AST_PARENT", 240, 241], ["IS_AST_PARENT", 254, 255], ["IS_AST_PARENT", 259, 260], ["IS_AST_PARENT", 258, 259], ["IS_AST_PARENT", 257, 258], ["IS_AST_PARENT", 261, 262], ["IS_AST_PARENT", 257, 261], ["IS_AST_PARENT", 256, 257], ["IS_AST_PARENT", 256, 263], ["IS_AST_PARENT", 254, 256], ["IS_AST_PARENT", 253, 254], ["IS_AST_PARENT", 240, 253], ["IS_AST_PARENT", 22, 240], ["IS_AST_PARENT", 267, 268], ["IS_AST_PARENT", 266, 267], ["IS_AST_PARENT", 269, 270], ["IS_AST_PARENT", 266, 269], ["IS_AST_PARENT", 271, 272], ["IS_AST_PARENT", 266, 271], ["IS_AST_PARENT", 274, 275], ["IS_AST_PARENT", 274, 276], ["IS_AST_PARENT", 273, 274], ["IS_AST_PARENT", 266, 273], ["IS_AST_PARENT", 265, 266], ["IS_AST_PARENT", 277, 278], ["IS_AST_PARENT", 265, 277], ["IS_AST_PARENT", 264, 265], ["IS_AST_PARENT", 22, 264], ["IS_AST_PARENT", 282, 283], ["IS_AST_PARENT", 281, 282], ["IS_AST_PARENT", 285, 286], ["IS_AST_PARENT", 285, 287], ["IS_AST_PARENT", 284, 285], ["IS_AST_PARENT", 281, 284], ["IS_AST_PARENT", 289, 290], ["IS_AST_PARENT", 291, 292], ["IS_AST_PARENT", 291, 293], ["IS_AST_PARENT", 289, 291], ["IS_AST_PARENT", 288, 289], ["IS_AST_PARENT", 281, 288], ["IS_AST_PARENT", 280, 281], ["IS_AST_PARENT", 294, 295], ["IS_AST_PARENT", 280, 294], ["IS_AST_PARENT", 279, 280], ["IS_AST_PARENT", 22, 279], ["IS_AST_PARENT", 303, 304], ["IS_AST_PARENT", 305, 306], ["IS_AST_PARENT", 305, 307], ["IS_AST_PARENT", 303, 305], ["IS_AST_PARENT", 302, 303], ["IS_AST_PARENT", 301, 302], ["IS_AST_PARENT", 300, 301], ["IS_AST_PARENT", 308, 309], ["IS_AST_PARENT", 300, 308], ["IS_AST_PARENT", 299, 300], ["IS_AST_PARENT", 299, 310], ["IS_AST_PARENT", 298, 299], ["IS_AST_PARENT", 297, 298], ["IS_AST_PARENT", 296, 297], ["IS_AST_PARENT", 312, 313], ["IS_AST_PARENT", 312, 314], ["IS_AST_PARENT", 311, 312], ["IS_AST_PARENT", 296, 311], ["IS_AST_PARENT", 317, 318], ["IS_AST_PARENT", 319, 320], ["IS_AST_PARENT", 319, 321], ["IS_AST_PARENT", 317, 319], ["IS_AST_PARENT", 316, 317], ["IS_AST_PARENT", 316, 322], ["IS_AST_PARENT", 315, 316], ["IS_AST_PARENT", 296, 315], ["IS_AST_PARENT", 22, 296], ["IS_AST_PARENT", 325, 326], ["IS_AST_PARENT", 327, 328], ["IS_AST_PARENT", 329, 330], ["IS_AST_PARENT", 329, 331], ["IS_AST_PARENT", 327, 329], ["IS_AST_PARENT", 325, 327], ["IS_AST_PARENT", 324, 325], ["IS_AST_PARENT", 324, 332], ["IS_AST_PARENT", 323, 324], ["IS_AST_PARENT", 22, 323], ["IS_AST_PARENT", 335, 336], ["IS_AST_PARENT", 337, 338], ["IS_AST_PARENT", 339, 340], ["IS_AST_PARENT", 339, 341], ["IS_AST_PARENT", 337, 339], ["IS_AST_PARENT", 335, 337], ["IS_AST_PARENT", 334, 335], ["IS_AST_PARENT", 334, 342], ["IS_AST_PARENT", 333, 334], ["IS_AST_PARENT", 22, 333], ["IS_AST_PARENT", 345, 346], ["IS_AST_PARENT", 344, 345], ["IS_AST_PARENT", 350, 351], ["IS_AST_PARENT", 349, 350], ["IS_AST_PARENT", 352, 353], ["IS_AST_PARENT", 349, 352], ["IS_AST_PARENT", 348, 349], ["IS_AST_PARENT", 354, 355], ["IS_AST_PARENT", 348, 354], ["IS_AST_PARENT", 347, 348], ["IS_AST_PARENT", 344, 347], ["IS_AST_PARENT", 343, 344], ["IS_AST_PARENT", 361, 362], ["IS_AST_PARENT", 361, 363], ["IS_AST_PARENT", 360, 361], ["IS_AST_PARENT", 359, 360], ["IS_AST_PARENT", 358, 359], ["IS_AST_PARENT", 364, 365], ["IS_AST_PARENT", 358, 364], ["IS_AST_PARENT", 357, 358], ["IS_AST_PARENT", 357, 366], ["IS_AST_PARENT", 356, 357], ["IS_AST_PARENT", 343, 356], ["IS_AST_PARENT", 22, 343], ["IS_AST_PARENT", 369, 370], ["IS_AST_PARENT", 369, 371], ["IS_AST_PARENT", 368, 369], ["IS_AST_PARENT", 367, 368], ["IS_AST_PARENT", 373, 374], ["IS_AST_PARENT", 373, 375], ["IS_AST_PARENT", 372, 373], ["IS_AST_PARENT", 367, 372], ["IS_AST_PARENT", 22, 367], ["IS_AST_PARENT", 377, 378], ["IS_AST_PARENT", 377, 379], ["IS_AST_PARENT", 376, 377], ["IS_AST_PARENT", 22, 376], ["IS_AST_PARENT", 381, 382], ["IS_AST_PARENT", 381, 383], ["IS_AST_PARENT", 380, 381], ["IS_AST_PARENT", 22, 380], ["IS_AST_PARENT", 385, 386], ["IS_AST_PARENT", 385, 387], ["IS_AST_PARENT", 384, 385], ["IS_AST_PARENT", 22, 384], ["IS_AST_PARENT", 390, 391], ["IS_AST_PARENT", 390, 392], ["IS_AST_PARENT", 389, 390], ["IS_AST_PARENT", 389, 393], ["IS_AST_PARENT", 389, 394], ["IS_AST_PARENT", 388, 389], ["IS_AST_PARENT", 22, 388], ["IS_AST_PARENT", 396, 397], ["IS_AST_PARENT", 396, 398], ["IS_AST_PARENT", 395, 396], ["IS_AST_PARENT", 399, 400], ["IS_AST_PARENT", 399, 401], ["IS_AST_PARENT", 395, 399], ["IS_AST_PARENT", 22, 395], ["IS_AST_PARENT", 403, 404], ["IS_AST_PARENT", 403, 405], ["IS_AST_PARENT", 402, 403], ["IS_AST_PARENT", 406, 407], ["IS_AST_PARENT", 406, 408], ["IS_AST_PARENT", 406, 409], ["IS_AST_PARENT", 402, 406], ["IS_AST_PARENT", 22, 402], ["IS_AST_PARENT", 412, 413], ["IS_AST_PARENT", 412, 414], ["IS_AST_PARENT", 411, 412], ["IS_AST_PARENT", 411, 415], ["IS_AST_PARENT", 411, 416], ["IS_AST_PARENT", 410, 411], ["IS_AST_PARENT", 22, 410], ["IS_AST_PARENT", 418, 419], ["IS_AST_PARENT", 418, 420], ["IS_AST_PARENT", 417, 418], ["IS_AST_PARENT", 22, 417], ["IS_AST_PARENT", 1, 22], ["FLOWS_TO", 421, 18], ["FLOWS_TO", 18, 15], ["FLOWS_TO", 15, 12], ["FLOWS_TO", 12, 9], ["FLOWS_TO", 9, 6], ["FLOWS_TO", 6, 3], ["FLOWS_TO", 3, 417], ["FLOWS_TO", 417, 410], ["FLOWS_TO", 410, 402], ["FLOWS_TO", 402, 395], ["FLOWS_TO", 395, 388], ["FLOWS_TO", 388, 384], ["FLOWS_TO", 384, 380], ["FLOWS_TO", 380, 376], ["FLOWS_TO", 376, 372], ["FLOWS_TO", 372, 368], ["FLOWS_TO", 372, 356], ["FLOWS_TO", 368, 356], ["FLOWS_TO", 356, 347], ["FLOWS_TO", 356, 333], ["FLOWS_TO", 347, 345], ["FLOWS_TO", 345, 422], ["FLOWS_TO", 333, 323], ["FLOWS_TO", 323, 315], ["FLOWS_TO", 315, 311], ["FLOWS_TO", 315, 298], ["FLOWS_TO", 311, 279], ["FLOWS_TO", 298, 279], ["FLOWS_TO", 279, 264], ["FLOWS_TO", 264, 253], ["FLOWS_TO", 253, 244], ["FLOWS_TO", 253, 231], ["FLOWS_TO", 244, 242], ["FLOWS_TO", 242, 422], ["FLOWS_TO", 231, 222], ["FLOWS_TO", 222, 218], ["FLOWS_TO", 218, 216], ["FLOWS_TO", 218, 194], ["FLOWS_TO", 216, 422], ["FLOWS_TO", 194, 190], ["FLOWS_TO", 194, 126], ["FLOWS_TO", 190, 167], ["FLOWS_TO", 167, 158], ["FLOWS_TO", 167, 43], ["FLOWS_TO", 158, 156], ["FLOWS_TO", 156, 422], ["FLOWS_TO", 126, 117], ["FLOWS_TO", 126, 43], ["FLOWS_TO", 117, 115], ["FLOWS_TO", 115, 422], ["FLOWS_TO", 43, 36], ["FLOWS_TO", 43, 25], ["FLOWS_TO", 36, 34], ["FLOWS_TO", 34, 422], ["FLOWS_TO", 25, 23], ["FLOWS_TO", 23, 422], ["USE", 194, 423], ["USE", 43, 424], ["USE", 72, 424], ["USE", 62, 424], ["DEF", 384, 425], ["DEF", 385, 425], ["DEF", 222, 425], ["DEF", 223, 425], ["USE", 194, 425], ["USE", 194, 426], ["USE", 43, 427], ["USE", 75, 427], ["USE", 73, 427], ["USE", 65, 427], ["USE", 63, 427], ["USE", 298, 428], ["USE", 299, 428], ["USE", 333, 429], ["USE", 337, 429], ["USE", 323, 429], ["USE", 327, 429], ["USE", 315, 429], ["USE", 317, 429], ["USE", 298, 429], ["USE", 303, 429], ["USE", 279, 429], ["USE", 289, 429], ["USE", 333, 430], ["USE", 334, 430], ["USE", 323, 430], ["USE", 324, 430], ["USE", 43, 430], ["USE", 72, 430], ["USE", 62, 430], ["USE", 126, 431], ["DEF", 18, 432], ["USE", 356, 432], ["USE", 361, 432], ["USE", 333, 432], ["USE", 339, 432], ["USE", 323, 432], ["USE", 329, 432], ["USE", 315, 432], ["USE", 319, 432], ["USE", 298, 432], ["USE", 305, 432], ["USE", 279, 432], ["USE", 291, 432], ["USE", 43, 432], ["USE", 79, 432], ["USE", 69, 432], ["USE", 190, 433], ["USE", 191, 433], ["USE", 43, 434], ["USE", 62, 434], ["USE", 253, 435], ["USE", 256, 435], ["DEF", 3, 436], ["USE", 372, 436], ["DEF", 368, 436], ["DEF", 369, 436], ["USE", 126, 436], ["USE", 149, 436], ["DEF", 376, 437], ["DEF", 377, 437], ["USE", 253, 437], ["USE", 259, 437], ["USE", 279, 438], ["USE", 284, 438], ["USE", 222, 439], ["USE", 223, 439], ["USE", 410, 440], ["USE", 412, 440], ["USE", 372, 440], ["USE", 279, 440], ["USE", 282, 440], ["USE", 264, 440], ["USE", 271, 440], ["USE", 269, 440], ["USE", 253, 440], ["USE", 43, 440], ["USE", 90, 440], ["DEF", 15, 441], ["USE", 167, 441], ["USE", 185, 441], ["USE", 126, 441], ["USE", 146, 441], ["DEF", 395, 442], ["DEF", 396, 442], ["DEF", 311, 442], ["DEF", 312, 442], ["DEF", 298, 442], ["DEF", 299, 442], ["USE", 167, 442], ["USE", 177, 442], ["USE", 126, 442], ["USE", 136, 442], ["USE", 356, 443], ["USE", 360, 443], ["USE", 43, 443], ["USE", 77, 443], ["USE", 67, 443], ["USE", 43, 444], ["DEF", 12, 445], ["USE", 167, 445], ["USE", 183, 445], ["USE", 126, 445], ["USE", 144, 445], ["USE", 333, 446], ["USE", 335, 446], ["USE", 323, 446], ["USE", 325, 446], ["DEF", 388, 447], ["DEF", 390, 447], ["DEF", 231, 447], ["DEF", 232, 447], ["USE", 218, 447], ["DEF", 190, 447], ["DEF", 191, 447], ["USE", 167, 447], ["USE", 175, 447], ["USE", 126, 447], ["USE", 134, 447], ["USE", 43, 447], ["USE", 94, 447], ["USE", 323, 448], ["USE", 324, 448], ["USE", 43, 449], ["USE", 72, 449], ["USE", 62, 449], ["USE", 356, 450], ["USE", 43, 451], ["USE", 73, 451], ["USE", 63, 451], ["USE", 43, 452], ["DEF", 9, 453], ["USE", 43, 453], ["USE", 52, 453], ["USE", 194, 454], ["USE", 347, 455], ["USE", 350, 455], ["USE", 43, 456], ["USE", 75, 456], ["USE", 73, 456], ["USE", 65, 456], ["USE", 63, 456], ["USE", 231, 457], ["USE", 232, 457], ["USE", 158, 458], ["USE", 161, 458], ["USE", 117, 458], ["USE", 120, 458], ["DEF", 410, 459], ["DEF", 411, 459], ["DEF", 43, 459], ["DEF", 105, 459], ["USE", 43, 459], ["USE", 98, 459], ["USE", 82, 459], ["USE", 54, 459], ["USE", 36, 459], ["USE", 39, 459], ["USE", 25, 459], ["USE", 28, 459], ["USE", 347, 460], ["USE", 352, 460], ["USE", 244, 460], ["USE", 249, 460], ["USE", 158, 460], ["USE", 163, 460], ["USE", 117, 460], ["USE", 122, 460], ["DEF", 402, 461], ["DEF", 406, 461], ["USE", 167, 461], ["USE", 173, 461], ["USE", 126, 461], ["USE", 132, 461], ["USE", 43, 461], ["USE", 96, 461], ["USE", 333, 462], ["USE", 334, 462], ["USE", 323, 462], ["USE", 324, 462], ["USE", 194, 463], ["USE", 315, 464], ["USE", 298, 464], ["USE", 302, 464], ["DEF", 6, 465], ["USE", 43, 465], ["USE", 50, 465], ["DEF", 402, 466], ["DEF", 403, 466], ["DEF", 333, 466], ["DEF", 334, 466], ["USE", 167, 466], ["USE", 181, 466], ["USE", 126, 466], ["USE", 142, 466], ["USE", 368, 467], ["USE", 369, 467], ["USE", 43, 468], ["USE", 72, 468], ["DEF", 395, 469], ["DEF", 399, 469], ["DEF", 323, 469], ["DEF", 324, 469], ["USE", 167, 469], ["USE", 179, 469], ["USE", 126, 469], ["USE", 140, 469], ["USE", 333, 470], ["USE", 335, 470], ["USE", 323, 470], ["USE", 325, 470], ["USE", 315, 470], ["USE", 298, 470], ["USE", 302, 470], ["USE", 279, 470], ["USE", 288, 470], ["USE", 43, 470], ["USE", 75, 470], ["USE", 73, 470], ["USE", 65, 470], ["USE", 63, 470], ["DEF", 380, 471], ["DEF", 381, 471], ["USE", 264, 471], ["USE", 267, 471], ["USE", 244, 472], ["USE", 247, 472], ["USE", 43, 473], ["USE", 72, 473], ["USE", 62, 473], ["USE", 264, 474], ["USE", 273, 474], ["USE", 43, 475], ["USE", 105, 475], ["USE", 43, 476], ["USE", 167, 477], ["USE", 333, 478], ["USE", 335, 478], ["USE", 323, 478], ["USE", 325, 478], ["USE", 315, 478], ["USE", 298, 478], ["USE", 302, 478], ["USE", 279, 478], ["USE", 288, 478], ["USE", 279, 479], ["USE", 288, 479], ["USE", 126, 480], ["USE", 138, 480], ["USE", 356, 481], ["USE", 360, 481], ["USE", 333, 481], ["USE", 337, 481], ["USE", 323, 481], ["USE", 327, 481], ["USE", 315, 481], ["USE", 317, 481], ["USE", 298, 481], ["USE", 303, 481], ["USE", 279, 481], ["USE", 289, 481], ["USE", 43, 481], ["USE", 77, 481], ["USE", 67, 481], ["USE", 333, 482], ["USE", 334, 482], ["USE", 323, 482], ["USE", 324, 482], ["USE", 333, 483], ["USE", 334, 483], ["DEF", 417, 484], ["DEF", 418, 484], ["DEF", 253, 484], ["DEF", 256, 484], ["USE", 231, 484], ["USE", 235, 484], ["USE", 222, 484], ["USE", 226, 484], ["USE", 167, 484], ["USE", 171, 484], ["USE", 126, 484], ["USE", 130, 484], ["USE", 43, 484], ["USE", 92, 484], ["REACHES", 222, 194], ["REACHES", 9, 43], ["REACHES", 18, 356], ["REACHES", 18, 333], ["REACHES", 18, 323], ["REACHES", 18, 315], ["REACHES", 18, 298], ["REACHES", 18, 279], ["REACHES", 18, 43], ["REACHES", 410, 43], ["REACHES", 43, 36], ["REACHES", 43, 25], ["REACHES", 3, 372], ["REACHES", 368, 126], ["REACHES", 3, 126], ["REACHES", 376, 253], ["REACHES", 402, 167], ["REACHES", 402, 126], ["REACHES", 402, 43], ["REACHES", 333, 167], ["REACHES", 333, 126], ["REACHES", 6, 43], ["REACHES", 323, 167], ["REACHES", 15, 167], ["REACHES", 323, 126], ["REACHES", 15, 126], ["REACHES", 380, 264], ["REACHES", 298, 167], ["REACHES", 311, 167], ["REACHES", 298, 126], ["REACHES", 311, 126], ["REACHES", 12, 167], ["REACHES", 12, 126], ["REACHES", 231, 218], ["REACHES", 190, 167], ["REACHES", 231, 126], ["REACHES", 231, 43], ["REACHES", 190, 43], ["REACHES", 253, 231], ["REACHES", 253, 222], ["REACHES", 253, 167], ["REACHES", 253, 126], ["REACHES", 253, 43], ["POST_DOM", 422, 34], ["POST_DOM", 380, 384], ["POST_DOM", 12, 15], ["POST_DOM", 422, 421], ["POST_DOM", 115, 117], ["POST_DOM", 6, 9], ["POST_DOM", 422, 194], ["POST_DOM", 218, 222], ["POST_DOM", 3, 6], ["POST_DOM", 422, 422], ["POST_DOM", 315, 323], ["POST_DOM", 422, 218], ["POST_DOM", 356, 368], ["POST_DOM", 422, 156], ["POST_DOM", 253, 264], ["POST_DOM", 279, 311], ["POST_DOM", 417, 3], ["POST_DOM", 422, 242], ["POST_DOM", 388, 395], ["POST_DOM", 15, 18], ["POST_DOM", 376, 380], ["POST_DOM", 422, 216], ["POST_DOM", 422, 356], ["POST_DOM", 402, 410], ["POST_DOM", 279, 298], ["POST_DOM", 422, 115], ["POST_DOM", 384, 388], ["POST_DOM", 167, 190], ["POST_DOM", 422, 126], ["POST_DOM", 323, 333], ["POST_DOM", 242, 244], ["POST_DOM", 23, 25], ["POST_DOM", 372, 376], ["POST_DOM", 9, 12], ["POST_DOM", 422, 23], ["POST_DOM", 34, 36], ["POST_DOM", 279, 315], ["POST_DOM", 356, 372], ["POST_DOM", 410, 417], ["POST_DOM", 422, 253], ["POST_DOM", 264, 279], ["POST_DOM", 156, 158], ["POST_DOM", 422, 43], ["POST_DOM", 422, 345], ["POST_DOM", 345, 347], ["POST_DOM", 422, 167], ["POST_DOM", 222, 231], ["POST_DOM", 395, 402], ["CONTROLS", 43, 34], ["CONTROLS", 43, 25], ["CONTROLS", 43, 23], ["CONTROLS", 43, 36], ["CONTROLS", 421, 384], ["CONTROLS", 421, 15], ["CONTROLS", 421, 9], ["CONTROLS", 421, 6], ["CONTROLS", 421, 3], ["CONTROLS", 421, 395], ["CONTROLS", 421, 18], ["CONTROLS", 421, 380], ["CONTROLS", 421, 356], ["CONTROLS", 421, 410], ["CONTROLS", 421, 388], ["CONTROLS", 421, 376], ["CONTROLS", 421, 12], ["CONTROLS", 421, 372], ["CONTROLS", 421, 417], ["CONTROLS", 421, 402], ["CONTROLS", 126, 117], ["CONTROLS", 126, 115], ["CONTROLS", 126, 43], ["CONTROLS", 194, 190], ["CONTROLS", 194, 126], ["CONTROLS", 194, 167], ["CONTROLS", 218, 194], ["CONTROLS", 218, 216], ["CONTROLS", 253, 222], ["CONTROLS", 253, 218], ["CONTROLS", 253, 242], ["CONTROLS", 253, 244], ["CONTROLS", 253, 231], ["CONTROLS", 356, 323], ["CONTROLS", 356, 264], ["CONTROLS", 356, 333], ["CONTROLS", 356, 315], ["CONTROLS", 356, 253], ["CONTROLS", 356, 279], ["CONTROLS", 356, 345], ["CONTROLS", 356, 347], ["CONTROLS", 372, 368], ["CONTROLS", 167, 156], ["CONTROLS", 167, 158], ["CONTROLS", 167, 43], ["CONTROLS", 315, 311], ["CONTROLS", 315, 298], ["IS_FUNCTION_OF_AST", 0, 1], ["IS_FUNCTION_OF_CFG", 0, 421], ["IS_AST_PARENT", 511, 538], ["CONTROLS", 505, 538], ["FLOWS_TO", 505, 538], ["IS_AST_PARENT", 557, 579], ["CONTROLS", 552, 579], ["FLOWS_TO", 552, 579], ["IS_AST_PARENT", 573, 579], ["CONTROLS", 568, 579], ["FLOWS_TO", 568, 579], ["IS_AST_PARENT", 100, 652], ["CONTROLS", 43, 652], ["FLOWS_TO", 43, 652], ["IS_AST_PARENT", 108, 485], ["CONTROLS", 43, 485], ["FLOWS_TO", 43, 485]]}, "file_txt": "static int pkcs12_gen_mac(PKCS12 *p12, const char *pass, int passlen,\n                          unsigned char *mac, unsigned int *maclen,\n                          int (*pkcs12_key_gen)(const char *pass, int passlen,\n                                                unsigned char *salt, int slen,\n                                                int id, int iter, int n,\n                                                unsigned char *out,\n                                                const EVP_MD *md_type))\n{\n    const EVP_MD *md_type;\n    HMAC_CTX *hmac = NULL;\n    unsigned char key[EVP_MAX_MD_SIZE], *salt;\n    int saltlen, iter;\n    int md_size = 0;\n    int md_type_nid;\n    const X509_ALGOR *macalg;\n    const ASN1_OBJECT *macoid;\n\n    if (pkcs12_key_gen == NULL)\n        pkcs12_key_gen = PKCS12_key_gen_utf8;\n\n    if (!PKCS7_type_is_data(p12->authsafes)) {\n        PKCS12err(PKCS12_F_PKCS12_GEN_MAC, PKCS12_R_CONTENT_TYPE_NOT_DATA);\n        return 0;\n    }\n\n    salt = p12->mac->salt->data;\n    saltlen = p12->mac->salt->length;\n    if (!p12->mac->iter)\n        iter = 1;\n    else\n        iter = ASN1_INTEGER_get(p12->mac->iter);\n    X509_SIG_get0(p12->mac->dinfo, &macalg, NULL);\n    X509_ALGOR_get0(&macoid, NULL, NULL, macalg);\n    if ((md_type = EVP_get_digestbyobj(macoid)) == NULL) {\n        PKCS12err(PKCS12_F_PKCS12_GEN_MAC, PKCS12_R_UNKNOWN_DIGEST_ALGORITHM);\n        return 0;\n    }\n    md_size = EVP_MD_size(md_type);\n    md_type_nid = EVP_MD_type(md_type);\n    if (md_size < 0)\n        return 0;\n    if ((md_type_nid == NID_id_GostR3411_94\n         || md_type_nid == NID_id_GostR3411_2012_256\n         || md_type_nid == NID_id_GostR3411_2012_512)\n        && !getenv(\"LEGACY_GOST_PKCS12\")) {\n        md_size = TK26_MAC_KEY_LEN;\n        if (!pkcs12_gen_gost_mac_key(pass, passlen, salt, saltlen, iter,\n                                     md_size, key, md_type)) {\n            PKCS12err(PKCS12_F_PKCS12_GEN_MAC, PKCS12_R_KEY_GEN_ERROR);\n            return 0;\n        }\n    } else\n        if (!(*pkcs12_key_gen)(pass, passlen, salt, saltlen, PKCS12_MAC_ID,\n                               iter, md_size, key, md_type)) {\n        PKCS12err(PKCS12_F_PKCS12_GEN_MAC, PKCS12_R_KEY_GEN_ERROR);\n        return 0;\n    }\n    if ((hmac = HMAC_CTX_new()) == NULL\n        || !HMAC_Init_ex(hmac, key, md_size, md_type, NULL)\n        || !HMAC_Update(hmac, p12->authsafes->d.data->data,\n                        p12->authsafes->d.data->length)\n        || !HMAC_Final(hmac, mac, maclen)) {\n        HMAC_CTX_free(hmac);\n        return 0;\n    }\n    HMAC_CTX_free(hmac);\n    return 1;\n}\n\nHMAC_CTX *HMAC_CTX_new(void)\n{\n    HMAC_CTX *ctx = OPENSSL_zalloc(sizeof(HMAC_CTX));\n\n    if (ctx != NULL) {\n        if (!HMAC_CTX_reset(ctx)) {\n            HMAC_CTX_free(ctx);\n            return NULL;\n        }\n    }\n    return ctx;\n}\n\nint HMAC_CTX_reset(HMAC_CTX *ctx)\n{\n    hmac_ctx_cleanup(ctx);\n    if (!hmac_ctx_alloc_mds(ctx)) {\n        hmac_ctx_cleanup(ctx);\n        return 0;\n    }\n    return 1;\n}\n\nstatic void hmac_ctx_cleanup(HMAC_CTX *ctx)\n{\n    EVP_MD_CTX_reset(ctx->i_ctx);\n    EVP_MD_CTX_reset(ctx->o_ctx);\n    EVP_MD_CTX_reset(ctx->md_ctx);\n    ctx->md = NULL;\n    ctx->key_length = 0;\n    OPENSSL_cleanse(ctx->key, sizeof(ctx->key));\n}\n\nint HMAC_Init_ex(HMAC_CTX *ctx, const void *key, int len,\n                 const EVP_MD *md, ENGINE *impl)\n{\n    int rv = 0;\n    int i, j, reset = 0;\n    unsigned char pad[HMAC_MAX_MD_CBLOCK];\n\n    /* If we are changing MD then we must have a key */\n    if (md != NULL && md != ctx->md && (key == NULL || len < 0))\n        return 0;\n\n    if (md != NULL) {\n        reset = 1;\n        ctx->md = md;\n    } else if (ctx->md) {\n        md = ctx->md;\n    } else {\n        return 0;\n    }\n\n    if (key != NULL) {\n        reset = 1;\n        j = EVP_MD_block_size(md);\n        if (!ossl_assert(j <= (int)sizeof(ctx->key)))\n            return 0;\n        if (j < len) {\n            if (!EVP_DigestInit_ex(ctx->md_ctx, md, impl)\n                    || !EVP_DigestUpdate(ctx->md_ctx, key, len)\n                    || !EVP_DigestFinal_ex(ctx->md_ctx, ctx->key,\n                                           &ctx->key_length))\n                return 0;\n        } else {\n            if (len < 0 || len > (int)sizeof(ctx->key))\n                return 0;\n            memcpy(ctx->key, key, len);\n            ctx->key_length = len;\n        }\n        if (ctx->key_length != HMAC_MAX_MD_CBLOCK)\n            memset(&ctx->key[ctx->key_length], 0,\n                   HMAC_MAX_MD_CBLOCK - ctx->key_length);\n    }\n\n    if (reset) {\n        for (i = 0; i < HMAC_MAX_MD_CBLOCK; i++)\n            pad[i] = 0x36 ^ ctx->key[i];\n        if (!EVP_DigestInit_ex(ctx->i_ctx, md, impl)\n                || !EVP_DigestUpdate(ctx->i_ctx, pad, EVP_MD_block_size(md)))\n            goto err;\n\n        for (i = 0; i < HMAC_MAX_MD_CBLOCK; i++)\n            pad[i] = 0x5c ^ ctx->key[i];\n        if (!EVP_DigestInit_ex(ctx->o_ctx, md, impl)\n                || !EVP_DigestUpdate(ctx->o_ctx, pad, EVP_MD_block_size(md)))\n            goto err;\n    }\n    if (!EVP_MD_CTX_copy_ex(ctx->md_ctx, ctx->i_ctx))\n        goto err;\n    rv = 1;\n err:\n    if (reset)\n        OPENSSL_cleanse(pad, sizeof(pad));\n    return rv;\n}\n\n", "file_tokens": ["static", "int", "pkcs12", "gen", "mac", "(", "pkcs12", "*", "p12", ",", "const", "char", "*", "pass", ",", "int", "passlen", ",", "unsigned", "char", "*", "mac", ",", "unsigned", "int", "*", "maclen", ",", "int", "(", "*", "pkcs12", "key", "gen", ")", "(", "const", "char", "*", "pass", ",", "int", "passlen", ",", "unsigned", "char", "*", "salt", ",", "int", "slen", ",", "int", "id", ",", "int", "iter", ",", "int", "n", ",", "unsigned", "char", "*", "out", ",", "const", "evp", "md", "*", "md", "type", ")", ")", "{", "const", "evp", "md", "*", "md", "type", ";", "hmac", "ctx", "*", "hmac", "=", "null", ";", "unsigned", "char", "key", "[", "evp", "max", "md", "size", "]", ",", "*", "salt", ";", "int", "saltlen", ",", "iter", ";", "int", "md", "size", "=", "0", ";", "int", "md", "type", "nid", ";", "const", "x509", "algor", "*", "macalg", ";", "const", "asn1", "object", "*", "macoid", ";", "if", "(", "pkcs12", "key", "gen", "=", "=", "null", ")", "pkcs12", "key", "gen", "=", "pkcs12", "key", "gen", "utf8", ";", "if", "(", "!", "pkcs7", "type", "is", "data", "(", "p12", "-", ">", "authsafes", ")", ")", "{", "pkcs12err", "(", "pkcs12", "f", "pkcs12", "gen", "mac", ",", "pkcs12", "r", "content", "type", "not", "data", ")", ";", "return", "0", ";", "}", "salt", "=", "p12", "-", ">", "mac", "-", ">", "salt", "-", ">", "data", ";", "saltlen", "=", "p12", "-", ">", "mac", "-", ">", "salt", "-", ">", "length", ";", "if", "(", "!", "p12", "-", ">", "mac", "-", ">", "iter", ")", "iter", "=", "1", ";", "else", "iter", "=", "asn1", "integer", "get", "(", "p12", "-", ">", "mac", "-", ">", "iter", ")", ";", "x509", "sig", "get0", "(", "p12", "-", ">", "mac", "-", ">", "dinfo", ",", "&", "macalg", ",", "null", ")", ";", "x509", "algor", "get0", "(", "&", "macoid", ",", "null", ",", "null", ",", "macalg", ")", ";", "if", "(", "(", "md", "type", "=", "evp", "get", "digestbyobj", "(", "macoid", ")", ")", "=", "=", "null", ")", "{", "pkcs12err", "(", "pkcs12", "f", "pkcs12", "gen", "mac", ",", "pkcs12", "r", "unknown", "digest", "algorithm", ")", ";", "return", "0", ";", "}", "md", "size", "=", "evp", "md", "size", "(", "md", "type", ")", ";", "md", "type", "nid", "=", "evp", "md", "type", "(", "md", "type", ")", ";", "if", "(", "md", "size", "<", "0", ")", "return", "0", ";", "if", "(", "(", "md", "type", "nid", "=", "=", "nid", "id", "gost", "r3411", "94", "|", "|", "md", "type", "nid", "=", "=", "nid", "id", "gost", "r3411", "2012", "256", "|", "|", "md", "type", "nid", "=", "=", "nid", "id", "gost", "r3411", "2012", "512", ")", "&", "&", "!", "getenv", "(", "\"", "legacy_gost_pkcs12", "\"", ")", ")", "{", "md", "size", "=", "tk26", "mac", "key", "len", ";", "if", "(", "!", "pkcs12", "gen", "gost", "mac", "key", "(", "pass", ",", "passlen", ",", "salt", ",", "saltlen", ",", "iter", ",", "md", "size", ",", "key", ",", "md", "type", ")", ")", "{", "pkcs12err", "(", "pkcs12", "f", "pkcs12", "gen", "mac", ",", "pkcs12", "r", "key", "gen", "error", ")", ";", "return", "0", ";", "}", "}", "else", "if", "(", "!", "(", "*", "pkcs12", "key", "gen", ")", "(", "pass", ",", "passlen", ",", "salt", ",", "saltlen", ",", "pkcs12", "mac", "id", ",", "iter", ",", "md", "size", ",", "key", ",", "md", "type", ")", ")", "{", "pkcs12err", "(", "pkcs12", "f", "pkcs12", "gen", "mac", ",", "pkcs12", "r", "key", "gen", "error", ")", ";", "return", "0", ";", "}", "if", "(", "(", "hmac", "=", "hmac", "ctx", "new", "(", ")", ")", "=", "=", "null", "|", "|", "!", "hmac", "init", "ex", "(", "hmac", ",", "key", ",", "md", "size", ",", "md", "type", ",", "null", ")", "|", "|", "!", "hmac", "update", "(", "hmac", ",", "p12", "-", ">", "authsafes", "-", ">", "d", ".", "data", "-", ">", "data", ",", "p12", "-", ">", "authsafes", "-", ">", "d", ".", "data", "-", ">", "length", ")", "|", "|", "!", "hmac", "final", "(", "hmac", ",", "mac", ",", "maclen", ")", ")", "{", "hmac", "ctx", "free", "(", "hmac", ")", ";", "return", "0", ";", "}", "hmac", "ctx", "free", "(", "hmac", ")", ";", "return", "1", ";", "}", "hmac", "ctx", "*", "hmac", "ctx", "new", "(", "void", ")", "{", "hmac", "ctx", "*", "ctx", "=", "openssl", "zalloc", "(", "sizeof", "(", "hmac", "ctx", ")", ")", ";", "if", "(", "ctx", "!", "=", "null", ")", "{", "if", "(", "!", "hmac", "ctx", "reset", "(", "ctx", ")", ")", "{", "hmac", "ctx", "free", "(", "ctx", ")", ";", "return", "null", ";", "}", "}", "return", "ctx", ";", "}", "int", "hmac", "ctx", "reset", "(", "hmac", "ctx", "*", "ctx", ")", "{", "hmac", "ctx", "cleanup", "(", "ctx", ")", ";", "if", "(", "!", "hmac", "ctx", "alloc", "mds", "(", "ctx", ")", ")", "{", "hmac", "ctx", "cleanup", "(", "ctx", ")", ";", "return", "0", ";", "}", "return", "1", ";", "}", "static", "void", "hmac", "ctx", "cleanup", "(", "hmac", "ctx", "*", "ctx", ")", "{", "evp", "md", "ctx", "reset", "(", "ctx", "-", ">", "i", "ctx", ")", ";", "evp", "md", "ctx", "reset", "(", "ctx", "-", ">", "o", "ctx", ")", ";", "evp", "md", "ctx", "reset", "(", "ctx", "-", ">", "md", "ctx", ")", ";", "ctx", "-", ">", "md", "=", "null", ";", "ctx", "-", ">", "key", "length", "=", "0", ";", "openssl", "cleanse", "(", "ctx", "-", ">", "key", ",", "sizeof", "(", "ctx", "-", ">", "key", ")", ")", ";", "}", "int", "hmac", "init", "ex", "(", "hmac", "ctx", "*", "ctx", ",", "const", "void", "*", "key", ",", "int", "len", ",", "const", "evp", "md", "*", "md", ",", "engine", "*", "impl", ")", "{", "int", "rv", "=", "0", ";", "int", "i", ",", "j", ",", "reset", "=", "0", ";", "unsigned", "char", "pad", "[", "hmac", "max", "md", "cblock", "]", ";", "if", "(", "md", "!", "=", "null", "&", "&", "md", "!", "=", "ctx", "-", ">", "md", "&", "&", "(", "key", "=", "=", "null", "|", "|", "len", "<", "0", ")", ")", "return", "0", ";", "if", "(", "md", "!", "=", "null", ")", "{", "reset", "=", "1", ";", "ctx", "-", ">", "md", "=", "md", ";", "}", "else", "if", "(", "ctx", "-", ">", "md", ")", "{", "md", "=", "ctx", "-", ">", "md", ";", "}", "else", "{", "return", "0", ";", "}", "if", "(", "key", "!", "=", "null", ")", "{", "reset", "=", "1", ";", "j", "=", "evp", "md", "block", "size", "(", "md", ")", ";", "if", "(", "!", "ossl", "assert", "(", "j", "<", "=", "(", "int", ")", "sizeof", "(", "ctx", "-", ">", "key", ")", ")", ")", "return", "0", ";", "if", "(", "j", "<", "len", ")", "{", "if", "(", "!", "evp", "digest", "init", "ex", "(", "ctx", "-", ">", "md", "ctx", ",", "md", ",", "impl", ")", "|", "|", "!", "evp", "digest", "update", "(", "ctx", "-", ">", "md", "ctx", ",", "key", ",", "len", ")", "|", "|", "!", "evp", "digest", "final", "ex", "(", "ctx", "-", ">", "md", "ctx", ",", "ctx", "-", ">", "key", ",", "&", "ctx", "-", ">", "key", "length", ")", ")", "return", "0", ";", "}", "else", "{", "if", "(", "len", "<", "0", "|", "|", "len", ">", "(", "int", ")", "sizeof", "(", "ctx", "-", ">", "key", ")", ")", "return", "0", ";", "memcpy", "(", "ctx", "-", ">", "key", ",", "key", ",", "len", ")", ";", "ctx", "-", ">", "key", "length", "=", "len", ";", "}", "if", "(", "ctx", "-", ">", "key", "length", "!", "=", "hmac", "max", "md", "cblock", ")", "memset", "(", "&", "ctx", "-", ">", "key", "[", "ctx", "-", ">", "key", "length", "]", ",", "0", ",", "hmac", "max", "md", "cblock", "-", "ctx", "-", ">", "key", "length", ")", ";", "}", "if", "(", "reset", ")", "{", "for", "(", "i", "=", "0", ";", "i", "<", "hmac", "max", "md", "cblock", ";", "i", "+", "+", ")", "pad", "[", "i", "]", "=", "0x36", "^", "ctx", "-", ">", "key", "[", "i", "]", ";", "if", "(", "!", "evp", "digest", "init", "ex", "(", "ctx", "-", ">", "i", "ctx", ",", "md", ",", "impl", ")", "|", "|", "!", "evp", "digest", "update", "(", "ctx", "-", ">", "i", "ctx", ",", "pad", ",", "evp", "md", "block", "size", "(", "md", ")", ")", ")", "goto", "err", ";", "for", "(", "i", "=", "0", ";", "i", "<", "hmac", "max", "md", "cblock", ";", "i", "+", "+", ")", "pad", "[", "i", "]", "=", "0x5c", "^", "ctx", "-", ">", "key", "[", "i", "]", ";", "if", "(", "!", "evp", "digest", "init", "ex", "(", "ctx", "-", ">", "o", "ctx", ",", "md", ",", "impl", ")", "|", "|", "!", "evp", "digest", "update", "(", "ctx", "-", ">", "o", "ctx", ",", "pad", ",", "evp", "md", "block", "size", "(", "md", ")", ")", ")", "goto", "err", ";", "}", "if", "(", "!", "evp", "md", "ctx", "copy", "ex", "(", "ctx", "-", ">", "md", "ctx", ",", "ctx", "-", ">", "i", "ctx", ")", ")", "goto", "err", ";", "rv", "=", "1", ";", "err", ":", "if", "(", "reset", ")", "openssl", "cleanse", "(", "pad", ",", "sizeof", "(", "pad", ")", ")", ";", "return", "rv", ";", "}"], "file": "data_process/data/d2a/func/vuln/multi/openssl-ff59ce71b50dbd735a065cb2a832ad870593845f_1-auto_labeler-INTEGER_OVERFLOW_L5-multi_function.c", "vul_type": "integer_overflow", "target": 1}